<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ReportDefinition type="standard">
    <TemplateName>Fortify Developer Workbook</TemplateName>
    <TemplatePath></TemplatePath>
    <LogoPath>/HPE_logo.jpg</LogoPath>
    <Footnote>Copyright 2017 Hewlett Packard Enterprise Development, L.P.</Footnote>
    <UserName></UserName>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Report Overview</Title>
        <SubSection enabled="true">
            <Title>Report Summary</Title>
            <Description>This provides a high level summary of the findings that the analysis produced.  Also includes basic information on the scope of the scan.</Description>
            <Text>On Jan 17, 2018, a source code review was performed over the FBUILD_ID code base. 4,988 files, 520,114 LOC (Executable) were scanned. A total of 1269 issues were uncovered during the analysis.  This report provides a comprehensive description of all the types of issues found in this project.  Specific examples and source code are provided for each issue type.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issue Summary by Fortify Priority Order</Title>
            <Description>A table summarizing the number of issues found and the breakdown of issues in each Fortify Priority Level</Description>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Fortify Priority Order</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="856">
                        <groupTitle>Low</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="209">
                        <groupTitle>Medium</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="150">
                        <groupTitle>High</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="54">
                        <groupTitle>Critical</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Issue Summary</Title>
        <SubSection enabled="true">
            <Title>Overall number of results</Title>
            <Description>Results count</Description>
            <Text>The scan found 1269 issues.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issues By Category</Title>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="856">
                        <groupTitle>Cross-Site Request Forgery</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="146">
                        <groupTitle>Cross-Site Scripting: Poor Validation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="119">
                        <groupTitle>Server-Side Request Forgery</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="59">
                        <groupTitle>Often Misused: File Upload</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="35">
                        <groupTitle>Command Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Cross-Site Scripting: Reflected</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="9">
                        <groupTitle>Mass Assignment: Sensitive Field Exposure</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>XML External Entity Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Header Manipulation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: Overly Broad Domain</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: Overly Broad Path</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>XML Entity Expansion Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Path Manipulation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Cross-Site Scripting: Persistent</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>ClassLoader Manipulation: Struts 1</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dynamic Code Evaluation: Unsafe Deserialization</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Results Outline</Title>
        <SubSection enabled="true">
            <Title>Vulnerability Examples by Category</Title>
            <Description>Results summary of all issue categories.  Vulnerability examples are provided by category.</Description>
            <IssueListing limit="1000" listing="true">
                <Refinement></Refinement>
                <Chart chartType="list">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="856">
                        <groupTitle>Cross-Site Request Forgery</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The form post at account_only_change_view.jsp line 510 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>A cross-site request forgery (CSRF) vulnerability occurs when:
1. A Web application uses session cookies.

2. The application acts on an HTTP request without verifying that the request was made with the user's consent.



A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form:


&lt;form method=&quot;POST&quot; action=&quot;/new_user&quot; &gt;
  Name of new user: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;
  Password for new user: &lt;input type=&quot;password&quot; name=&quot;user_passwd&quot;&gt;
    &lt;input type=&quot;submit&quot; name=&quot;action&quot; value=&quot;Create User&quot;&gt;
&lt;/form&gt;


An attacker might set up a Web site with the following:


&lt;form method=&quot;POST&quot; action=&quot;http://www.example.com/new_user&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;username&quot; value=&quot;hacker&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;user_passwd&quot; value=&quot;hacked&quot;&gt;
&lt;/form&gt;
&lt;script&gt;
  document.usr_form.submit();
&lt;/script&gt;


If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application.

Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request.

CSRF is entry number five on the 2007 OWASP Top 10 list.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this:


  RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, &quot;/new_user&quot;);
  body = addToPost(body, new_username);
  body = addToPost(body, new_passwd);
  body = addToPost(body, request_id);
  rb.sendRequest(body, new NewAccountCallback(callback));


Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3.

Additional mitigation techniques include:

Framework protection: Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens.
Use a Challenge-Response control: Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens.
Check HTTP Referer/Origin headers: An attacker won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks.
Double-submit Session Cookie: Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy.
Limit Session Lifetime: When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack.

The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. SCA flags all HTML forms and XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>856</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9D2DC2AD519BD548018E0258FFD0A3CC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeMyItems.jsp line 27 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeMyItems.jsp</FileName>
<FilePath>webapp/routeMyItems.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:submitForm()&quot;&gt;
&lt;html:form action=&quot;/queue.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;mapId&quot;/&gt;
  &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;1&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7EEDCD4DE9FAFEFD7E2277D8BF67D964">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at searchHistory.jsp line 40 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>searchHistory.jsp</FileName>
<FilePath>webapp/searchHistory.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>		document.forms['SearchForm'].circuitId.value = input;
	}else{		
  jQuery('&lt;form&gt;', {
        'action': 'headerSearch.do',
        'method': 'post'</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5064D3FADA70562018B555B3BCCDB6CC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vis_converttoharmony.jsp line 36 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vis_converttoharmony.jsp</FileName>
<FilePath>webapp/fallout_vis_converttoharmony.jsp</FilePath>
<LineStart>36</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DFDE0B1C3A6CA679DC0091D66A0EAF1D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_workgroup_edit.jsp line 94 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_workgroup_edit.jsp</FileName>
<FilePath>webapp/admin_workgroup_edit.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>              &lt;tr&gt;
                &lt;td&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/wrkgrpmgmt.do&quot;&gt;
&lt;%
String wrkGrpName=(String)request.getAttribute(&quot;workgrpname&quot;);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="541F1E49D3330F9007AD33C8F2EEB7D5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at add_alarm.jsp line 271 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>add_alarm.jsp</FileName>
<FilePath>webapp/add_alarm.jsp</FilePath>
<LineStart>271</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;populateMap();&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/alarmbox.do&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A9D53185E9A10C34F9B5FB34DF409705">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vadiwest_hold.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vadiwest_hold.jsp</FileName>
<FilePath>webapp/fallout_vadiwest_hold.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
    &lt;html:form action=&quot;/fallout_vadiwest_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="92CE82F88FDEB671CBF73174661C1AA5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVAddCorrection.jsp line 1513 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVAddCorrection.jsp</FileName>
<FilePath>webapp/OVAddCorrection.jsp</FilePath>
<LineStart>1513</LineStart>
<Snippet>                                    &lt;/div&gt;

&lt;html:form action=&quot;/sspfallout_volwest_detail.do&quot; method=&quot;post&quot; &gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B8E1C840BDA1A6F66BCEF99AA5A340F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pushMailManually.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pushMailManually.jsp</FileName>
<FilePath>webapp/pushMailManually.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>	Vector getDisplayDetails = pushMailSrvc.getDisplayDetails();
%&gt;
&lt;form name=&quot;pushMailForm&quot; method=&quot;post&quot; target=&quot;pushMailFrm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidOrdId&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidprodCat&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A5A4FBFF4C1B71B0850FA37228181099">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at home_new.jsp line 318 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>318</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
			&lt;html:form focus=&quot;searchInput&quot; action=&quot;/search.do&quot; method=&quot;post&quot;&gt;
			&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BC8F85867439E1EF0DFADE7F12463675">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at agentmgmt_searchlist.jsp line 597 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>agentmgmt_searchlist.jsp</FileName>
<FilePath>webapp/agentmgmt_searchlist.jsp</FilePath>
<LineStart>597</LineStart>
<Snippet>&lt;%  } %&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/agentmgmt.do&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot; value = 'NextSearch'/&gt;
	&lt;html:hidden property=&quot;pageNo&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B80A79035FCF1535D30B308BFF7ED216">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_westQueuePage.jsp line 571 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_westQueuePage.jsp</FileName>
<FilePath>webapp/view_westQueuePage.jsp</FilePath>
<LineStart>571</LineStart>
<Snippet>									&lt;tr&gt;
										&lt;td&gt;
											&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;											
												&lt;!-- COA Look and Feel By Sanjay --&gt;
												&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;3&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#dddddd&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F11F113F81D52D69FE571BE8521431F1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_dl_queue.jsp line 165 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_dl_queue.jsp</FileName>
<FilePath>webapp/supervisor_dl_queue.jsp</FilePath>
<LineStart>165</LineStart>
<Snippet>                  &lt;tr&gt;
                    &lt;td class=&quot;background3&quot;&gt;
                      &lt;form name=&quot;FilterForm&quot;&gt;
                      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; class=&quot;background2&quot;&gt;
                        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3F8643BC83FB7210E870BBB91449FD5E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateUOWError.jsp line 29 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateUOWError.jsp</FileName>
<FilePath>webapp/updateUOWError.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>    &lt;/logic:notPresent&gt;
    
    &lt;html:form action=&quot;/ossservicemapdetails.do&quot;&gt;
    
    &lt;table width=&quot;750&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B15ECD6A7A4D3FB5B9EDF9C97C444C9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest_hold.jsp line 88 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest_hold.jsp</FileName>
<FilePath>webapp/fallout_volwest_hold.jsp</FilePath>
<LineStart>88</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
	&lt;!-- COA Look and Feel By Sanjay --&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3A04DD4DAA51FE4062FDDC2EE9131A60">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_ob_lec.jsp line 300 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_ob_lec.jsp</FileName>
<FilePath>webapp/view_ob_lec.jsp</FilePath>
<LineStart>300</LineStart>
<Snippet>	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
	
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="823769DF32971347CB459E774AA8C6A0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at eventScheduler.jsp line 148 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>eventScheduler.jsp</FileName>
<FilePath>webapp/eventScheduler.jsp</FilePath>
<LineStart>148</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;form name=&quot;wdForm&quot; action=&quot;updateFlowConfig.do&quot; method=&quot;post&quot; &gt; 
&lt;input name=&quot;mapName&quot; type=&quot;hidden&quot;  size=&quot;15&quot; value=&quot;&quot;&gt; 
&lt;input name=&quot;hostName&quot; type=&quot;hidden&quot;  size=&quot;15&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CAEBAFE8695E9F657E5D00A141506A0A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_z2p.jsp line 269 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_z2p.jsp</FileName>
<FilePath>webapp/fallout_z2p.jsp</FilePath>
<LineStart>269</LineStart>
<Snippet>	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;

	&lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;

	&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="15DD269CF7722588ABD6910EFF0775B7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusQueueSupervisor.jsp line 144 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusQueueSupervisor.jsp</FileName>
<FilePath>webapp/statusQueueSupervisor.jsp</FilePath>
<LineStart>144</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
           &lt;html:form method=&quot;post&quot; action=&quot;/statusqueuesupervisor.do&quot; target=&quot;searchbox&quot;&gt;             
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;100&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5595EEF5812932650176A0DDDCEB9EFB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at JSpellIFrame.jsp line 351 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSpellIFrame.jsp</FileName>
<FilePath>webapp/jspellhtml2k4/JSpellIFrame.jsp</FilePath>
<LineStart>351</LineStart>
<Snippet>			&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=&quot;4&quot; color=&quot;red&quot;&gt;ERROR&lt;/font&gt;&lt;p&gt;
			&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=&quot;2&quot;&gt;The spell checker is unavailable. Please try your request again later. If you continue to receive this message, please contact your server administrator.&lt;/font&gt;&lt;p&gt;
			&lt;form&gt;
				&lt;input type=button name=&quot;closeButton&quot; value=&quot;Ok&quot; onclick=&quot;parent.close();&quot;&gt;&lt;br&gt;
			&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BB0D3C852D1A26AB22B8DA04F4617E35">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at icare_hold.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>icare_hold.jsp</FileName>
<FilePath>webapp/icare_hold.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
    &lt;html:form action=&quot;/icare_hold_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;718&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3EE02801034C4540C366671DA344C999">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_agentreminders.jsp line 70 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_agentreminders.jsp</FileName>
<FilePath>webapp/order_view_agentreminders.jsp</FilePath>
<LineStart>70</LineStart>
<Snippet>                  &lt;/table&gt;&lt;/td&gt;
              &lt;/tr&gt;
              &lt;form name=&quot;SearchForm&quot; action=&quot;search.do&quot; method=&quot;post&quot;&gt;
              &lt;tr&gt;
                &lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="52BEC61DFD9E305AAE46C959B542BE47">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogFileView.jsp line 71 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogFileView.jsp</FileName>
<FilePath>webapp/moggui/mogFileView.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
              &lt;html:form action=&quot;/mogFileView.do&quot;&gt;
              &lt;!--Search Table Starts Here--&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FF50319C206814E855831C50A027918E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pushMailGetDetails.jsp line 8 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pushMailGetDetails.jsp</FileName>
<FilePath>webapp/pushMailGetDetails.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>&lt;%@ page import=&quot;com.verizon.ssp.flowclient.tools.testingtool.*,java.util.*&quot; %&gt;
&lt;script language=&quot;Javascript&quot; src=&quot;javascript/flowclient.js&quot;&gt;&lt;/script&gt;
&lt;form name=&quot;pushMailSubForm&quot;&gt;
&lt;%
	String refId = request.getParameter(&quot;hidrefId&quot;);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DA62A9EF8C7C8C493BFFDADD9AA12B38">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_myreminders.jsp line 111 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_myreminders.jsp</FileName>
<FilePath>webapp/order_view_myreminders.jsp</FilePath>
<LineStart>111</LineStart>
<Snippet>              &lt;/tr&gt;
              &lt;!--form name=&quot;fallout&quot; action=&quot;fallout.do&quot; method=&quot;get&quot;--&gt;
			   &lt;form name=&quot;SearchForm&quot; action=&quot;search.do&quot; method=&quot;post&quot;&gt;
              &lt;tr&gt;
                &lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="31D9587EAE2CB0704221F904AD5E8BD5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at preOrderHold.jsp line 82 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>preOrderHold.jsp</FileName>
<FilePath>webapp/systemtools/ittools/preOrderHold.jsp</FilePath>
<LineStart>82</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;PreorderHoldForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0DCDD0DBFA37E9D6EA654D8DEEFDEE1B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_supervisor_queue.jsp line 145 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_supervisor_queue.jsp</FileName>
<FilePath>webapp/wmg_supervisor_queue.jsp</FilePath>
<LineStart>145</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgSuper.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9ED">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 253 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>253</LineStart>
<Snippet>  else if (mapId.equals(Constants.DLRETENTION_MAP_ID)) {
  %&gt;
        &lt;form action=&quot;fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
        &lt;input type=hidden name=&quot;requestType&quot; value=&quot;dlDispCode&quot;&gt;
        &lt;input type=hidden name=&quot;requestAction&quot; value=&quot;dlDispCode:submit&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AC0A7AFD04BBA6991244CE1E05A4CC7D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgFalloutVTP.jsp line 126 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgFalloutVTP.jsp</FileName>
<FilePath>webapp/ssppgFalloutVTP.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>		
	&lt;jsp:include page=&quot;/ssppg_Fallout_referto_include.jsp&quot;/&gt;
	&lt;html:form action=&quot;/ssppgFallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
	&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DBF2A938618EFDD2A335A45D3D9810DC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restrict_flowGUI_user.jsp line 48 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restrict_flowGUI_user.jsp</FileName>
<FilePath>webapp/restrict_flowGUI_user.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>&lt;bean:define id=&quot;userNameBean&quot; value=&quot;&lt;%=userName%&gt;&quot;/&gt;
&lt;bean:define id=&quot;userIdBean&quot; value=&quot;&lt;%=userId%&gt;&quot;/&gt;
&lt;form name=&quot;RestrictForm&quot; method=&quot;post&quot;&gt;							  
	&lt;input type=&quot;hidden&quot; name=&quot;srcApp&quot; value=&quot;FlowGUI&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;userID&quot; value='&lt;bean:write name=&quot;userNameBean&quot;/&gt;'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C629D629BBCF0C1FA2E0C22CDD01FA52">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_referto_include.jsp line 40 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_referto_include.jsp</FileName>
<FilePath>webapp/fallout_referto_include.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>
&lt;/script&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/fallout.do&quot;&gt;
	&lt;html:hidden property=&quot;requestReferTo&quot; value=&quot;&quot; /&gt;
	&lt;html:hidden property=&quot;viewTab&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B8135E134501F6DB6EF07576FBBACC7C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at onlineProfile.jsp line 95 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>onlineProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/onlineProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				}   				
				$('div#form2').append(
					$('&lt;form id= &quot;updateForm&quot; name= &quot;onlineprofileDisplayForm&quot; action=&quot;OnlineProfileUpdate.action&quot; method= &quot;post&quot;/&gt; ')
						.append(mainHead)
						.append('&lt;input type=&quot;hidden&quot; name=&quot;myMap&quot; id=&quot;updateFormHiddenField&quot;&gt;')</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CB280D7574B017CE5C77173BFA8C5615">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at instepAnalysis.jsp line 103 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>instepAnalysis.jsp</FileName>
<FilePath>webapp/instepAnalysis.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/instepAnalysis.do&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;!-- &lt;jsp:include page=&quot;/header.jsp&quot;/&gt; --&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9E8B6FDB14FAF57F4D0DFAE999DB9E3B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeVTerminalView.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeVTerminalView.jsp</FileName>
<FilePath>webapp/bbeVTerminalView.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>				&lt;!-- To Show Content Type Starts --&gt;
				&lt;td valign=&quot;top&quot;&gt;
				&lt;html:form  action=&quot;/usageOrderSearch.do&quot; method=&quot;post&quot;&gt;
				&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
					&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7AF40BBB042D609EC698FAFA4F62D473">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at thirdparty_ecrm_email.jsp line 127 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>thirdparty_ecrm_email.jsp</FileName>
<FilePath>webapp/thirdparty_ecrm_email.jsp</FilePath>
<LineStart>127</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
   
	&lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
	&lt;bean:define id=&quot;pieIdBean&quot; value=&quot;&lt;%=request.getParameter(&quot;HISTORYEMAIL_HISTORY_PIEID&quot;)%&gt;&quot;/&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;FALLOUT_PIEID&quot; value=&quot;&lt;bean:write name=&quot;pieIdBean&quot;/&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="74A82FBD6A6D5F5A8852495678B873CB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vis_converttoharmony_faliure.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vis_converttoharmony_faliure.jsp</FileName>
<FilePath>webapp/fallout_vis_converttoharmony_faliure.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>&lt;/table&gt;

    &lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1DC1FD86BAD7F3E6A0DFEA47A98DDB1D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at cancelXMLNewNoISD.jsp line 90 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>cancelXMLNewNoISD.jsp</FileName>
<FilePath>webapp/cancelXMLNewNoISD.jsp</FilePath>
<LineStart>90</LineStart>
<Snippet>	%&gt;
		
		&lt;form name=&quot;frmPbl&quot; action=&quot;cancelResultXML.jsp&quot; method=post target=&quot;ifrmXML&quot;&gt;
		&lt;% 
			Iterator ite = xmlStr.keySet().iterator();</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CEE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1697 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1697</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5259FA093FCC8A18BA9E1DCB9CBA7E05">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at CommonProfile.jsp line 320 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommonProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/CommonProfile.jsp</FilePath>
<LineStart>320</LineStart>
<Snippet>		&lt;/div&gt;
		&lt;div id=&quot;keysContainer&quot;&gt;
			&lt;form class=&quot;pcForm&quot; id=&quot;pcForm&quot; method=&quot;POST&quot; action=&quot;CPRetrieveTabledata.action&quot;&gt;
			&lt;/form&gt;
		&lt;/div&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65BB0A95A9ACD889004CCDC3E5BA3383">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_description.jsp line 108 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_description.jsp</FileName>
<FilePath>webapp/fallout_description.jsp</FilePath>
<LineStart>108</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form action=&quot;/deletearbor.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;indexes&quot; value=&quot;&quot;/&gt;
&lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2ECCF8FF88B68F95D0F007AA91D9B8D1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at referFriends.jsp line 79 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>referFriends.jsp</FileName>
<FilePath>webapp/referFriends.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>&lt;body&gt;
&lt;jsp:include page=&quot;widgets_header.jsp&quot;&gt;&lt;/jsp:include&gt;
&lt;html:form name=&quot;stnForm&quot; action=&quot;/sharethenetwork&quot; type=&quot;com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.StnRegisterForm&quot;
	method=&quot;post&quot;&gt;
	&lt;table style=&quot;width: 737px; height: 538px; background-image: url(images/tvbg.png); text-align: center;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AF89023863DDA858723728D9F978C0EE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateMasterService.jsp line 32 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateMasterService.jsp</FileName>
<FilePath>webapp/updateMasterService.jsp</FilePath>
<LineStart>32</LineStart>
<Snippet>&lt;!-- COA Look and Feel By Sanjay --&gt;

 &lt;html:form method=&quot;post&quot; action=&quot;/updateMasterService.do&quot;&gt;
       &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B1D4518D3F0FE3524277342A499C9AF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_usage_queue.jsp line 526 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_usage_queue.jsp</FileName>
<FilePath>webapp/supervisor_usage_queue.jsp</FilePath>
<LineStart>526</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/supervisor_detail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;mapId&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPID) %&gt;&quot;/&gt;
      &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPVER) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="086C187841791149DAD379903F9005A7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at displayMessages.jsp line 129 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>displayMessages.jsp</FileName>
<FilePath>webapp/systemtools/ittools/displayMessages.jsp</FilePath>
<LineStart>129</LineStart>
<Snippet>				
			&lt;/s:form&gt;
			&lt;s:form action=&quot;orderDiagnosis&quot; method=&quot;post&quot; id=&quot;OrderDiagnosisForm&quot;&gt;
			    &lt;s:hidden name=&quot;orderId&quot; id=&quot;orderId&quot;/&gt;
				&lt;s:hidden name=&quot;messageName&quot; id=&quot;messageName&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="86D36BCD3C8ACC903C240B0ACCF45201">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at detail_retryqueue.jsp line 60 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>detail_retryqueue.jsp</FileName>
<FilePath>webapp/detail_retryqueue.jsp</FilePath>
<LineStart>60</LineStart>
<Snippet>
&lt;/logic:notEmpty&gt;
&lt;form name=&quot;ServiceBeanForm&quot; method=&quot;post&quot; action = &quot;retryQueue.do&quot;  target=&quot;_parent&quot;&gt;
	&lt;%if (&quot;displaycheckbox&quot;.equalsIgnoreCase(chkboxDisplay)) {%&gt;
	&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65BB0A95A9ACD889004CCDC3E5BA3386">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_description.jsp line 292 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_description.jsp</FileName>
<FilePath>webapp/fallout_description.jsp</FilePath>
<LineStart>292</LineStart>
<Snippet>	     &lt;/html:form&gt;
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AD455C71836DCFCD6DF849D4E652187F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at affinityConsumerDetails.jsp line 490 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>affinityConsumerDetails.jsp</FileName>
<FilePath>webapp/affinityConsumerDetails.jsp</FilePath>
<LineStart>490</LineStart>
<Snippet>	&lt;html:hidden property=&quot;resendToken&quot; value=&quot;&quot;/&gt;
&lt;/html:form&gt;
&lt;form name=&quot;OrderForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot; value=&quot;&quot; /&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;cogOrderId&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DF5039DB9C61BBFBB774F2E92941BD95">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_ob.jsp line 190 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_ob.jsp</FileName>
<FilePath>webapp/fallout_ob.jsp</FilePath>
<LineStart>190</LineStart>
<Snippet>&lt;jsp:include page=&quot;/fallout_release_include.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_ob_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4A773D592572816E1094C6AAFF7009CD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at new_header.jsp line 297 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>new_header.jsp</FileName>
<FilePath>webapp/new_header.jsp</FilePath>
<LineStart>297</LineStart>
<Snippet>		return;
	}
  jQuery('&lt;form&gt;', {
        'action': 'headerSearch.do',
        'method': 'post'</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EFEBBBD0107934B9AA4E478CC546A4A8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nsopComplete.jsp line 20 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nsopComplete.jsp</FileName>
<FilePath>webapp/nsopComplete.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/nsopComplete&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot; &gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FB243F2A80BB855F186B1EB6E7E06183">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_vtp_fallouts.jsp line 235 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_vtp_fallouts.jsp</FileName>
<FilePath>webapp/view_vtp_fallouts.jsp</FilePath>
<LineStart>235</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_vtp.jsp&quot;/&gt;
                  &lt;tr&gt;
				  &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
					&lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1C99B47BE93744883BE464158AA57F44">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at toshold_release_manage.jsp line 172 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>toshold_release_manage.jsp</FileName>
<FilePath>webapp/toshold_release_manage.jsp</FilePath>
<LineStart>172</LineStart>
<Snippet>		&lt;td width=&quot;5&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;5&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
		&lt;td width=&quot;100%&quot;&gt;
		&lt;html:form focus=&quot;orderIds&quot; action=&quot;/toshold_release.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot; target=&quot;searchbox&quot;&gt;   
			&lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
				&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9E9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 225 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>    else if(mapId != null &amp;&amp; mapId.equals(&quot;17&quot;)) {
  %&gt;
    &lt;form action=&quot;vadiwest_resubmit.do&quot; method=&quot;post&quot;&gt;
  &lt;%
  }</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DE489B6F2C87417092566CB8D97106D8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at marketingProfile.jsp line 218 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>marketingProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/marketingProfile.jsp</FilePath>
<LineStart>218</LineStart>
<Snippet>				marketingupdatesection.appendTo(mainHead);
				$('div#form2').append(
					$('&lt;form id= &quot;marketingProfileUpdateForm&quot; name= &quot;marketingProfileUpdateForm&quot; action=&quot;MarketingProfileUpdate.action&quot; method= &quot;post&quot; onsubmit=&quot;return  onBeforeUpdate(event)&quot;/&gt; ')
						.append(mainHead)						
				);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="46D860934F25263FE8FBA1B6AC4BD8A1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vadifttp_correct.jsp line 53 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vadifttp_correct.jsp</FileName>
<FilePath>webapp/fallout_vadifttp_correct.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>
&lt;BODY onLoad=&quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;br&gt;
&lt;table width='696' border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; &gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9EB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 239 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>239</LineStart>
<Snippet>	  ) {
  %&gt;
	&lt;form action=&quot;fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=hidden name=&quot;requestType&quot; value=&quot;updateCircuitID&quot;&gt;
	&lt;input type=hidden name=&quot;requestAction&quot; value=&quot;updateCircuitID:submit&quot;&gt;	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8E1C8D1F92E705AEDAA68674730B5563">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_search_ref.jsp line 53 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_search_ref.jsp</FileName>
<FilePath>webapp/wmg_search_ref.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgSearchRef.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8AFAD100EDC04811DBE0D1AB33B9CF4B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_addRemoveaccess.jsp line 366 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_addRemoveaccess.jsp</FileName>
<FilePath>webapp/admin_addRemoveaccess.jsp</FilePath>
<LineStart>366</LineStart>
<Snippet>                        &lt;div id=&quot;div2&quot; class=&quot;tab&quot;&gt;
                        &lt;!------------------Request Access Starts------------------&gt;
						&lt;form id=&quot;addaccessform&quot; action=&quot;/sspflow/usermanagement.do&quot; method=&quot;post&quot;&gt;
						&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; id=&quot;requestType&quot; value=&quot;&quot; /&gt;
						&lt;input type=&quot;hidden&quot; name=&quot;groupId&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A7CAC7545B20C6A3CA21DC3241EEC3E4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_botb.jsp line 292 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_botb.jsp</FileName>
<FilePath>webapp/view_botb.jsp</FilePath>
<LineStart>292</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D7B9EF33C10CE30F344BEA8AC30078B6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at customerprofile.jsp line 11 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>customerprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/customerprofile.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>	&lt;div class=&quot;panel serif&quot;&gt;
		&lt;s:if test='%{#request.equipmentProfileInfo.customerInfo != null}'&gt;
		&lt;s:form action=&quot;EPUpdateCustomerInfo&quot; name=&quot;customerInfoDisplayForm&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;CustomerInfoMap&quot; id=&quot;CustomerInfoMap&quot;/&gt;
		&lt;table&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CAE9644E9037F56B5EFF715A82ABF43E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vzwinfo.jsp line 79 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vzwinfo.jsp</FileName>
<FilePath>webapp/vzwinfo.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>  &lt;/tr&gt;
&lt;/logic:notEqual&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/diaExport.do&quot;&gt;
&lt;html:hidden property=&quot;orderID&quot; /&gt;
&lt;html:hidden property=&quot;elememtID&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7D0C4A1626A4BB5542F4D984F112CE6D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vtp_failed_order.jsp line 73 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vtp_failed_order.jsp</FileName>
<FilePath>webapp/vtp_failed_order.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>	
      &lt;tr&gt;
	  &lt;form name=&quot;MONForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;cogOrderId&quot; value=&quot;&quot;/&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6DCC25B77BE774F14DBAB236A3CB8E7F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Testing_clone.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Testing_clone.jsp</FileName>
<FilePath>webapp/Testing_clone.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>%&gt;
&lt;body style=&quot; margin:0; font-size:0.9em; line-height:20px; font-family: 'Myriad Pro', 'Trebuchet MS', Arial;  background-color:#EEEFF7;&quot;&gt;
&lt;form name=&quot;configureTestCaseForm&quot; method=&quot;post&quot; target=&quot;tstCsDtlsFrm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidGrpId&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidTstCsId&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65BB0A95A9ACD889004CCDC3E5BA3384">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_description.jsp line 214 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_description.jsp</FileName>
<FilePath>webapp/fallout_description.jsp</FilePath>
<LineStart>214</LineStart>
<Snippet>					&lt;tr&gt;
						&lt;td&gt;
							&lt;form name=&quot;SelectRadioButton&quot;&gt;
								&lt;table width=&quot;100%&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000000&quot;&gt;
									&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="ED0C6A8460D18837DAFAA31FE9F28331">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ivappAdxHeaders.jsp line 59 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ivappAdxHeaders.jsp</FileName>
<FilePath>webapp/businessTools/tools/ivappAdxHeaders.jsp</FilePath>
<LineStart>59</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ivappAdxReflowForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C2FF78E1F6D9B911E7434807FEEF34FB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusQueue.jsp line 196 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusQueue.jsp</FileName>
<FilePath>webapp/statusQueue.jsp</FilePath>
<LineStart>196</LineStart>
<Snippet>        &lt;tr&gt; 
          &lt;td class=&quot;background4&quot;&gt; 
           &lt;html:form method=&quot;post&quot; action=&quot;/statusqueue.do&quot; target=&quot;searchbox&quot;&gt;     
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;121&quot;&gt;
              &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2A7FB27B0FF9AE9F0B4D2E7FE7691939">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerhome.jsp line 36 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerhome.jsp</FileName>
<FilePath>webapp/analyzerhome.jsp</FilePath>
<LineStart>36</LineStart>
<Snippet>&lt;body&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/loadBundle.do&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6680B0CE33DC1D4630B0D782F1FBE989">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changemyreminderinfo.jsp line 44 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changemyreminderinfo.jsp</FileName>
<FilePath>webapp/changemyreminderinfo.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
    &lt;html:form action=&quot;/updatemyreminder.do&quot; method=&quot;post&quot;&gt;
    
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="230EB04929B323E4BC1C7CF5B1E1EB9F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_disconnect2.jsp line 179 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_disconnect2.jsp</FileName>
<FilePath>webapp/order_view_disconnect2.jsp</FilePath>
<LineStart>179</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/disqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B0D712C219BAE0C72861EF3A10897EF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_tp_queue.jsp line 352 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_tp_queue.jsp</FileName>
<FilePath>webapp/supervisor_tp_queue.jsp</FilePath>
<LineStart>352</LineStart>
<Snippet>                  &lt;tr&gt;
                    &lt;td class=&quot;background3&quot;&gt;
                      &lt;form name=&quot;FilterForm&quot;&gt;
                      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; class=&quot;background2&quot;&gt;
                        &lt;tr &gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="787FEC06CC5E4B121F1BB80C7809802A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewQueue.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewQueue.jsp</FileName>
<FilePath>webapp/viewQueue.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>

&lt;form name = &quot;sample1&quot; action = &quot;/sspflow/sample2.jsp&quot; method = &quot;post&quot;&gt;

&lt;table&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="970F203CFEDD0E58ACDBD9FB82E8AACD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmgqueue.jsp line 181 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmgqueue.jsp</FileName>
<FilePath>webapp/wmgqueue.jsp</FilePath>
<LineStart>181</LineStart>
<Snippet>&lt;/div&gt;
&lt;/div&gt;
&lt;html:form action=&quot;/wmgqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;refType&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="ADB7DD4711CB7C2E02835579345289C9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at createUOW.jsp line 423 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>createUOW.jsp</FileName>
<FilePath>webapp/createUOW.jsp</FilePath>
<LineStart>423</LineStart>
<Snippet>&lt;html:errors/&gt;
&lt;body style=&quot;margin:0px; background-color:#E9F3FF;&quot; onLoad=&quot;populateMap(); initialMap(); populateProdCategory();&quot;&gt;
&lt;html:form action=&quot;/createUOWResult.do&quot;&gt;

</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C928A17520A46FDFA9C145A68C0866B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_ribs.jsp line 737 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_ribs.jsp</FileName>
<FilePath>webapp/order_view_ribs.jsp</FilePath>
<LineStart>737</LineStart>
<Snippet>  &lt;!-- Added by Neha for A2R for RIBS fallout search filter changes starts --&gt;
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8553288DB485D383F5CC7B9ACEE5AFE8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massUOW.jsp line 24 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massUOW.jsp</FileName>
<FilePath>webapp/systemtools/ittools/massUOW.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;tr&gt;&lt;td width=&quot;100%&quot;&gt;
&lt;s:form method = &quot;post&quot; action=&quot;MassUOW&quot; enctype=&quot;multipart/form-data&quot;&gt;

&lt;span&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9CF5CC6C5B01AF6B9EB1576C1AFE7478">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Ivapp_report_main.jsp line 184 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Ivapp_report_main.jsp</FileName>
<FilePath>webapp/Ivapp_report_main.jsp</FilePath>
<LineStart>184</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69A05B99DC7BAE7604565D1203CC4DAC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_bbe_queue.jsp line 239 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_bbe_queue.jsp</FileName>
<FilePath>webapp/supervisor_bbe_queue.jsp</FilePath>
<LineStart>239</LineStart>
<Snippet>                  &lt;tr&gt;
                    &lt;td class=&quot;background3&quot;&gt;
                      &lt;form name=&quot;FilterForm&quot;&gt;
                      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; class=&quot;background2&quot;&gt;
                        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1629C0006E241E9A3FDB18DFEA99735D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at adptXmlTemplate.jsp line 75 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>adptXmlTemplate.jsp</FileName>
<FilePath>webapp/businessTools/tools/adptXmlTemplate.jsp</FilePath>
<LineStart>75</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;adptXmlForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69CDD0DF8DCF12E0B399F9F29F3DBC99">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at displayNewMessages.jsp line 99 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>displayNewMessages.jsp</FileName>
<FilePath>webapp/displayNewMessages.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>	&lt;TABLE width=&quot;100%&quot; bgColor=#C0C0C0 border=0&gt;
&lt;logic:present name=&quot;Message_List&quot;&gt;	
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; bordercolor=&quot;#999999&quot;&gt;
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4CECA25203CDF10253D5C53E370C0346">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at hoaDisconnectTool.jsp line 188 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>hoaDisconnectTool.jsp</FileName>
<FilePath>webapp/hoaDisconnectTool.jsp</FilePath>
<LineStart>188</LineStart>
<Snippet>	&lt;tr&gt;
		&lt;td colspan=&quot;5&quot;&gt;
		&lt;form name=&quot;RestoreAccountForm&quot; method=&quot;post&quot;  action = &quot;/sspflow/restoresubmit.do&quot; target = &quot;_parent&quot;&gt;	
			&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#FFFFFF&quot;&gt;			
				&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5AA3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 1360 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>1360</LineStart>
<Snippet>&lt;!-- Added by Neha for Estimated Fisrt Bill details ends --&gt;
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1F6545C68EAD1742958AEA0E0A66BA37">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeOrderView.jsp line 65 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeOrderView.jsp</FileName>
<FilePath>webapp/bbeOrderView.jsp</FilePath>
<LineStart>65</LineStart>
<Snippet>	
      &lt;tr&gt;
	  &lt;form name=&quot;MONForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;cogOrderId&quot; value=&quot;&quot;/&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="484E05A842204AB646EAB7EE68B59E7D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_queue.jsp line 545 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_queue.jsp</FileName>
<FilePath>webapp/supervisor_queue.jsp</FilePath>
<LineStart>545</LineStart>
<Snippet>    &lt;/html:form&gt; 
    
    &lt;html:form action=&quot;/elements.do&quot; method=&quot;post&quot;&gt;
      &lt;html:hidden property=&quot;ELEMENT_ORDERID&quot;/&gt;
      &lt;html:hidden property=&quot;ELEMENT_ELEMENTID&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E3425D1A3B68442C20195B26D6D67971">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at dmtAdmSrchGrpPage.jsp line 73 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>dmtAdmSrchGrpPage.jsp</FileName>
<FilePath>webapp/dmtAdmSrchGrpPage.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/dmtAccessRightsTool.do&quot; target=&quot;searchbox&quot;&gt;
&lt;table width=&quot;750&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="ED117A3AE3B3E9E128399555AEAF2401">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_hbi.jsp line 14 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_hbi.jsp</FileName>
<FilePath>webapp/filter_hbi.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>&lt;!-- LOB filter- Ends here --&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="86F10D831456C9EF947EEA007A542A0E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at activateOrderVersion.jsp line 135 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>activateOrderVersion.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/activateOrderVersion.jsp</FilePath>
<LineStart>135</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;activateVersion&quot; name=&quot;ActivateVersionFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="24D7CC9DB9E606DFEC7478DD2C6CEF18">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mqMsgsTransfer.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mqMsgsTransfer.jsp</FileName>
<FilePath>webapp/mqMsgsTransfer.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
		  &lt;html:form action=&quot;/mqMsgsTransfer.do&quot; method=&quot;post&quot; &gt;
              &lt;/td&gt;
          &lt;/tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 189 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>189</LineStart>
<Snippet>	  if( mapId != null &amp;&amp; (mapId.equals(Constants.OB_MAP_ID) || mapId.equals(Constants.LEC_MAP_ID) || mapId.equals(Constants.RAF_MAP_ID) )) {
	%&gt;
	&lt;form action=&quot;sspfallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;obMessageType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C57587567C81A6E50F59D634136720B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerreport.jsp line 658 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerreport.jsp</FileName>
<FilePath>webapp/analyzerreport.jsp</FilePath>
<LineStart>658</LineStart>
<Snippet>
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9FE4F20BF7AAA4AD2D2317B15107FE2A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bqtWebServiceInput.jsp line 93 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bqtWebServiceInput.jsp</FileName>
<FilePath>webapp/businessTools/tools/bqtWebServiceInput.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>&lt;body&gt;

&lt;s:form name=&quot;bqtRetrievalCall&quot; method=&quot;post&quot; theme=&quot;simple&quot; target=&quot;bqtWebServiceRetrievalCallInput&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="38BC5BC7C994CCB17B3FE48C24E73525">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at TestLogonForm.jsp line 25 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TestLogonForm.jsp</FileName>
<FilePath>webapp/TestLogonForm.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
  &lt;html:form action = &quot;/TestLogonForm.do&quot; method=&quot;post&quot;&gt;
  &lt;!-- COA Look and Feel By Sanjay --&gt;
  &lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="240FB0455C306474529D100528D76C0A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at JSpell.jsp line 487 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSpell.jsp</FileName>
<FilePath>webapp/jspellhtml2k4/JSpell.jsp</FilePath>
<LineStart>487</LineStart>
<Snippet>			&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=2&gt;The spell checker is unavailable. If you continue to receive this message, please contact your server administrator.&lt;/font&gt;&lt;p&gt;
			&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=3 color=red&gt;An error has occured. Please try again later.&lt;/font&gt;&lt;p&gt;
			&lt;form&gt;
				&lt;input type=button name=&quot;closeButton&quot; value=&quot;Ok&quot; onclick=&quot;spellCheckClosing(); parent.close();&quot;&gt;&lt;br&gt;
			&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D9B915906704F40912C679F00F406296">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVAddCorrectionPC.jsp line 672 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVAddCorrectionPC.jsp</FileName>
<FilePath>webapp/OVAddCorrectionPC.jsp</FilePath>
<LineStart>672</LineStart>
<Snippet>&lt;/logic:notPresent&gt;

&lt;html:form action=&quot;/sspfallout_volwest_detail.do&quot; method=&quot;post&quot; &gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4580B2247808BB0E28FF9548EB636083">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_z2p_fallouts.jsp line 297 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_z2p_fallouts.jsp</FileName>
<FilePath>webapp/view_z2p_fallouts.jsp</FilePath>
<LineStart>297</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/visqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="086C187841791149DAD379903F9005A5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at displayMessages.jsp line 86 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>displayMessages.jsp</FileName>
<FilePath>webapp/displayMessages.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>&lt;/script&gt;    
&lt;/HEAD&gt;
&lt;html:form action=&quot;/orderDiagnosis.do&quot; method=&quot;post&quot;&gt;

&lt;html:hidden property=&quot;orderId&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E354601C379ADB2D4AD7061CF5AB1037">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at icareNotes.jsp line 276 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>icareNotes.jsp</FileName>
<FilePath>webapp/icareNotes.jsp</FilePath>
<LineStart>276</LineStart>
<Snippet>    &lt;table width=&quot;738&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
     &lt;tr&gt;
       &lt;td&gt;&lt;form name=&quot;EditForm&quot; method=&quot;post&quot;&gt;
        &lt;table width=&quot;738&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
         &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C608202C256D175914E9D908EA6F2503">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_changeribs.jsp line 45 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_changeribs.jsp</FileName>
<FilePath>webapp/pop_changeribs.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>              &lt;td width=&quot;38%&quot; class=&quot;ContentInput4&quot;&gt;Corrected Data&lt;/td&gt;
            &lt;/tr&gt;
			&lt;html:form action=&quot;/changeribs.do&quot;&gt;
			    &lt;logic:present name=&quot;DETAILRIBSINFO&quot;&gt; 
				    &lt;logic:iterate id=&quot;result&quot; name=&quot;DETAILRIBSINFO&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="20E239EE464CF272E0C65E2751141429">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_sdmp.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_sdmp.jsp</FileName>
<FilePath>webapp/filter_sdmp.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6FFC1DE56EE0AF7DA983C4EB357F92E2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_touchpointemail.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_touchpointemail.jsp</FileName>
<FilePath>webapp/filter_touchpointemail.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>&lt;bean:define id=&quot;filterToDate&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_TODATE)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
	var tpOrderEventArr = new Array()</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9759C2B9D05BC6583FBCAD0C87AB38F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at trackingTool.jsp line 201 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>trackingTool.jsp</FileName>
<FilePath>webapp/businessTools/tools/trackingTool.jsp</FilePath>
<LineStart>201</LineStart>
<Snippet>			&lt;/div&gt;
			&lt;div class=&quot;container&quot;&gt;
				&lt;form name=&quot;trackingDisplayForm&quot; id=&quot;trackingDisplayForm&quot; action=&quot;trackingretreive.action&quot; method=&quot;post&quot;&gt;
					&lt;div class=&quot;form-group&quot;&gt;
						&lt;label for=&quot;servicename&quot;&gt;Service Name*&lt;/label&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 289 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>289</LineStart>
<Snippet>  else  if(Constants.VOSE_MAP_ID.equals(mapId)){
  %&gt;
        &lt;form action=&quot;fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
        &lt;html:hidden property=&quot;requestType&quot; value=&quot;correct&quot;/&gt;
        &lt;html:hidden property=&quot;requestAction&quot; value=&quot;correct:submit&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B7794ABFD2F7A710EA1E8D36F1C0C8C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at realTimeLQ.jsp line 91 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>realTimeLQ.jsp</FileName>
<FilePath>webapp/businessTools/tools/realTimeLQ.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;
&lt;s:form name=&quot;realTimeLQForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="579C8DEFA58018A7602FFE0F5EA14225">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massuploadbyerrorcode.jsp line 159 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massuploadbyerrorcode.jsp</FileName>
<FilePath>webapp/massuploadbyerrorcode.jsp</FilePath>
<LineStart>159</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;populateMap(); initialMap();&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massuploadbyerrorcode.do&quot; target=&quot;displayMsg&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4580B2247808BB0E28FF9548EB636082">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_z2p_fallouts.jsp line 225 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_z2p_fallouts.jsp</FileName>
<FilePath>webapp/view_z2p_fallouts.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_z2p.jsp&quot;/&gt;
                  &lt;tr&gt;
				  &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
					&lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2962ABF8F04A459A2E904577CD3D3757">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at falloutSequenceView.jsp line 59 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>falloutSequenceView.jsp</FileName>
<FilePath>webapp/falloutSequenceView.jsp</FilePath>
<LineStart>59</LineStart>
<Snippet>                &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;
                  &lt;tr&gt;
				  &lt;form name=&quot;SearchForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
				  &lt;input type=&quot;hidden&quot; name=&quot;accountId&quot; value=&quot;&quot; /&gt;
				  &lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5A56874054D3A81913D77734ED726BCF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_admin_updatereferral.jsp line 73 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_admin_updatereferral.jsp</FileName>
<FilePath>webapp/wmg_admin_updatereferral.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgRefSav.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;requestType&quot;/&gt;
&lt;html:hidden property=&quot;workId&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="29663A0A5249EB4F3F1B8CCFE32112D1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_icare.jsp line 1 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_icare.jsp</FileName>
<FilePath>webapp/filter_icare.jsp</FilePath>
<LineStart>1</LineStart>
<Snippet> &lt;form name=&quot;ICareForm&quot;&gt;
 &lt;td align=&quot;right&quot; class=&quot;background3&quot;&gt;
  &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;1&quot; class=&quot;background2&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5A9F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 1286 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>1286</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="681CCE2735D98CD72563AA18356E8DA1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caOfferOrderViewForFallout.jsp line 38 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caOfferOrderViewForFallout.jsp</FileName>
<FilePath>webapp/caOfferOrderViewForFallout.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>    &lt;td valign=&quot;top&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; id=&quot;table1&quot;&gt;
      &lt;tr&gt;
	  &lt;form name=&quot;MONForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;cogOrderId&quot; value=&quot;&quot;/&gt;
        &lt;td class=&quot;nmfheadbg&quot;&gt;&amp;nbsp;&amp;nbsp;Order ID: &lt;bean:write name=&quot;CAOfferServiceDetails&quot; property=&quot;orderId&quot; /&gt;	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CDD8F2755A41C6312803E060750D879E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at itoWirelessProfile.jsp line 48 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>itoWirelessProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWirelessProfile.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>&lt;body&gt;

&lt;s:form name=&quot;wirelessProfileITOForm&quot; method=&quot;post&quot; theme=&quot;simple&quot; target=&quot;wirelessProfileITO&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6E55BA62B47C7882D65C150B04B4CF32">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bundleMasterUpdateHome.jsp line 55 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bundleMasterUpdateHome.jsp</FileName>
<FilePath>webapp/bundleMasterUpdateHome.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>	
	&lt;div style=&quot;float:left; margin-top:5px; width:99%&quot;&gt;
	&lt;html:form action=&quot;/bundleMaster.do&quot; method=&quot;post&quot; target=&quot;bundleDetails&quot;&gt;
	
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2FC7EC76F205E51A29E29C28959E2EC7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiAdminHeaders.jsp line 48 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiAdminHeaders.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiAdminHeaders.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="04C5EAC978C798C1BBCBA4408C51FBB6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at data_reservationid.jsp line 60 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>data_reservationid.jsp</FileName>
<FilePath>webapp/data_reservationid.jsp</FilePath>
<LineStart>60</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form  action=&quot;/reservationidcorrection.do&quot; method=&quot;post&quot;&gt;
   &lt;table width=&quot;696&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot;&gt;
   &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CF7A971C11FDB2FC0BDC2C541FE806F9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at multiple_addressmatch.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>multiple_addressmatch.jsp</FileName>
<FilePath>webapp/multiple_addressmatch.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet> 
 
  &lt;html:form action=&quot;/videoaddresscorrection.do&quot; method=&quot;post&quot;&gt; 
	&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot;&gt; 
		</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8C6688BF9DBFB0CF1D9F522A8D838C02">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at txdashboarddate.jsp line 59 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>txdashboarddate.jsp</FileName>
<FilePath>webapp/txdashboarddate.jsp</FilePath>
<LineStart>59</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;

&lt;form name=&quot;txform&quot; action=&quot;texasDashboarddate.do&quot; method=&quot;post&quot;&gt;
&lt;input type =&quot;hidden&quot; property=&quot;radio&quot; value=&quot;&quot;/&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4ACFC0A176E2BD79D39D7D7E69F1F2F8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_removeagentdetails.jsp line 241 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>241</LineStart>
<Snippet>&lt;/table&gt;
&lt;/div&gt;
&lt;form&gt;

&lt;/body&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FF0360BF5414C07B8E08CED43950AB3E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at createUOWError.jsp line 29 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>createUOWError.jsp</FileName>
<FilePath>webapp/createUOWError.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>    &lt;/logic:notPresent&gt;
    
    	&lt;html:form action=&quot;/createUOWResult.do&quot;&gt;
    
    	&lt;logic:present name=&quot;CREATE_UOW_RESULT&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BDA957236EDB01880F75E12C4F9F630E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vzWBusinessReport.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vzWBusinessReport.jsp</FileName>
<FilePath>webapp/vzWBusinessReport.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>				&lt;td valign=&quot;top&quot;&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;4&quot; id=&quot;table3&quot; bgcolor=&quot;#bfbfbf&quot;&gt;
				  &lt;tr class=&quot;headbg8&quot;&gt;
				   &lt;html:form  action=&quot;/vzWBusinessReport.do&quot; method=&quot;post&quot;&gt;				   
				    &lt;td valign=&quot;top&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
				      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B3A557056080AC1E0D1F4E606886454A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribs_correction.jsp line 266 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribs_correction.jsp</FileName>
<FilePath>webapp/ribs_correction.jsp</FilePath>
<LineStart>266</LineStart>
<Snippet>                  &lt;/table&gt;
                  &lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
             &lt;html:form action=&quot;/ribs_correction.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
	       &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
	       &lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B74D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 1395 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>1395</LineStart>
<Snippet> &lt;!-- VISION5 - R4 - Renuka- Ends --&gt;
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4C65555AAED759D5D2BA52E03BECD2A6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_remedy.jsp line 232 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_remedy.jsp</FileName>
<FilePath>webapp/view_remedy.jsp</FilePath>
<LineStart>232</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_remedy.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A59DC6A3C8B7ADAACA1CF5C28D77761">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nacrCreateUpdateTerminateTool.jsp line 136 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nacrCreateUpdateTerminateTool.jsp</FileName>
<FilePath>webapp/businessTools/tools/nacrCreateUpdateTerminateTool.jsp</FilePath>
<LineStart>136</LineStart>
<Snippet>&lt;body  onload=&quot;activateCheckboxType();&quot;&gt;

&lt;s:form name=&quot;NACRCreateUpdateTerminateForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DCBCE1AC836AE35DD6C2AE9F08556038">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at survey.jsp line 57 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>survey.jsp</FileName>
<FilePath>webapp/survey.jsp</FilePath>
<LineStart>57</LineStart>
<Snippet>&lt;body &gt;
&lt;jsp:include page=&quot;widgets_header.jsp&quot;&gt;&lt;/jsp:include&gt;
&lt;form name=&quot;survey&quot; action=&quot;&lt;%=request.getContextPath()%&gt;/survey.do?param=submit&quot; method=&quot;get&quot;&gt;
&lt;input  type=&quot;hidden&quot; value=&quot;&quot; name=&quot;surveyChoiceDetails&quot; id=&quot;surveyChoiceDetails&quot;/&gt;
&lt;table width=&quot;750&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;left&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="75F163F37606E6079C9E31003B8DC1A0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at manualStatusNotification.jsp line 221 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>manualStatusNotification.jsp</FileName>
<FilePath>webapp/manualStatusNotification.jsp</FilePath>
<LineStart>221</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;740&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/manualStatusNotification.do&quot; target=&quot;searchbox&quot;&gt;
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="64F4CB51655ED40067C890890229AA73">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at prdQueueLoadBalancer.jsp line 27 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>prdQueueLoadBalancer.jsp</FileName>
<FilePath>webapp/prdQueueLoadBalancer.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/JmsTool.do&quot; target=&quot;searchbox&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AA3D625BF2FC73D0ECA24AB1CF873C17">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_disconnect.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_disconnect.jsp</FileName>
<FilePath>webapp/filter_disconnect.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="86E050DEB62A350608BD58C3BA44D6F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fiberManualPosting.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fiberManualPosting.jsp</FileName>
<FilePath>webapp/fiberManualPosting.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>

 &lt;html:form method=&quot;post&quot; action=&quot;/FiberPostManual.do&quot; &gt;
     &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9702B7CF5310B102EA24C71948158671">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_truckroll.jsp line 6 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_truckroll.jsp</FileName>
<FilePath>webapp/filter_truckroll.jsp</FilePath>
<LineStart>6</LineStart>
<Snippet>%&gt;

 &lt;form name=&quot;TruckRollForm&quot;&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot; class=&quot;background3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="01C8EF955E2F31694DAAC7E37B802AA0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest_correct.jsp line 30 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest_correct.jsp</FileName>
<FilePath>webapp/fallout_volwest_correct.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>  &lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385262">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1458 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1458</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="18762187F41DEB97B1708FEC4292523E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Testing_group.jsp line 35 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Testing_group.jsp</FileName>
<FilePath>webapp/Testing_group.jsp</FilePath>
<LineStart>35</LineStart>
<Snippet>%&gt;
&lt;body style=&quot; margin:0; font-size:0.9em; line-height:20px; font-family: 'Myriad Pro', 'Trebuchet MS', Arial;  background-color:#EEEFF7;&quot;&gt;
&lt;form name=&quot;configureTestCaseForm&quot; method=&quot;post&quot; target=&quot;tstCsDtlsFrm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidfetchValue&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidconfEnv&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DFBC2CE3897DD6F63B017E7C8DFB590A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_disconnect.jsp line 186 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_disconnect.jsp</FileName>
<FilePath>webapp/fallout_disconnect.jsp</FilePath>
<LineStart>186</LineStart>
<Snippet>&lt;jsp:include page=&quot;/fallout_release_include.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_disconnect_detail.do&quot; method=&quot;post&quot; target=&quot;conflictDisconnectBox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5F0DD3D27BD3E609BD04DA5F469D1485">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppg_Fallout_referto_include.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppg_Fallout_referto_include.jsp</FileName>
<FilePath>webapp/ssppg_Fallout_referto_include.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/ssppgFallout.do&quot;&gt;
	&lt;html:hidden property=&quot;requestReferTo&quot; value=&quot;&quot; /&gt;
	&lt;html:hidden property=&quot;viewTab&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A8FFB33F37E74CBBF7B6F0A6AFE70872">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at billDueDate.jsp line 31 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>billDueDate.jsp</FileName>
<FilePath>webapp/billDueDate.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/billDueDate&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D89993819D6A47FA5800B2EDA4765DEA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fco_view_westQueuePage.jsp line 460 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fco_view_westQueuePage.jsp</FileName>
<FilePath>webapp/fco_view_westQueuePage.jsp</FilePath>
<LineStart>460</LineStart>
<Snippet>      &lt;/html:form&gt;
      &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05254300CDF33D4AE44DD4EC85013D28">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at status_email.jsp line 17 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>status_email.jsp</FileName>
<FilePath>webapp/status_email.jsp</FilePath>
<LineStart>17</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/status_email.do&quot; target=&quot;searchbox&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8CD341DAF1807BC6F3769459EF9C5E49">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at UCSRParentChildLookup.jsp line 52 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UCSRParentChildLookup.jsp</FileName>
<FilePath>webapp/businessTools/tools/UCSRParentChildLookup.jsp</FilePath>
<LineStart>52</LineStart>
<Snippet>&lt;/head&gt;
&lt;body&gt;
	&lt;s:form method=&quot;post&quot; name=&quot;UCSRParentChildLookupForm&quot;&gt;
		&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;
			cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 198 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>198</LineStart>
<Snippet>    if( mapId != null &amp;&amp; mapId.equals(&quot;8&quot;) ) {
  %&gt;
    &lt;form action=&quot;hbi_resubmit.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
  &lt;%
  }</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7BC78C382A3717C651129743C485CF79">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at dmtAdmSrchVzFnLnPage.jsp line 77 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>dmtAdmSrchVzFnLnPage.jsp</FileName>
<FilePath>webapp/dmtAdmSrchVzFnLnPage.jsp</FilePath>
<LineStart>77</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/dmtAccessRightsTool.do&quot; target=&quot;searchbox&quot;&gt;
&lt;table width=&quot;750&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="35FF8BEEB9F66739AE390580BC1835C6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvVodPurchases.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvVodPurchases.jsp</FileName>
<FilePath>webapp/ppvVodPurchases.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>                        &lt;!--Basic Search Starts Here--&gt;
                       &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
					   &lt;html:form action=&quot;/ppvPurchases.do&quot; method=&quot;post&quot;&gt;
					   &lt;html:hidden property=&quot;isVod&quot; value=&quot;vod&quot;/&gt;
                          &lt;div class=&quot;st_searchcomp&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FECA9F8FBD2C896A14F929F5936F90F5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ioccFallout.jsp line 117 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ioccFallout.jsp</FileName>
<FilePath>webapp/businessTools/tools/ioccFallout.jsp</FilePath>
<LineStart>117</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;ioccFalloutForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;buttonValue&quot; value=&quot;&quot; /&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A9437034C8FECCED238CCF525481A3EE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at editNotesCancel.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>editNotesCancel.jsp</FileName>
<FilePath>webapp/editNotesCancel.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>    &lt;table width=&quot;740&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
     &lt;tr&gt;
       &lt;td&gt;&lt;form name=&quot;EditForm&quot; method=&quot;post&quot;&gt;
        &lt;table width=&quot;740&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
         &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="84DCD11BE0143D4BBCBCEAA22027A3CF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_L2Accept.jsp line 280 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_L2Accept.jsp</FileName>
<FilePath>webapp/pop_L2Accept.jsp</FilePath>
<LineStart>280</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="899A91E9EC57FD67E344798F956F3D10">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at xmlPosting.jsp line 29 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>xmlPosting.jsp</FileName>
<FilePath>webapp/systemtools/ittools/xmlPosting.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>

&lt;s:form  method=&quot;post&quot;&gt;
     &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1097D5541DF621770E7DADEC7E6E8A61">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massupload.jsp line 37 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massupload.jsp</FileName>
<FilePath>webapp/massupload.jsp</FilePath>
<LineStart>37</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massupload.do&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69A05B99DC7BAE7604565D1203CC4DAF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_bbe_queue.jsp line 546 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_bbe_queue.jsp</FileName>
<FilePath>webapp/supervisor_bbe_queue.jsp</FilePath>
<LineStart>546</LineStart>
<Snippet>    &lt;/html:form&gt; 
    
    &lt;html:form action=&quot;/elements.do&quot; method=&quot;post&quot;&gt;
      &lt;html:hidden property=&quot;ELEMENT_ORDERID&quot;/&gt;
      &lt;html:hidden property=&quot;ELEMENT_ELEMENTID&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D1574B0799BB54FC78A2CEBC54E22CF8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at portout_new_page.jsp line 83 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>portout_new_page.jsp</FileName>
<FilePath>webapp/portout_new_page.jsp</FilePath>
<LineStart>83</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;

&lt;html:form action=&quot;/portcancel.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;notes&quot;/&gt;
&lt;html:hidden property=&quot;pieId&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="040A94FC8505B729AC19A37D498E1A92">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at placeAccountFinalize.jsp line 70 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>placeAccountFinalize.jsp</FileName>
<FilePath>webapp/placeAccountFinalize.jsp</FilePath>
<LineStart>70</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;html:form action=&quot;/accountFinalize.do&quot; method=&quot;post&quot; target=&quot;placeAccountFinalize&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6C431B7AC675D6CBCC727072CCDC5EF2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at source_route.jsp line 25 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>source_route.jsp</FileName>
<FilePath>webapp/source_route.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;windowRedirect()&quot;&gt;
&lt;logic:equal name=&quot;sourceRoute&quot; value=&quot;AGENTWORK&quot;&gt;
  &lt;form method=&quot;post&quot; action=&quot;queue.do&quot; target=&quot;&lt;bean:write name=&quot;target&quot;/&gt;&quot;&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;queueType&quot; value=&quot;agentwork&quot;&gt;
  &lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B01B35B72FCE192BECCAA1150FA33CA0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at placeAccountFinalizeTool.jsp line 180 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>placeAccountFinalizeTool.jsp</FileName>
<FilePath>webapp/placeAccountFinalizeTool.jsp</FilePath>
<LineStart>180</LineStart>
<Snippet>		&lt;td width='20%' class=&quot;coabigfont&quot; align='left'&gt;&lt;strong&gt;SSP ACCT ID&lt;/strong&gt;&lt;/td&gt;
		
		&lt;form name=&quot;AcctForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;accountId&quot; value=&quot;&quot; /&gt;
		&lt;td class=&quot;coabigfont&quot; align='left' width='25%'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385266">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1531 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1531</LineStart>
<Snippet>
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="31B880826A6EDB6F889E592DFB318668">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Testing_Main.jsp line 64 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Testing_Main.jsp</FileName>
<FilePath>webapp/Testing_Main.jsp</FilePath>
<LineStart>64</LineStart>
<Snippet>&lt;/head&gt;
&lt;body style=&quot; margin:0; font-size:0.9em; line-height:20px; font-family: 'Myriad Pro', 'Trebuchet MS', Arial;  background-color:#EEEFF7;&quot;&gt;
&lt;form name=&quot;testingToolForm&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidgroup&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidord&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B1D4518D3F0FE3524277342A499C9B0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_usage_queue.jsp line 541 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_usage_queue.jsp</FileName>
<FilePath>webapp/supervisor_usage_queue.jsp</FilePath>
<LineStart>541</LineStart>
<Snippet>    &lt;/html:form&gt;
    
    &lt;html:form action=&quot;/trqueueedit.do&quot; method=&quot;post&quot;&gt;
          &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
          &lt;html:hidden property=&quot;TRUCKROLL_REQUESTTYPE&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="84AFB40416A6D90F0325F680F60A14C6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_dtv.jsp line 292 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_dtv.jsp</FileName>
<FilePath>webapp/view_dtv.jsp</FilePath>
<LineStart>292</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95E60B967207D28A9619C8AB14051B99">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_agentdetails.jsp line 94 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_agentdetails.jsp</FileName>
<FilePath>webapp/admin_agentdetails.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>&lt;/script&gt;

&lt;form id=&quot;agentdetailsform&quot; action=&quot;/sspflow/usermanagement.do&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;agentVzId&quot; value=&quot;&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;reqVzId&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="89E3B08C83962899431B7B37780CA673">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at PromoManagementTool.jsp line 288 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PromoManagementTool.jsp</FileName>
<FilePath>webapp/PromoManagementTool.jsp</FilePath>
<LineStart>288</LineStart>
<Snippet>
    &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0CE6E7065B616EC62B499CCB49D564BA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrectionVer1.jsp line 35 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrectionVer1.jsp</FileName>
<FilePath>webapp/sspV5ProfileCorrectionVer1.jsp</FilePath>
<LineStart>35</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;SSPV5ProfileCorrectionForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;
	cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5309C0156E898AA334FB14F63403CFC5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massDisconnect.jsp line 80 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massDisconnect.jsp</FileName>
<FilePath>webapp/massDisconnect.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>              
              &lt;!--Search Table Starts Here--&gt;
			  &lt;html:form action=&quot;/massDisconnect.do&quot; method=&quot;post&quot; id=&quot;search&quot; onsubmit=&quot;this.searchButton.disabled=true;&quot;&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
                &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="970F203CFEDD0E58ACDBD9FB82E8AACE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmgqueue.jsp line 192 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmgqueue.jsp</FileName>
<FilePath>webapp/wmgqueue.jsp</FilePath>
<LineStart>192</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form action=&quot;/wmgsearch.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;refId&quot;/&gt;
  &lt;html:hidden property=&quot;id&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 300 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>300</LineStart>
<Snippet>	 ||Constants.MSV_MAP_ID.equals(mapId)||Constants.MOG_MAP_ID.equals(mapId) )) {
  %&gt;
       &lt;form action=&quot;fallout_cmp.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8CB6B278C5BAD68CCCA0F62C9FD702C9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_hbi_coa.jsp line 110 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_hbi_coa.jsp</FileName>
<FilePath>webapp/fallout_hbi_coa.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>            &lt;tr&gt;
            &lt;td colspan=&quot;2&quot;&gt;
                &lt;html:form action=&quot;&lt;%=forwardPage%&gt;&quot; method=&quot;post&quot; &gt;
                &lt;div id=&quot;menu1&quot; style=&quot;display:none;&quot;&gt; 
                &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000000&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="2335EF74-F5C5-4BE1-89B6-707D1B78D6B3" iid="5CA78E212D9458BFE4D740B6096DA542">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The HTTP request at RedirectExReport.jsp line 19 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RedirectExReport.jsp</FileName>
<FilePath>webapp/RedirectExReport.jsp</FilePath>
<LineStart>19</LineStart>
<Snippet>	function init(){
		document.forms[0].action = document.forms[0].hurl.value;
		document.forms[0].method=&quot;post&quot;;
		//alert('document.forms[0].action --&gt; ' +document.forms[0].action);
		document.forms[0].submit();	</Snippet>
<TargetFunction>AssignmentStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7D9DA2C87ABDF7A0C1CEEEA7FC947DE4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at winback_release_manage.jsp line 217 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>winback_release_manage.jsp</FileName>
<FilePath>webapp/winback_release_manage.jsp</FilePath>
<LineStart>217</LineStart>
<Snippet>		&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
		&lt;td width=&quot;100%&quot;&gt;
		&lt;html:form focus=&quot;orderIds&quot; action=&quot;/winback_release.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot; target=&quot;searchbox&quot;&gt;  
		&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
			&lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95E60B967207D28A9619C8AB14051B9A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_agentdetails.jsp line 241 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_agentdetails.jsp</FileName>
<FilePath>webapp/admin_agentdetails.jsp</FilePath>
<LineStart>241</LineStart>
<Snippet>		&lt;/table&gt;	

&lt;form&gt;
&lt;/body&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2CC3CEBD67DBF3DCCCD27C432FC91636">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at seamless_overdue_order_report.jsp line 175 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>seamless_overdue_order_report.jsp</FileName>
<FilePath>webapp/seamless_overdue_order_report.jsp</FilePath>
<LineStart>175</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7DA8A664CCC56F161CCEA41F6E26D969">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_reports_queue.jsp line 105 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_reports_queue.jsp</FileName>
<FilePath>webapp/wmg_reports_queue.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgRptByQueue.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;html:hidden property=&quot;reqType&quot;/&gt;
&lt;html:hidden property=&quot;queryType&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A70BF9D908BA4513A73F63047390E2CA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVPopRouteFailure.jsp line 111 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVPopRouteFailure.jsp</FileName>
<FilePath>webapp/OVPopRouteFailure.jsp</FilePath>
<LineStart>111</LineStart>
<Snippet>&lt;iframe name=&quot;scriptbox&quot; id=&quot;scriptbox&quot; src=&quot;OVLoadHarmony.jsp&quot;  width=&quot;100%&quot; height=&quot;20&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;form name=&quot;OVOVHbiDetailForm&quot; action=&quot;ovfallout_hbi_detail.do?harmony&quot; method=&quot;post&quot; target=&quot;falloutbox1&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EB1F7412368F1BCD898AAC2B832CABD0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusSupervisor.jsp line 161 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusSupervisor.jsp</FileName>
<FilePath>webapp/statusSupervisor.jsp</FilePath>
<LineStart>161</LineStart>
<Snippet>        &lt;tr&gt; 
          &lt;td class=&quot;background4&quot;&gt; 
		&lt;html:form method=&quot;post&quot; action=&quot;/statussupervisor.do&quot; target=&quot;searchbox&quot;&gt;                  
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;119&quot;&gt;
              &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A05384B6E183E413C72E9C72DD4E653D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at genericSearchDMT.jsp line 213 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>genericSearchDMT.jsp</FileName>
<FilePath>webapp/genericSearchDMT.jsp</FilePath>
<LineStart>213</LineStart>
<Snippet>

&lt;html:form method=&quot;post&quot; action=&quot;/dmtgenericsearch&quot; target=&quot;searchbox&quot;&gt;
	&lt;tr&gt;
		&lt;td colspan=&quot;2&quot; width=&quot;20%&quot; bgcolor=&quot;#99EFFF&quot; class=&quot;background1&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 208 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>208</LineStart>
<Snippet>  else if ( mapId != null &amp;&amp; mapId.equals(&quot;11&quot;) ) {
  %&gt;
    &lt;form action=&quot;fallout_pp_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
    &lt;input type=hidden name=&quot;requestType&quot; value=&quot;lqcsrrequestsubmited&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="825CCBC116EB78A294A88E39A85B411F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Monitor.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Monitor.jsp</FileName>
<FilePath>webapp/Monitor.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>&lt;CENTER&gt;

&lt;form action=&quot;/sspflow/monitorWorkFlowConsole.do&quot; method=&quot;post&quot; name=&quot;reporter&quot;&gt;
&lt;HR&gt;
Enter the Order ID:        </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="58532413C27574122089E02FAE6B959B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at activityXml.jsp line 138 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>activityXml.jsp</FileName>
<FilePath>webapp/businessTools/tools/activityXml.jsp</FilePath>
<LineStart>138</LineStart>
<Snippet>	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;
&lt;s:form name=&quot;ioccIspSearchForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;table class=&quot;st_head_bg2_sub&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;100%&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A60D26014305927AED71311447076BE4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutPPDesc.jsp line 145 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutPPDesc.jsp</FileName>
<FilePath>webapp/OVFalloutPPDesc.jsp</FilePath>
<LineStart>145</LineStart>
<Snippet>        &lt;/table&gt;
&lt;jsp:include page=&quot;/ssppg_Fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/ovfallout_pp_detail.do&quot; method=&quot;post&quot; target=&quot;pp_correction&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;lqcsrrequestsubmited&quot;/&gt;
  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="512E2F140C6C9C2C7983BB01B14D3BD7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at holdempty.jsp line 332 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>holdempty.jsp</FileName>
<FilePath>webapp/holdempty.jsp</FilePath>
<LineStart>332</LineStart>
<Snippet>
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/bill_correction.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2BE211E37DD72B9E9BC2FE9C59982C66">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at hbil3.jsp line 62 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>hbil3.jsp</FileName>
<FilePath>webapp/hbil3.jsp</FilePath>
<LineStart>62</LineStart>
<Snippet>&lt;tr&gt;

	&lt;form name=&quot;retrieve&quot; action=&quot;/sspflow/hbil3.do&quot; target=&quot;l3box&quot; method=&quot;post&quot;&gt;
	&lt;tr&gt;
		&lt;td colspan=&quot;2&quot; width=&quot;20%&quot; bgcolor=&quot;#99EFFF&quot; class=&quot;background1&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="80E7D4550363E8DF7896C7968D5B6AE8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addwdfalloutmgt.jsp line 149 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addwdfalloutmgt.jsp</FileName>
<FilePath>webapp/addwdfalloutmgt.jsp</FilePath>
<LineStart>149</LineStart>
<Snippet>&lt;/form&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/wdfalloutmgt.do&quot;&gt;
	&lt;html:hidden property=&quot;mapId&quot;/&gt;
	&lt;html:hidden property=&quot;falloutCode&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EEDFE62A8C0154E05A3AA05A6D5F4986">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vasip_release_manage.jsp line 191 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vasip_release_manage.jsp</FileName>
<FilePath>webapp/vasip_release_manage.jsp</FilePath>
<LineStart>191</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;100%&quot; &gt;
	&lt;html:form focus=&quot;orderIds&quot; action=&quot;/vasip_release.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9EC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 247 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>247</LineStart>
<Snippet>  else if (mapId.equals(Constants.REMEDY_MAP_ID)) {
  %&gt;
       &lt;form action=&quot;fallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F2CB316E6349925620EB3B8E62757AE1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at dataManagementResult.jsp line 43 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>dataManagementResult.jsp</FileName>
<FilePath>webapp/dataManagementResult.jsp</FilePath>
<LineStart>43</LineStart>
<Snippet>	&lt;/tr&gt;
	&lt;tr&gt;
        &lt;html:form method=&quot;post&quot; action=&quot;/dataManagementTool.do&quot;&gt;
        &lt;td align=&quot;center&quot;&gt;
		</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA028268497110">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 1589 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>1589</LineStart>
<Snippet>
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6A387710AC8B4AC15DABEB259ABB803E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeUsageView.jsp line 145 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeUsageView.jsp</FileName>
<FilePath>webapp/bbeUsageView.jsp</FilePath>
<LineStart>145</LineStart>
<Snippet>				&lt;!-- To Show Content Type Starts --&gt;
				&lt;td valign=&quot;top&quot;&gt;
				&lt;html:form  action=&quot;/usageOrderSearch.do&quot; method=&quot;post&quot;&gt;
				&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
					&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F03E77FF7C9E0A6D1B595967CD5F1E7B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caoffernotes.jsp line 80 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caoffernotes.jsp</FileName>
<FilePath>webapp/caoffernotes.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>&lt;bean:define id=&quot;pieIdBean&quot; value=&quot;null&quot;/&gt;&lt;%}else{%&gt;
&lt;bean:define id=&quot;pieIdBean&quot; value=&quot;&lt;%=pieId%&gt;&quot;/&gt;&lt;%}%&gt;
&lt;html:form action=&quot;/caofferaddnotes.do?VIEW_TAB=NOTESTAB&quot; method=&quot;post&quot; focus=&quot;textarea_note&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E3D9E6FEB79558C067033057979110CF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massRefresh.jsp line 78 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massRefresh.jsp</FileName>
<FilePath>webapp/massRefresh.jsp</FilePath>
<LineStart>78</LineStart>
<Snippet>              
              &lt;!--Search Table Starts Here--&gt;
			  &lt;html:form action=&quot;/massRefresh.do&quot; method=&quot;post&quot; id=&quot;search&quot; onsubmit=&quot;this.searchButton.disabled=true;&quot;&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
                &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C6355A481A64F541FEBDEDB0339863FB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at onebill_vzw_fallout.jsp line 153 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>onebill_vzw_fallout.jsp</FileName>
<FilePath>webapp/onebill_vzw_fallout.jsp</FilePath>
<LineStart>153</LineStart>
<Snippet>&lt;/head&gt;
&lt;body onLoad=&quot;hideAll()&quot;&gt;
&lt;html:form action=&quot;/fallout_vzw.do&quot; method=&quot;post&quot;&gt; 
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt; 
&lt;jsp:include page=&quot;/fallout_release_include.jsp&quot;/&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="08975B470252CA94F40248AE9E1CD8D6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at getISPUserId.jsp line 48 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>getISPUserId.jsp</FileName>
<FilePath>webapp/businessTools/tools/getISPUserId.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;provGetUserIDForm&quot; method=&quot;post&quot; theme=&quot;simple&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;statusType&quot; value=&quot;&quot; /&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7AF65569280F3C71764123EA3B0E2037">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fiosVoiceBundleHistory.jsp line 173 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fiosVoiceBundleHistory.jsp</FileName>
<FilePath>webapp/fiosVoiceBundleHistory.jsp</FilePath>
<LineStart>173</LineStart>
<Snippet>														&lt;/tr&gt;
													&lt;/table&gt;
													&lt;form name=&quot;ShowSSPHistoryForm&quot; method=&quot;post&quot; target=&quot;showSSPHistory&quot;&gt;
													&lt;input type=&quot;hidden&quot; name=&quot;orderID&quot; value=&quot;&quot; /&gt;
													&lt;input type=&quot;hidden&quot; name=&quot;input&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="63A1B75EAA52E9A8365192EE463D85CD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppv_block_unblock.jsp line 49 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppv_block_unblock.jsp</FileName>
<FilePath>webapp/ppv_block_unblock.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;

&lt;html:form action=&quot;/sdmpRestore&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;operation&quot;/&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C786321BE85CBBE7F951A04DE99D7154">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at add_correction.jsp line 1469 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>add_correction.jsp</FileName>
<FilePath>webapp/add_correction.jsp</FilePath>
<LineStart>1469</LineStart>
<Snippet>&lt;!-- Sanjay Murugesan's Code starts here --&gt;
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C5695671694AC0AA105DB127C1BEB865">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at andreiLogs.jsp line 267 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>andreiLogs.jsp</FileName>
<FilePath>webapp/andreiLogs.jsp</FilePath>
<LineStart>267</LineStart>
<Snippet>&lt;!-- /hidden fields --&gt;
&lt;/form&gt;
&lt;form id=&quot;backButtonForm&quot; name=&quot;backButtonForm&quot; method=&quot;post&quot; action=&quot;adapterSearch.do?FROM_BACK=TRUE&quot; &gt;
&lt;/form&gt;
  &lt;script for=&quot;document&quot; event=&quot;onclick()&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4C65555AAED759D5D2BA52E03BECD2A7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_remedy.jsp line 310 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_remedy.jsp</FileName>
<FilePath>webapp/view_remedy.jsp</FilePath>
<LineStart>310</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9D2A9CB6B1BEA1618D1BF4D522E829DF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutDisconnectReflow.jsp line 111 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutDisconnectReflow.jsp</FileName>
<FilePath>webapp/OVFalloutDisconnectReflow.jsp</FilePath>
<LineStart>111</LineStart>
<Snippet>    &lt;/script&gt;
	&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
	&lt;html:form action=&quot;/ovfallout_disconnect_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
		&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
		  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA8490F45733C153F2F242670AF82875">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vadiwest_correct.jsp line 60 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vadiwest_correct.jsp</FileName>
<FilePath>webapp/fallout_vadiwest_correct.jsp</FilePath>
<LineStart>60</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;

&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A54DE281C7EC41C1AA1E70E581CDF263">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_ob_sup_lec.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_ob_sup_lec.jsp</FileName>
<FilePath>webapp/filter_ob_sup_lec.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5A9E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 574 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>574</LineStart>
<Snippet>                            &lt;!-- &lt;VDSI:1281:BTN_Hyperlink_Search:Z919003:29072008:START&gt; --&gt;
							&lt;td valign=&quot;top&quot;&gt;
							 &lt;form name=&quot;billingTelForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;billingTN&quot; value=&quot;&quot;/&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA02826849710F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 1573 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>1573</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F5CBEAE0664C0F5FDEE831EBEB0C611E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_z2p.jsp line 17 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_z2p.jsp</FileName>
<FilePath>webapp/filter_z2p.jsp</FilePath>
<LineStart>17</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="733454839C58A9C73E61CC6FDC5ECF19">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restoreaccount.jsp line 97 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restoreaccount.jsp</FileName>
<FilePath>webapp/restoreaccount.jsp</FilePath>
<LineStart>97</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;html:form action=&quot;/restoreaccount.do&quot; method=&quot;post&quot; target=&quot;restoreaccount&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="90DC6F6C169A741C38E2C2BBA15A1D2A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at broadbandGuiSearchOrder.jsp line 212 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>broadbandGuiSearchOrder.jsp</FileName>
<FilePath>webapp/businessTools/tools/broadbandGuiSearchOrder.jsp</FilePath>
<LineStart>212</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
              &lt;s:form name=&quot;BroadbandGuiSearchOrderForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
              &lt;!--Search Table Starts Here--&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E354601C379ADB2D4AD7061CF5AB103A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at icareNotes.jsp line 374 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>icareNotes.jsp</FileName>
<FilePath>webapp/icareNotes.jsp</FilePath>
<LineStart>374</LineStart>
<Snippet>		&lt;html:form action=&quot;/sourceroute.do&quot; method=&quot;post&quot;&gt;
        &lt;/html:form&gt;
        &lt;html:form action=&quot;/IcareOrderUpdate.do&quot; method=&quot;post&quot;&gt;
		   &lt;html:hidden property=&quot;orderId&quot; value=&quot;&lt;%=orderId%&gt;&quot;/&gt;
           &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&lt;%=elementId%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4837EADA327C2EAE9818BD1086ED6649">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeOrderViewForFallout.jsp line 55 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeOrderViewForFallout.jsp</FileName>
<FilePath>webapp/bbeOrderViewForFallout.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>    &lt;td valign=&quot;top&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; id=&quot;table1&quot;&gt;
      &lt;tr&gt;
	  &lt;form name=&quot;MONForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;cogOrderId&quot; value=&quot;&quot;/&gt;
        &lt;td class=&quot;nmfheadbg&quot;&gt;&amp;nbsp;&amp;nbsp;Order ID: &lt;bean:write name=&quot;BBEServiceDetails&quot; property=&quot;orderId&quot; /&gt;	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="43EEC6736A3DAABFBAA685ECCD8044D3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at home.jsp line 478 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>home.jsp</FileName>
<FilePath>webapp/home.jsp</FilePath>
<LineStart>478</LineStart>
<Snippet>                            &lt;td width = &quot;499&quot; valign=&quot;top&quot;&gt;

                &lt;html:form focus=&quot;orderId&quot; action=&quot;/search.do&quot; method=&quot;post&quot;&gt;
                              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;3&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#FFFFFF&quot;&gt;
                                &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2EEC87B46B4DA49467677D9B296477DC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massCancelFileUpload.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massCancelFileUpload.jsp</FileName>
<FilePath>webapp/massCancelFileUpload.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massCancelFileUpload&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="58532413C27574122089E02FAE6B959A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at activityXml.jsp line 135 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>activityXml.jsp</FileName>
<FilePath>webapp/businessTools/tools/activityXml.jsp</FilePath>
<LineStart>135</LineStart>
<Snippet>&lt;iframe id=&quot;iframeDetailMsg&quot; name=&quot;iframeDetailMsg&quot; src=&quot;iframeLoading.html&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; frameborder=&quot;0&quot; scrolling=&quot;auto&quot; roresize style=&quot;height:500px; border:1px solid #336699; width:700px; position:absolute; z-index=10000; display:none;&quot;&gt;&lt;/iframe&gt;

&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385264">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1495 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1495</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 08/07 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2C291EE47C6B2DAB6EA11020FAF519FF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at hoaDisconnectResult.jsp line 81 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>hoaDisconnectResult.jsp</FileName>
<FilePath>webapp/hoaDisconnectResult.jsp</FilePath>
<LineStart>81</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/restoreaccount.do&quot; method=&quot;post&quot; target=&quot;restoreaccount&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3FC7C010560D704ADBDE584676A8FD60">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at getClonePage.jsp line 64 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>getClonePage.jsp</FileName>
<FilePath>webapp/getClonePage.jsp</FilePath>
<LineStart>64</LineStart>
<Snippet>	&lt;/script&gt;
	&lt;body&gt;
	&lt;form name=&quot;cloneForm&quot; method=&quot;post&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;hidGrpId&quot; value=&quot;&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;hidTstCsNam&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A599B2BADA41CD599DDD7B4AF3D72A4C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at adptStubMappingHeader.jsp line 42 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>adptStubMappingHeader.jsp</FileName>
<FilePath>webapp/businessTools/tools/adptStubMappingHeader.jsp</FilePath>
<LineStart>42</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69A05B99DC7BAE7604565D1203CC4DAE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_bbe_queue.jsp line 541 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_bbe_queue.jsp</FileName>
<FilePath>webapp/supervisor_bbe_queue.jsp</FilePath>
<LineStart>541</LineStart>
<Snippet>    &lt;/html:form&gt;
    
    &lt;html:form action=&quot;/trqueueedit.do&quot; method=&quot;post&quot;&gt;
          &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
          &lt;html:hidden property=&quot;TRUCKROLL_REQUESTTYPE&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="484E05A842204AB646EAB7EE68B59E7A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_queue.jsp line 238 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_queue.jsp</FileName>
<FilePath>webapp/supervisor_queue.jsp</FilePath>
<LineStart>238</LineStart>
<Snippet>                  &lt;tr&gt;
                    &lt;td class=&quot;background3&quot;&gt;
                      &lt;form name=&quot;FilterForm&quot;&gt;
                      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; class=&quot;background2&quot;&gt;
                        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AE7B9F78265E2DEF42460EA3E604E014">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restoreresult.jsp line 96 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restoreresult.jsp</FileName>
<FilePath>webapp/restoreresult.jsp</FilePath>
<LineStart>96</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;html:form action=&quot;/restoreaccount.do&quot; method=&quot;post&quot; target=&quot;restoreaccount&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
    &lt;table width=&quot;740&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CF1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1756 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1756</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="98E7A2398A961E893703944E3445C7EE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_cmg_queuepage.jsp line 4 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_cmg_queuepage.jsp</FileName>
<FilePath>webapp/filter_cmg_queuepage.jsp</FilePath>
<LineStart>4</LineStart>
<Snippet>&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot; src=&quot;javascript/flowclient.js&quot;&gt;&lt;/script&gt; 
&lt;html&gt;
&lt;form id=&quot;filterForm&quot;&gt; 

&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table3&quot; bgcolor=&quot;#bfbfbf&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 203 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>203</LineStart>
<Snippet>    else if(mapId != null &amp;&amp; mapId.equals(&quot;17&quot;)) {
  %&gt;
    &lt;form action=&quot;vadiwest_resubmit.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
  &lt;%
  }</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="558D46CECBBE74305C3049C2DD2999F3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at myreminder_count.jsp line 133 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>myreminder_count.jsp</FileName>
<FilePath>webapp/myreminder_count.jsp</FilePath>
<LineStart>133</LineStart>
<Snippet>&lt;/form&gt;

&lt;html:form action=&quot;/queue.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;mapId&quot;/&gt;
  &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;1&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E97333C38C2CD3AE0DD01DD4B97303E3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at headerinfo_fax2.jsp line 59 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>headerinfo_fax2.jsp</FileName>
<FilePath>webapp/headerinfo_fax2.jsp</FilePath>
<LineStart>59</LineStart>
<Snippet>&lt;html:hidden property=&quot;pieId&quot; value=&quot;&lt;%= pieId %&gt;&quot;/&gt;
&lt;/html:form&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/sendemail.do&quot; target=&quot;_parent&quot;&gt;
	&lt;html:hidden property=&quot;isPendingTermForm&quot;/&gt;
	&lt;html:hidden property=&quot;userEffectiveBillDate&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="15C5BADB679D9DF27E912F48CEB21DAA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeManualQueueAdmin.jsp line 120 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeManualQueueAdmin.jsp</FileName>
<FilePath>webapp/routeManualQueueAdmin.jsp</FilePath>
<LineStart>120</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;740&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/routeManualManagement.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="055FAA7ECD8FC6D05F0182B433785ACB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiAdminUnlockBan.jsp line 28 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiAdminUnlockBan.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiAdminUnlockBan.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;banGuiAdminUnlockBan&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

 &lt;table border=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="484E05A842204AB646EAB7EE68B59E7C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_queue.jsp line 540 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_queue.jsp</FileName>
<FilePath>webapp/supervisor_queue.jsp</FilePath>
<LineStart>540</LineStart>
<Snippet>    &lt;/html:form&gt;
    
    &lt;html:form action=&quot;/trqueueedit.do&quot; method=&quot;post&quot;&gt;
          &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
          &lt;html:hidden property=&quot;TRUCKROLL_REQUESTTYPE&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1C906424A62DB8ED840B4C80F702999F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_Cashcard.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_Cashcard.jsp</FileName>
<FilePath>webapp/filter_Cashcard.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap cashcard::&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9F0D570060A7C200D846DA1E3249CAA2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at cancelXMLNewISD.jsp line 99 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>cancelXMLNewISD.jsp</FileName>
<FilePath>webapp/cancelXMLNewISD.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>	%&gt;
		
		&lt;form name=&quot;frmPbl&quot; action=&quot;cancelResultXML.jsp&quot; method=post target=&quot;ifrmXML&quot;&gt;
		&lt;% 
			Iterator ite = xmlStr.keySet().iterator();</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="78C15EECEAE7D2066D80FF6831C4DAAF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerReportsAging.jsp line 581 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerReportsAging.jsp</FileName>
<FilePath>webapp/analyzerReportsAging.jsp</FilePath>
<LineStart>581</LineStart>
<Snippet>
 &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="364859DCB04C15D2F22E21280A9BCF2C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changeFSRD_SSRD.jsp line 115 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changeFSRD_SSRD.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/changeFSRD_SSRD.jsp</FilePath>
<LineStart>115</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;changeFSRDSSRD&quot; name=&quot;ChangeFSRDSSRDFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="044566F573CA3375E84616E0DDF7B6C9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_admin_managecredit.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_admin_managecredit.jsp</FileName>
<FilePath>webapp/wmg_admin_managecredit.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgAdmin.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;requestType&quot;/&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050296">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2402 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2402</LineStart>
<Snippet> &lt;!-- VISION5 - R4 - Renuka- Ends --&gt;
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DB2F5679A5F1150F8425F98CB1E93D3E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at smartBillEmailContent.jsp line 31 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>smartBillEmailContent.jsp</FileName>
<FilePath>webapp/smartBillEmailContent.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>&lt;logic:present name=&quot;SmartBillEmailList&quot;&gt;
&lt;logic:iterate id=&quot;email&quot; name=&quot;SmartBillEmailList&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
          &lt;table width=&quot;99%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="00B83E50C6D86E875AB0FCD8F077A719">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbenotes.jsp line 83 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbenotes.jsp</FileName>
<FilePath>webapp/bbenotes.jsp</FilePath>
<LineStart>83</LineStart>
<Snippet>&lt;bean:define id=&quot;pieIdBean&quot; value=&quot;&lt;%=pieId%&gt;&quot;/&gt;&lt;%}%&gt;					

&lt;html:form action=&quot;/bbeaddnotes.do?VIEW_TAB=NOTESTAB&quot; method=&quot;post&quot; focus=&quot;textarea_note&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E4E668916E0F51776E2B6B563301E714">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at tree.jsp line 52 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>tree.jsp</FileName>
<FilePath>webapp/tree.jsp</FilePath>
<LineStart>52</LineStart>
<Snippet>    }
&lt;/script&gt;
&lt;html:form action=&quot;/queue.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;mapId&quot;/&gt;
  &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;1&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8864EE88EBD17666DE7CFDF4D0C2F12C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_route_success.jsp line 19 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_route_success.jsp</FileName>
<FilePath>webapp/pop_route_success.jsp</FilePath>
<LineStart>19</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;windowRedirect()&quot;&gt;

&lt;form name=&quot;QueueSelectForm&quot; method=&quot;post&quot; action=&quot;/queue.do&quot; target=&quot;_parent&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;mapId&quot; value=&quot;&lt;bean:write name=&quot;mapId&quot;/&gt;&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;mapVersion&quot; value=&quot;&lt;bean:write name=&quot;mapVersion&quot;/&gt;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A28CAB08E20FE9A67C20626A6E621F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateCustomerContact.jsp line 94 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateCustomerContact.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/updateCustomerContact.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;updateCustContact&quot; name=&quot;UpdateCustContactFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="91291DB2B5F8D8E5F78C35D2937EB6E2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at QbsManagementTool.jsp line 206 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>QbsManagementTool.jsp</FileName>
<FilePath>webapp/QbsManagementTool.jsp</FilePath>
<LineStart>206</LineStart>
<Snippet>
    &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="061524D245939C405E71D7B7A560EA11">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at troubleprofile.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>troubleprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/troubleprofile.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>	&lt;div class=&quot;panel serif&quot;&gt;
	&lt;s:if test='%{#request.equipmentProfileInfo.troubleTicketInfo != null &amp;&amp; #request.equipmentProfileInfo.troubleTicketInfo.size()&gt;0}'&gt;
	&lt;s:form action=&quot;EPUpdatetroubleTktInfo&quot; name=&quot;troubleTktInfoDisplayForm&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;TroubleInfoMap&quot; id=&quot;TroubleInfoMap&quot;/&gt;
		&lt;table&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 347 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>347</LineStart>
<Snippet>  &lt;%}else {
    %&gt;
      &lt;form action=&quot;vadiwest_resubmit.do&quot; method=&quot;post&quot;&gt;
	  &lt;input type=hidden name=&quot;rejectReason&quot; value=&quot;&quot;&gt;
    &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CF0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1737 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1737</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 08/07 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="39917DE99797C7F7299B7AE1D7E823CD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_ribs.jsp line 289 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_ribs.jsp</FileName>
<FilePath>webapp/fallout_ribs.jsp</FilePath>
<LineStart>289</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/ribs_correction.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3EA62BEBED9943C7C05E68D5F1E8A31C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Testing_delete_cases.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Testing_delete_cases.jsp</FileName>
<FilePath>webapp/Testing_delete_cases.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>%&gt;
&lt;body style=&quot; margin:0; font-size:0.9em; line-height:20px; font-family: 'Myriad Pro', 'Trebuchet MS', Arial;  background-color:#EEEFF7;&quot;&gt;
&lt;form name=&quot;configureTestCaseForm&quot; method=&quot;post&quot; target=&quot;tstCsDtlsFrm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidGrpId&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidTstCsId&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9EF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 270 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>270</LineStart>
<Snippet>  else  if(((Constants.BAAIS_MAP_ID).equals(mapId)) || ((Constants.UNITY_MAP_ID).equals(mapId)) || ((Constants.VADIARBOR_MAP_ID).equals(mapId))||((Constants.VALISTA_MAP_ID).equals(mapId)) || ((Constants.VOICE_MAP_ID).equals(mapId))) {
  %&gt;
        &lt;form action=&quot;fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
        &lt;html:hidden property=&quot;requestType&quot; value=&quot;correct&quot;/&gt;
        &lt;html:hidden property=&quot;requestAction&quot; value=&quot;correct:submit&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="491E75B83E6AC35B0192A08D5DB9CEF7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewOrderResponses.jsp line 81 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewOrderResponses.jsp</FileName>
<FilePath>webapp/viewOrderResponses.jsp</FilePath>
<LineStart>81</LineStart>
<Snippet>&lt;/head&gt;
&lt;body style=&quot;margin:0px; background-color:#E9F3FF;&quot;&gt;
&lt;html:form action=&quot;/orderDiagnosis.do&quot; method=&quot;post&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;table width=&quot;100%&quot; border=&quot;1&quot; align=&quot;left&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D45E901A19C66E574F59F78AFCC4436E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at BDV_lines_display.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BDV_lines_display.jsp</FileName>
<FilePath>webapp/BDV_lines_display.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	window.onload=resize_iframe;
&lt;/script&gt;
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;6&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA10">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 883 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>883</LineStart>
<Snippet>
&lt;!-- Ver 1.3 begins Unity West Manual Routing --&gt;
&lt;html:form name=&quot;RefertoForm&quot; type=&quot;com.verizon.ssp.flowclient.releaseorreferto.RefertoForm&quot; action=&quot;/refertoAction.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D68792697F7E33297C16BEFDB13512A2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_vis_fallouts.jsp line 211 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_vis_fallouts.jsp</FileName>
<FilePath>webapp/view_vis_fallouts.jsp</FilePath>
<LineStart>211</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_vis.jsp&quot;/&gt;
                  &lt;tr&gt;
				  &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6FA24461DC03901D0D92CDEFC37A4C70">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at profiledOrderManagementResult.jsp line 82 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>profiledOrderManagementResult.jsp</FileName>
<FilePath>webapp/profiledOrderManagementResult.jsp</FilePath>
<LineStart>82</LineStart>
<Snippet>	&lt;tr&gt;

        &lt;html:form method=&quot;post&quot; action=&quot;/profiledOrderManagementTool.do&quot;&gt;

        &lt;td align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EC39D274736A3FC83B0E963FD4A740DF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at lecprofile.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>lecprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/lecprofile.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>		&lt;/div&gt;		
		&lt;div id=&quot;container&quot;&gt;		
			&lt;form name=&quot;displayForm&quot; id=&quot;displayFormContainer&quot; class=&quot;displayForm&quot; action=&quot;LecProfileUpdate.action&quot; method=&quot;post&quot;&gt;
				&lt;textarea id=&quot;responseValueField&quot; name=&quot;textarea&quot;&gt;&lt;/textarea&gt;
				&lt;input type=&quot;hidden&quot; name=&quot;btn&quot; id=&quot;btn&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="581136C4038CDB294226D1477097E40B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ecrmemail.jsp line 131 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ecrmemail.jsp</FileName>
<FilePath>webapp/ecrmemail.jsp</FilePath>
<LineStart>131</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
    
	&lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
	&lt;%String pieId=request.getParameter(&quot;HISTORYEMAIL_HISTORY_PIEID&quot;);
	 String uowIdVal=request.getParameter(&quot;HISTORYEMAIL_UOWID&quot;);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3A04DD4DAA51FE4062FDDC2EE9131A5F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_ob_lec.jsp line 217 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_ob_lec.jsp</FileName>
<FilePath>webapp/view_ob_lec.jsp</FilePath>
<LineStart>217</LineStart>
<Snippet>                 &lt;% } %&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
                      &lt;table width=&quot;738&quot; border=&quot;0&quot; cellpadding=&quot;3&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#FFFFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="822D5F5E77EC47480E18EA00E3A5A031">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at onebill_fallout1.jsp line 187 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>onebill_fallout1.jsp</FileName>
<FilePath>webapp/onebill_fallout1.jsp</FilePath>
<LineStart>187</LineStart>
<Snippet>&lt;/head&gt;
&lt;body onLoad=&quot;hideAll()&quot;&gt;
&lt;html:form action=&quot;/fallout_lecprofile.do&quot; method=&quot;post&quot;&gt;

&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C5695671694AC0AA105DB127C1BEB864">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at andreiLogs.jsp line 262 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>andreiLogs.jsp</FileName>
<FilePath>webapp/andreiLogs.jsp</FilePath>
<LineStart>262</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;iframe id=&quot;iframeDetailMsg&quot; name=&quot;iframeDetailMsg&quot; src=&quot;iframeLoading.html&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; frameborder=&quot;0&quot; scrolling=&quot;auto&quot; roresize style=&quot;background-color: white; height:500px; border:1px solid #336699; width:800px; position:absolute; z-index=10000; display:none;&quot;&gt;&lt;/iframe&gt;
	&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
&lt;!-- hidden fields --&gt;
&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 247 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>247</LineStart>
<Snippet>  else  if(((Constants.BAAIS_MAP_ID).equals(mapId)) || ((Constants.UNITY_MAP_ID).equals(mapId)) || ((Constants.VADIARBOR_MAP_ID).equals(mapId))||((Constants.VALISTA_MAP_ID).equals(mapId)) || ((Constants.VOICE_MAP_ID).equals(mapId))){
  %&gt;
        &lt;form action=&quot;sspfallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot; &gt;
        &lt;html:hidden property=&quot;requestType&quot; value=&quot;correct&quot;/&gt;
        &lt;html:hidden property=&quot;requestAction&quot; value=&quot;correct:submit&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="60CE13E29F809D1C9068B0828AB58625">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutHbiConverttoHarmonyFailure.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutHbiConverttoHarmonyFailure.jsp</FileName>
<FilePath>webapp/OVFalloutHbiConverttoHarmonyFailure.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>&lt;/table&gt;

    &lt;html:form action=&quot;/ovfallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6537CDB0E463417B7C04AAD6EA84DBEE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bqtreport.jsp line 380 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bqtreport.jsp</FileName>
<FilePath>webapp/bqtreport.jsp</FilePath>
<LineStart>380</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;html:form action=&quot;/bqtReport.do&quot; method=&quot;post&quot; target=&quot;bqtreport&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="094E96BD2D0B2C93C5F9F661E85F09C4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerReportsOrders.jsp line 277 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerReportsOrders.jsp</FileName>
<FilePath>webapp/analyzerReportsOrders.jsp</FilePath>
<LineStart>277</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B43C7301F89F3AD99950D7EF1E8E438B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at product_details.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>product_details.jsp</FileName>
<FilePath>webapp/product_details.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	window.onload=resize_iframe;
&lt;/script&gt;
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;6&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F530435B55047B244D2E5CFFD16E06B1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at andreiVisionHeaders.jsp line 48 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>andreiVisionHeaders.jsp</FileName>
<FilePath>webapp/businessTools/tools/andreiVisionHeaders.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="47B174C0D7A03F326CFBCD2254ADA691">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changeAcctSvcContact.jsp line 219 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changeAcctSvcContact.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/changeAcctSvcContact.jsp</FilePath>
<LineStart>219</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;changeAcctSvcContact&quot; name=&quot;ChgAcctSvcContactFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4B4D760CB5A842F94F7E4696CD396896">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_vadiwest.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_vadiwest.jsp</FileName>
<FilePath>webapp/filter_vadiwest.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;
&lt;%String mapId = ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPID);%&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B0CF0133EA891150629CC1C25BA88A75">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ra_fallout_correction.jsp line 121 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ra_fallout_correction.jsp</FileName>
<FilePath>webapp/ra_fallout_correction.jsp</FilePath>
<LineStart>121</LineStart>
<Snippet>	&lt;/logic:present&gt;
      &lt;tr&gt;
	  &lt;html:form action=&quot;/ribs_correction.do&quot; method=&quot;post&quot;&gt;
	  &lt;html:hidden property=&quot;requestType&quot; value=&quot;correct&quot;/&gt;
	  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;update&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="770CF0EF61602BA1E129AE8889A49C9B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_ispprov.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_ispprov.jsp</FileName>
<FilePath>webapp/filter_ispprov.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EBAEEF32A812AE55D2FEFFA2BBC6FE24">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribsManagementResult.jsp line 81 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribsManagementResult.jsp</FileName>
<FilePath>webapp/ribsManagementResult.jsp</FilePath>
<LineStart>81</LineStart>
<Snippet>	&lt;tr&gt;

        &lt;html:form method=&quot;post&quot; action=&quot;/ribsShellManagementTool.do&quot;&gt;

        &lt;td align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="41F17260FD9FB934C71C4D52A2B51A49">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ivappAdxAddReflow.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ivappAdxAddReflow.jsp</FileName>
<FilePath>webapp/businessTools/tools/ivappAdxAddReflow.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form   name=&quot;ivappAdxReflowForm&quot; theme=&quot;simple&quot;&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;onLoad(false)&quot;&gt;
&lt;br&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CF8F188A99C8C744CBD842CDC67AA9D2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at messageCountReport.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>messageCountReport.jsp</FileName>
<FilePath>webapp/messageCountReport.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td style=&quot;padding:7px; background-color:#ffffff;&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/messageCountReport.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;100&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1C3EA6B71DAD0C3D1121323912340B05">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogGUIReset.jsp line 207 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogGUIReset.jsp</FileName>
<FilePath>webapp/mogGUIReset.jsp</FilePath>
<LineStart>207</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/mogGUIHeader.jsp&quot;/&gt;
&lt;html:form action=&quot;/mogReset.do&quot; method=&quot;post&quot;&gt;

&lt;table width=&quot;98%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E97333C38C2CD3AE0DD01DD4B97303E2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at headerinfo_fax2.jsp line 55 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>headerinfo_fax2.jsp</FileName>
<FilePath>webapp/headerinfo_fax2.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form action=&quot;/disqueuedetail.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;requestType&quot;/&gt;
&lt;html:hidden property=&quot;pieId&quot; value=&quot;&lt;%= pieId %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="240FB0455C306474529D100528D76C0B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at JSpell.jsp line 500 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSpell.jsp</FileName>
<FilePath>webapp/jspellhtml2k4/JSpell.jsp</FilePath>
<LineStart>500</LineStart>
<Snippet>&lt;/head&gt;
&lt;body bgcolor=&quot;#dddddd&quot;&gt;
&lt;form action=&quot;&quot; name=&quot;results&quot; method=&quot;POST&quot;&gt;
&lt;table width=&quot;100%&quot; height=&quot;100%&quot; cellspacing=0 cellpadding=0 border=&quot;0&quot;&gt;
	&lt;tr valign=middle&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E63667933D8CA6CC30507D20036967F9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at falloutStatus.jsp line 121 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>falloutStatus.jsp</FileName>
<FilePath>webapp/falloutStatus.jsp</FilePath>
<LineStart>121</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/falloutStat.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D438CCC2CB7F24F11647636B9E1957F5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_fios.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_fios.jsp</FileName>
<FilePath>webapp/filter_fios.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>&lt;/script&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot; class=&quot;background3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="91291DB2B5F8D8E5F78C35D2937EB6E1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at QbsManagementTool.jsp line 121 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>QbsManagementTool.jsp</FileName>
<FilePath>webapp/QbsManagementTool.jsp</FilePath>
<LineStart>121</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/qbsTool.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B8647B122429ABE626493E1A3707FA7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerAdminRole.jsp line 134 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerAdminRole.jsp</FileName>
<FilePath>webapp/analyzerAdminRole.jsp</FilePath>
<LineStart>134</LineStart>
<Snippet>										  &lt;tr&gt;

										  &lt;html:form action=&quot;/analyzeAdmin.do&quot; method=&quot;post&quot;&gt;
										   &lt;html:hidden property=&quot;saveToolIds&quot; value=&quot;&quot;/&gt;
											&lt;html:hidden property=&quot;deleteToolIds&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BED61CED3E2991C61AE2E1315E593A57">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_remedy.jsp line 11 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_remedy.jsp</FileName>
<FilePath>webapp/filter_remedy.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4C052B245C10333022CE1BEE6E01D0F1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerbundledetails.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerbundledetails.jsp</FileName>
<FilePath>webapp/analyzerbundledetails.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>&lt;body&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/getBundleDetails.do&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DFF0D36398FAA19E739DC223E2CFA916">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_disconnect.jsp line 317 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_disconnect.jsp</FileName>
<FilePath>webapp/order_view_disconnect.jsp</FilePath>
<LineStart>317</LineStart>
<Snippet>    &lt;/table&gt;
    &lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/disqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA0B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 666 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>666</LineStart>
<Snippet>&lt;/table&gt; 
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt; 
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt; 
&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt; 
&lt;html:hidden property=&quot;falloutCode&quot; value=&quot;&lt;%=erCode%&gt;&quot;/&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5E7AE32BE1166AF3C52DEDCB50C65D87">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at btnCorrection.jsp line 196 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>btnCorrection.jsp</FileName>
<FilePath>webapp/btnCorrection.jsp</FilePath>
<LineStart>196</LineStart>
<Snippet>    &lt;table width=&quot;90%&quot;&gt;
        &lt;tr&gt;
          &lt;td colspan=&quot;3&quot;&gt;&lt;FORM name=&quot;uploadFrm&quot; ENCTYPE='multipart/form-data' method='POST'  action=&quot;&quot; target=&quot;displayMsg&quot; &gt;

              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000099&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6E63339FFC8879C9331384A90B96E07C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_sdmp_correct.jsp line 416 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_sdmp_correct.jsp</FileName>
<FilePath>webapp/fallout_sdmp_correct.jsp</FilePath>
<LineStart>416</LineStart>
<Snippet>&lt;/HTML&gt;
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CCA854195F43B13680F68E5DF7AFA2AE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at postfirmsaletool.jsp line 36 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>postfirmsaletool.jsp</FileName>
<FilePath>webapp/postfirmsaletool.jsp</FilePath>
<LineStart>36</LineStart>
<Snippet>&lt;/logic:notPresent&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/postFirmSaleTool&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="59A519BBF5413B6C03FE8A89B5BBBDA6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusAgeReadOnlyUser.jsp line 149 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusAgeReadOnlyUser.jsp</FileName>
<FilePath>webapp/statusAgeReadOnlyUser.jsp</FilePath>
<LineStart>149</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/statusagereadonly.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0EEB7AD51BB6DCD4A260B1F3DECEEAEF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at email.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>email.jsp</FileName>
<FilePath>webapp/email.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>&lt;logic:present name=&quot;CUSTOMERNOTIFICATION&quot;&gt;
&lt;logic:iterate id=&quot;email&quot; name=&quot;CUSTOMERNOTIFICATION&quot;&gt;
         &lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
         &lt;input type=&quot;hidden&quot; name=&quot;HISTORYEMAIL_HISTORY_PIEID&quot; value=&quot;&lt;%=request.getParameter(&quot;HISTORYEMAIL_HISTORY_PIEID&quot;)%&gt;&quot;/&gt;
		 &lt;input type=&quot;hidden&quot; name=&quot;POF_UPDATE_FLAG&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="39B98DE13529ACA93A1E23A2E57FAD3A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgCustCommEmailContent.jsp line 75 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgCustCommEmailContent.jsp</FileName>
<FilePath>webapp/ssppgCustCommEmailContent.jsp</FilePath>
<LineStart>75</LineStart>
<Snippet>&lt;logic:present name=&quot;CUSTOMERNOTIFICATION&quot;&gt;
&lt;logic:iterate id=&quot;email&quot; name=&quot;CUSTOMERNOTIFICATION&quot;&gt;
         &lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
		 &lt;%String isCustComm=&quot;CUST_COMM&quot;;
		 request.setAttribute(&quot;CUST_COMM&quot;,isCustComm);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2AC0DFF5B497E6323344670713477375">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at adxDRulesHeaders.jsp line 54 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>adxDRulesHeaders.jsp</FileName>
<FilePath>webapp/businessTools/tools/adxDRulesHeaders.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="73B03EEEDCC21B9176C612511AC3F6CB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvFlexViewPurchases.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvFlexViewPurchases.jsp</FileName>
<FilePath>webapp/ppvFlexViewPurchases.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>                        &lt;!--Basic Search Starts Here--&gt;
                       &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
					   &lt;html:form action=&quot;/ppvPurchases.do&quot; method=&quot;post&quot;&gt;
					   &lt;html:hidden property=&quot;isVod&quot; value=&quot;flex&quot;/&gt;
                          &lt;div class=&quot;st_searchcomp&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B1B360A957B7744619853BB2922C69BF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutHbiConverttoHarmony.jsp line 41 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutHbiConverttoHarmony.jsp</FileName>
<FilePath>webapp/OVFalloutHbiConverttoHarmony.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;

	&lt;html:form  action=&quot;/ovfallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
    
    &lt;table width=&quot;700&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="514C11082FFA8797451448C51405D199">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeManualVendorQueue.jsp line 135 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeManualVendorQueue.jsp</FileName>
<FilePath>webapp/routeManualVendorQueue.jsp</FilePath>
<LineStart>135</LineStart>
<Snippet>    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
    
    &lt;html:form  method=&quot;post&quot; action=&quot;/vendorManualRoute.do&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="66CA2F9A1A971B14CF3C32A8A093305D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at historywrap.jsp line 159 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>historywrap.jsp</FileName>
<FilePath>webapp/historywrap.jsp</FilePath>
<LineStart>159</LineStart>
<Snippet>        &lt;tr&gt;

        &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;HistoryDetails&quot;&gt;

          &lt;td class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CEA548BED61E4E7CE80EAD3C165AB349">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at data_langInd.jsp line 51 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>data_langInd.jsp</FileName>
<FilePath>webapp/data_langInd.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form  action=&quot;/langIndCorrection.do&quot; method=&quot;post&quot;&gt;
   &lt;table width=&quot;696&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot;&gt;
   &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="821C284B544587C0FB88A85F2C1F152D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvCappvPurchases.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvCappvPurchases.jsp</FileName>
<FilePath>webapp/ppvCappvPurchases.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>                        &lt;!--Basic Search Starts Here--&gt;
                       &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
					   &lt;html:form action=&quot;/cappvPurchases.do&quot; method=&quot;post&quot;&gt;
                          &lt;div class=&quot;st_searchcomp&quot;&gt;
                            Search Option:&lt;br /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BCD67ECE8EE1100B16B8D9769C7DC39F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVfallout_billing.jsp line 314 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVfallout_billing.jsp</FileName>
<FilePath>webapp/OVfallout_billing.jsp</FilePath>
<LineStart>314</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="443FEFCEFB1260D9A8F918D7D1BCA05A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restrict_flowGUI_user.jsp line 819 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restrict_flowGUI_user.jsp</FileName>
<FilePath>webapp/restrict_flowGUI_user.jsp</FilePath>
<LineStart>819</LineStart>
<Snippet></Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A7CAC7545B20C6A3CA21DC3241EEC3E3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_botb.jsp line 217 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_botb.jsp</FileName>
<FilePath>webapp/view_botb.jsp</FilePath>
<LineStart>217</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_Botb.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9D35A68E449EEBFC69C78D45BB7251B6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caofferhistorywrap.jsp line 250 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caofferhistorywrap.jsp</FileName>
<FilePath>webapp/caofferhistorywrap.jsp</FilePath>
<LineStart>250</LineStart>
<Snippet>        &lt;tr&gt;

        &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;HistoryDetails&quot;&gt;

          &lt;td class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1A46701B141206CC9BC6042532FF7955">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at emailDateAcceleration.jsp line 64 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>emailDateAcceleration.jsp</FileName>
<FilePath>webapp/emailDateAcceleration.jsp</FilePath>
<LineStart>64</LineStart>
<Snippet>    &lt;td height=&quot;110&quot;&gt;
     &lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
	 &lt;s:form name=&quot;emaildateaccelerationform&quot; action=&quot;emailDateAcceleration&quot;&gt;
    &lt;/td&gt;
  &lt;/tr&gt;  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FCF04700E9CEE2DF2B576D03007C48F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stbupdatesearch.jsp line 88 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stbupdatesearch.jsp</FileName>
<FilePath>webapp/stbupdatesearch.jsp</FilePath>
<LineStart>88</LineStart>
<Snippet>

	&lt;html:form action=&quot;/stbUpdate.do&quot; method=&quot;post&quot; target=&quot;stbDetails&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
    &lt;table width=&quot;750&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D82A6A56F3EBC030C9AD94B2C5746C2C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ivappAdxPCReflow.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ivappAdxPCReflow.jsp</FileName>
<FilePath>webapp/businessTools/tools/ivappAdxPCReflow.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form   name=&quot;ivappAdxReflowForm&quot; theme=&quot;simple&quot;&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;onLoad(false)&quot;&gt;
&lt;br&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="345E4D90C401334E38E90D84A643B807">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_hbi_converttoharmony.jsp line 41 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_hbi_converttoharmony.jsp</FileName>
<FilePath>webapp/fallout_hbi_converttoharmony.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;

	&lt;html:form  action=&quot;/fallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
    
    &lt;table width=&quot;700&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="25E411C41924E62501991A9AA29F7130">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restoreHardDisconnecttool.jsp line 623 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restoreHardDisconnecttool.jsp</FileName>
<FilePath>webapp/restoreHardDisconnecttool.jsp</FilePath>
<LineStart>623</LineStart>
<Snippet>&lt;/table&gt;
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 350px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2E160E87BCDC1B9A4B7E19C6C5E84166">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pots_report_main_old.jsp line 119 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pots_report_main_old.jsp</FileName>
<FilePath>webapp/pots_report_main_old.jsp</FilePath>
<LineStart>119</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javacsript:initializeForm()&quot;&gt;
&lt;html:form action=&quot;/potsreportOld.do&quot; method=&quot;post&quot; focus=&quot;state&quot; target=&quot;searchbox&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA0E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 836 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>836</LineStart>
<Snippet>&lt;/script&gt; 
&lt;/html:form&gt;
&lt;html:form action=&quot;/reservationidcorrection.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt; 
&lt;html:hidden property=&quot;actionInfo&quot; value=&quot;&quot;/&gt; 
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2234A525E088F1DB7BA4A2DBCC1420E8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at logExtractor2.jsp line 397 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>logExtractor2.jsp</FileName>
<FilePath>webapp/logExtractor2.jsp</FilePath>
<LineStart>397</LineStart>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="89E3B08C83962899431B7B37780CA672">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at PromoManagementTool.jsp line 205 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PromoManagementTool.jsp</FileName>
<FilePath>webapp/PromoManagementTool.jsp</FilePath>
<LineStart>205</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/promoTool.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="491E75B83E6AC35B0192A08D5DB9CEF6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewOrderResponses.jsp line 21 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewOrderResponses.jsp</FileName>
<FilePath>webapp/systemtools/ittools/viewOrderResponses.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>&lt;/head&gt;
&lt;body style=&quot;margin: 0px; background-color: #E9F3FF;&quot;&gt;
	&lt;s:form method=&quot;post&quot; action=&quot;orderDiagnosis&quot; id=&quot;OrderDiagnosisForm&quot;&gt;
		&lt;jsp:include page=&quot;/sspheader.jsp&quot; /&gt;
		&lt;table width=&quot;100%&quot; border=&quot;1&quot; align=&quot;left&quot; cellpadding=&quot;0&quot;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CE7C3651B0D11410838A2D02EE08B83A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pp_correction.jsp line 1171 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pp_correction.jsp</FileName>
<FilePath>webapp/pp_correction.jsp</FilePath>
<LineStart>1171</LineStart>
<Snippet>                                    &lt;/div&gt;

&lt;html:form action=&quot;/fallout_pp_detail.do&quot; method=&quot;post&quot; target=&quot;pp_correction&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B20319BD45BBCE7C101C9F41DF600120">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pushMailManuallyNew.jsp line 182 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pushMailManuallyNew.jsp</FileName>
<FilePath>webapp/pushMailManuallyNew.jsp</FilePath>
<LineStart>182</LineStart>
<Snippet>	Vector getDisplayDetails = pushMailSrvc.getDisplayDetails();
%&gt;
&lt;form name=&quot;pushMailForm&quot; method=&quot;post&quot; target=&quot;pushMailFrm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidOrdId&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;hidprodCat&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BE5B1E320A9F3DF85E678E9363002DD5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at userhistorywrap.jsp line 37 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>userhistorywrap.jsp</FileName>
<FilePath>webapp/userhistorywrap.jsp</FilePath>
<LineStart>37</LineStart>
<Snippet>&lt;bean:define id=&quot;descStringBean&quot; value=&quot;&lt;%=descString%&gt;&quot;/&gt;

&lt;form&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8B7B216975FCA3BCBE4595865EF2AB82">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routerprofile.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routerprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/routerprofile.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>	&lt;div class=&quot;panel serif&quot;&gt;
	&lt;s:if test='%{#request.equipmentProfileInfo.routerInfo != null &amp;&amp; #request.equipmentProfileInfo.routerInfo.size()&gt;0}'&gt;
	&lt;s:form action=&quot;EPUpdateRouterInfo&quot; name=&quot;RouterInfoDisplayForm&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;RouterInfoMap&quot; id=&quot;RouterInfoMap&quot;/&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;EquipmentHistoryInfoMap&quot; id=&quot;EquipmentHistoryInfoMap&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1358E2B2C95C82D883DB7DCD27002D83">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at adptXmlTemplateHeaders.jsp line 42 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>adptXmlTemplateHeaders.jsp</FileName>
<FilePath>webapp/businessTools/tools/adptXmlTemplateHeaders.jsp</FilePath>
<LineStart>42</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D4430CB1D7855B51D138E3051969B49D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vis.jsp line 272 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vis.jsp</FileName>
<FilePath>webapp/fallout_vis.jsp</FilePath>
<LineStart>272</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;falloutCode&quot; value=&quot;&lt;%=erCode%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B41275CEE84C44BEF2E4B6BD4E74CC5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateBOStatus.jsp line 44 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateBOStatus.jsp</FileName>
<FilePath>webapp/updateBOStatus.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>&lt;!-- COA Look and Feel By Sanjay --&gt;

 &lt;html:form method=&quot;post&quot; action=&quot;/updateBOStatus.do&quot;&gt;
       &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="023A3710C47FBAC3B5FC8AFAA4F783AB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wrkgrp_mgmt.jsp line 98 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wrkgrp_mgmt.jsp</FileName>
<FilePath>webapp/wrkgrp_mgmt.jsp</FilePath>
<LineStart>98</LineStart>
<Snippet>  &lt;tr&gt;
    &lt;td&gt;
      &lt;html:form method=&quot;post&quot; action=&quot;/wrkgrpmgmt.do&quot;&gt;
	  &lt;!-- COA Look and Feel By Sanjay --&gt;
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="687977E3FD2BB657494A9841ECF6E7E4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at orderDiagnosis_searchList.jsp line 44 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>orderDiagnosis_searchList.jsp</FileName>
<FilePath>webapp/systemtools/ittools/orderDiagnosis_searchList.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>
&lt;body  style=&quot;margin:0px; background-color:#E9F3FF;&quot;&gt;
&lt;s:form action=&quot;orderDiagnosis&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C182C21AF21D4F2F6B2440AEEC11DC17">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changeProductProperty.jsp line 155 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changeProductProperty.jsp</FileName>
<FilePath>webapp/changeProductProperty.jsp</FilePath>
<LineStart>155</LineStart>
<Snippet>&lt;/div&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/changeProductProperty.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1DB04FEE4C2AFF6ABB30E0693FCD11AD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiHeaders.jsp line 43 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiHeaders.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiHeaders.jsp</FilePath>
<LineStart>43</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="008D707AE8B8493FBFF24E517460DC24">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at menuRedirect.jsp line 55 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>menuRedirect.jsp</FileName>
<FilePath>webapp/menuRedirect.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>&lt;bean:define id=&quot;userNameBean&quot; value=&quot;&lt;%=userName%&gt;&quot;/&gt;
&lt;bean:define id=&quot;requestParamBean&quot; value=&quot;&lt;%=requestParam%&gt;&quot;/&gt;
&lt;form name=&quot;RestrictForm&quot; method=&quot;post&quot;&gt;							  
	&lt;input type=&quot;hidden&quot; name=&quot;srcApp&quot; value=&quot;FlowGUI&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;userID&quot; value='&lt;bean:write name=&quot;userNameBean&quot;/&gt;'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5259FA093FCC8A18BA9E1DCB9CBA7E04">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at CommonProfile.jsp line 306 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommonProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/CommonProfile.jsp</FilePath>
<LineStart>306</LineStart>
<Snippet>		&lt;/div&gt;
		&lt;div class=&quot;commonProfileFormContainer&quot;&gt;			
			&lt;form class=&quot;commonProfileForm&quot; id=&quot;commonProfileForm&quot; name=&quot;commonProfileForm&quot; method=&quot;post&quot; action=&quot;CPRetrieveColumnDetails.action&quot;&gt;
				&lt;div class=&quot;custom-form-group&quot;&gt;
					&lt;label for=&quot;keyspace&quot;&gt;KEY SPACE*&lt;/label&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="09DC954C81FB7B069C7F7D9917626756">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest_complete.jsp line 51 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest_complete.jsp</FileName>
<FilePath>webapp/fallout_volwest_complete.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>    &lt;/script&gt;
	&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	
	        &lt;table width=&quot;712&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A2C6708407C14281B49D8958940EE549">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at accountlevelinfo.jsp line 203 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>accountlevelinfo.jsp</FileName>
<FilePath>webapp/accountlevelinfo.jsp</FilePath>
<LineStart>203</LineStart>
<Snippet>                            &lt;!-- &lt;VDSI:1281:BTN_Hyperlink_Search:Z919003:29072008:START&gt; --&gt;
							&lt;td valign=&quot;top&quot;&gt;
							 &lt;form name=&quot;billingTelForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;billingTN&quot; value=&quot;&quot;/&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D33B08E205CB8EBB22E0949A977F6871">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at auto_cancel_main.jsp line 118 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>auto_cancel_main.jsp</FileName>
<FilePath>webapp/auto_cancel_main.jsp</FilePath>
<LineStart>118</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;populateMap();&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/autocancel.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="04916AFB3C23A83D6083377853952DC2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_trackmyrequest.jsp line 207 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_trackmyrequest.jsp</FileName>
<FilePath>webapp/admin_trackmyrequest.jsp</FilePath>
<LineStart>207</LineStart>
<Snippet>			&lt;/form&gt;
			
			&lt;form id=&quot;trackRequestform&quot; action=&quot;usermanagement.do&quot; method=&quot;post&quot;&gt;
			&lt;div id=&quot;requestDetailsDiv&quot;&gt;
			&lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="77D8437FAFBF009DD626B21BB362B541">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at PNMassUploadTool.jsp line 24 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PNMassUploadTool.jsp</FileName>
<FilePath>webapp/PNMassUploadTool.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massUploadPN.do&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
&lt;table width=&quot;750&quot; border=&quot;0&quot; style=&quot;border-collapse: collapse&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="60CEFD6D4DED9AF2241B683362179F53">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at importUsingExcelAndRoute.jsp line 222 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>importUsingExcelAndRoute.jsp</FileName>
<FilePath>webapp/importUsingExcelAndRoute.jsp</FilePath>
<LineStart>222</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;740&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/importFromExcelToRoute.do&quot; enctype=&quot;multipart/form-data&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 337 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>337</LineStart>
<Snippet>  else if(mapId!=null &amp;&amp; Constants.IRB_MAP_ID.equals(mapId)){
  %&gt;
   &lt;form action=&quot;fallout_others.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="563ABB15434B1A2DE64A5B161C08994A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at newServiceInformation.jsp line 44 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>newServiceInformation.jsp</FileName>
<FilePath>webapp/newServiceInformation.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>

&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BCE617F1487F81062798120F9283EB24">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribs_subservice_correction.jsp line 237 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribs_subservice_correction.jsp</FileName>
<FilePath>webapp/ribs_subservice_correction.jsp</FilePath>
<LineStart>237</LineStart>
<Snippet>&lt;/html:form&gt;
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="14C206C1FAC7FCA87E64A4F01D8C44C5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vzWAgingReport.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vzWAgingReport.jsp</FileName>
<FilePath>webapp/vzWAgingReport.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>				&lt;td valign=&quot;top&quot;&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;4&quot; id=&quot;table3&quot; bgcolor=&quot;#bfbfbf&quot;&gt;
				  &lt;tr class=&quot;headbg8&quot;&gt;
				   &lt;html:form  action=&quot;/vzWITReport.do&quot; method=&quot;post&quot;&gt;	
				    &lt;html:hidden property=&quot;requestType&quot; /&gt;
				    &lt;td valign=&quot;top&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="25629304B31131B2EFB4E31CC9348DA4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addRuleMaster.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addRuleMaster.jsp</FileName>
<FilePath>webapp/businessTools/tools/addRuleMaster.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;ruleForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5A56874054D3A81913D77734ED726BD0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_admin_updatereferral.jsp line 235 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_admin_updatereferral.jsp</FileName>
<FilePath>webapp/wmg_admin_updatereferral.jsp</FilePath>
<LineStart>235</LineStart>
<Snippet>&lt;/table&gt;
&lt;/html:form&gt;
&lt;html:form action=&quot;/wmgAdmin.do&quot; method=&quot;post&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot;/&gt;
&lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A3C1E8884A661C97357F0F8C501C5008">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_truckroll.jsp line 525 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_truckroll.jsp</FileName>
<FilePath>webapp/view_truckroll.jsp</FilePath>
<LineStart>525</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/trqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= filterType %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="26A601F15FED8A758D2F87A4A8CEF37A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewRuleMaster.jsp line 73 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewRuleMaster.jsp</FileName>
<FilePath>webapp/businessTools/tools/viewRuleMaster.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;ruleForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="14A26924278E06A6FBF1512AC7998615">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at notificationStatus.jsp line 146 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>notificationStatus.jsp</FileName>
<FilePath>webapp/notificationStatus.jsp</FilePath>
<LineStart>146</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/systemEventNotificationStatus.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8C2FD6B5A42A2EE88334009748AE13F4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_ispprov.jsp line 344 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_ispprov.jsp</FileName>
<FilePath>webapp/view_ispprov.jsp</FilePath>
<LineStart>344</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EDFC5161CC58AB5DB631FFF0871BEA1E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restoreaccounttool.jsp line 195 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restoreaccounttool.jsp</FileName>
<FilePath>webapp/restoreaccounttool.jsp</FilePath>
<LineStart>195</LineStart>
<Snippet>		&lt;td height=&quot;18&quot;&gt;&lt;strong&gt;SSP ACCT ID&lt;/strong&gt;&lt;/td&gt;
		
		&lt;form name=&quot;AcctForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;accountId&quot; value=&quot;&quot; /&gt;
		&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="ECD0DCDF20F8D3E99950878C25F3D178">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at TerminateRouteUow.jsp line 18 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TerminateRouteUow.jsp</FileName>
<FilePath>webapp/TerminateRouteUow.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;windowRedirect()&quot;&gt;
&lt;logic:equal name=&quot;sourceRoute&quot; value=&quot;routeUOW&quot;&gt;
	&lt;html:form action=&quot;/routeFalloutsManagement.do&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
		&lt;logic:present name=&quot;errorString&quot;&gt;		
			&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;retainErrorString&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A686EA4057E9290BFDECEE0B4F87156E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at postmessagebyorder_manage.jsp line 174 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>postmessagebyorder_manage.jsp</FileName>
<FilePath>webapp/postmessagebyorder_manage.jsp</FilePath>
<LineStart>174</LineStart>
<Snippet>		&lt;td width=&quot;5&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;5&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
		&lt;td width=&quot;100%&quot;&gt;
		&lt;html:form  action=&quot;/postMessages.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot; target=&quot;searchbox&quot;&gt;  
		&lt;!-- COA Look and Feel By Sanjay --&gt;
			&lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="251E91AB2A55F52CD23B3450894242B8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmitNotificationStatus.jsp line 18 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmitNotificationStatus.jsp</FileName>
<FilePath>webapp/resubmitNotificationStatus.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;windowRedirect()&quot;&gt;
&lt;logic:equal name=&quot;sourceRoute&quot; value=&quot;routeUOW&quot;&gt;
	&lt;html:form action=&quot;/routeFalloutsManagement.do&quot; method=&quot;post&quot; target=&quot;_top&quot;&gt;
		&lt;logic:present name=&quot;errorString&quot;&gt;		
			&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;retainErrorString&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="59632350D6AA19E088E9103783D4B0E4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_arbor.jsp line 752 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_arbor.jsp</FileName>
<FilePath>webapp/order_view_arbor.jsp</FilePath>
<LineStart>752</LineStart>
<Snippet>    &lt;/table&gt;
   &lt;/html:form&gt;
   &lt;html:form action=&quot;/elements.do&quot; method=&quot;post&quot;&gt;
    &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
    &lt;html:hidden property=&quot;ELEMENT_ORDERID&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D322343980A993CCF7800F8457F89141">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_touchpoint.jsp line 456 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_touchpoint.jsp</FileName>
<FilePath>webapp/view_touchpoint.jsp</FilePath>
<LineStart>456</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/touchpointqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt; 
	  &lt;html:hidden property=&quot;requestType&quot;/&gt;
       &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="89A576EE9525773C3CFD3C2422E7012E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ivappAdxNotifyReflow.jsp line 39 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ivappAdxNotifyReflow.jsp</FileName>
<FilePath>webapp/businessTools/tools/ivappAdxNotifyReflow.jsp</FilePath>
<LineStart>39</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form   name=&quot;ivappAdxReflowForm&quot; theme=&quot;simple&quot;&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;onLoad(false)&quot;&gt;
&lt;br&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CE7C3651B0D11410838A2D02EE08B839">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pp_correction.jsp line 1127 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pp_correction.jsp</FileName>
<FilePath>webapp/pp_correction.jsp</FilePath>
<LineStart>1127</LineStart>
<Snippet>&lt;!-- Sanjay Murugesan's Code starts here --&gt;
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B74A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 1344 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>1344</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 08/07 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1AECF160F37EDFED05E67082710F9A8A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at detail_bundleprodinfo.jsp line 167 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>detail_bundleprodinfo.jsp</FileName>
<FilePath>webapp/detail_bundleprodinfo.jsp</FilePath>
<LineStart>167</LineStart>
<Snippet>
&lt;!--Changes for Fios Voice Bundles CR start --&gt;
&lt;form name=&quot;FVBundlesForm&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;showPage&quot; value=&quot;&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;orderID&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8746C1A2F5F59C35506F7CE4C5FBFE32">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_mcafee_correct.jsp line 27 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_mcafee_correct.jsp</FileName>
<FilePath>webapp/fallout_mcafee_correct.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
	&lt;table width=&quot;712&quot;&gt;
		&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D89993819D6A47FA5800B2EDA4765DE9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fco_view_westQueuePage.jsp line 448 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fco_view_westQueuePage.jsp</FileName>
<FilePath>webapp/fco_view_westQueuePage.jsp</FilePath>
<LineStart>448</LineStart>
<Snippet>    &lt;/table&gt;
    &lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/icareQueueDetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="512E2F140C6C9C2C7983BB01B14D3BD8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at holdempty.jsp line 345 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>holdempty.jsp</FileName>
<FilePath>webapp/holdempty.jsp</FilePath>
<LineStart>345</LineStart>
<Snippet>&lt;/html:form&gt;
&lt;jsp:include page=&quot;/fallout_release_include.jsp&quot;/&gt; &lt;!-- Added by Neha for TOS Hold --&gt;		
&lt;form name=&quot;RouteForm&quot; action=&quot;/sourceroute.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
&lt;/form&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="066A340856B22D5066DB3D9355C80DC2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at MessageErrorRIBS.jsp line 236 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MessageErrorRIBS.jsp</FileName>
<FilePath>webapp/MessageErrorRIBS.jsp</FilePath>
<LineStart>236</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="306B25DDB047DA4C8025CFC87B864431">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_changearbor.jsp line 57 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_changearbor.jsp</FileName>
<FilePath>webapp/pop_changearbor.jsp</FilePath>
<LineStart>57</LineStart>
<Snippet>              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;html:form action=&quot;/changearbor.do&quot;&gt;
            &lt;logic:present name=&quot;DETAILATSINFO&quot;&gt; 
	    &lt;logic:iterate id=&quot;result&quot; name=&quot;DETAILATSINFO&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4EB36F2CAA8A65B217E76165682593B6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at equipmentProfile.jsp line 412 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>equipmentProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/equipmentProfile.jsp</FilePath>
<LineStart>412</LineStart>
<Snippet>				equipmentupdatesection.appendTo(mainHead);
				$('div#form2').append(
					$('&lt;form id= &quot;eqpUpdForm&quot; name= &quot;eqpUpdForm&quot; action=&quot;EquipmentProfileupdate.action&quot; method=&quot;post&quot; onsubmit=&quot;return  onBeforeUpdate(event)&quot;/&gt;').append(mainHead)
				);
			}</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E05E25BBD7110EA39659CAF6452A20F5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at static_names.jsp line 105 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>static_names.jsp</FileName>
<FilePath>webapp/static_names.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>
&lt;body onload=&quot;populateTables();&quot;&gt;
&lt;form name=&quot;NoticeForm&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;3&quot; bgcolor=&quot;#FFFFFF&quot;&gt;
&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6EA02535B636B23C78F1C2E8B6E7DB03">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at emailEventUpload.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>emailEventUpload.jsp</FileName>
<FilePath>webapp/emailEventUpload.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>
&lt;html:errors/&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/emaileventupload&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;B&gt;Please upload your file:&amp;nbsp;&lt;/B&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9CD184DCA2ABC740A34C3F2176F75471">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at releaseTPVtoProv.jsp line 120 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>releaseTPVtoProv.jsp</FileName>
<FilePath>webapp/releaseTPVtoProv.jsp</FilePath>
<LineStart>120</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;100%&quot; &gt;
	&lt;html:form focus=&quot;orderIds&quot; action=&quot;/release_TPV.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CD74C4806BA90190871985B24A86278E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at approvePage.jsp line 6 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>approvePage.jsp</FileName>
<FilePath>webapp/approvePage.jsp</FilePath>
<LineStart>6</LineStart>
<Snippet>&lt;/head&gt;
&lt;body&gt;
&lt;form method=&quot;post&quot;  action=&quot;approvalAction.do&quot; &gt;
&lt;table align='center'&gt;
&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7C8C71B716DFBA0328381C4498D18791">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewBlobMessage.jsp line 30 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewBlobMessage.jsp</FileName>
<FilePath>webapp/viewBlobMessage.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>  &lt;tr&gt;
    &lt;td&gt;
    &lt;html:form action=&quot;/getBlobMessage.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;2&quot; class=&quot;background3&quot; &gt;
      &lt;TR&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="04916AFB3C23A83D6083377853952DC1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_trackmyrequest.jsp line 156 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_trackmyrequest.jsp</FileName>
<FilePath>webapp/admin_trackmyrequest.jsp</FilePath>
<LineStart>156</LineStart>
<Snippet>
&lt;div &gt;
&lt;form id=&quot;fetchRequestsform&quot; action=&quot;/usermgm/usermanagement.do&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;reqVzId&quot; value=&quot;&quot; /&gt;
&lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; bgcolor=&quot;#FFFFFF&quot;; align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E41EC52ED5FB8C6FBBCEBE659693A492">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at BBEuserhistorywrap.jsp line 36 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BBEuserhistorywrap.jsp</FileName>
<FilePath>webapp/BBEuserhistorywrap.jsp</FilePath>
<LineStart>36</LineStart>
<Snippet>%&gt;
&lt;bean:define id=&quot;descStringBean&quot; value=&quot;&lt;%=descString%&gt;&quot;/&gt;
&lt;form&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
		&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65404B9B78B669CD35EED40983F6C581">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_correct_billing.jsp line 223 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_correct_billing.jsp</FileName>
<FilePath>webapp/pop_correct_billing.jsp</FilePath>
<LineStart>223</LineStart>
<Snippet>                                    &lt;/div&gt;
&lt;/body&gt;
&lt;html:form action=&quot;/bill_correction.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;billCorrection&quot;/&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A80E260571AE74F72A5A76F34A484606">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvProductAssociation.jsp line 174 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvProductAssociation.jsp</FileName>
<FilePath>webapp/ppvProductAssociation.jsp</FilePath>
<LineStart>174</LineStart>
<Snippet>                        &lt;!--Basic Search Starts Here--&gt;
                       &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
					   &lt;html:form action=&quot;/ppvProdAssociation.do&quot; method=&quot;post&quot;&gt;
					   &lt;html:hidden property=&quot;searchTypeInd&quot;/&gt;
                          &lt;div class=&quot;st_searchcomp&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69A05B99DC7BAE7604565D1203CC4DB0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_bbe_queue.jsp line 555 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_bbe_queue.jsp</FileName>
<FilePath>webapp/supervisor_bbe_queue.jsp</FilePath>
<LineStart>555</LineStart>
<Snippet>
	&lt;!--VDSI - Sarvani - Release/Release All button in Supervisor Queue page for HBI, VW, POTS, Presale--&gt;
	&lt;html:form action=&quot;/queuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="42A31D2737065603B3F72DBAE1FB43C2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at MulitpleBroadbandToLECLookup.jsp line 43 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MulitpleBroadbandToLECLookup.jsp</FileName>
<FilePath>webapp/businessTools/tools/MulitpleBroadbandToLECLookup.jsp</FilePath>
<LineStart>43</LineStart>
<Snippet>&lt;/head&gt;
&lt;body&gt;
	&lt;s:form method=&quot;post&quot; name=&quot; MulitpleBroadbandToLECLookupForm&quot;&gt;
		&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;
			cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="654319FF8D90C1339AEE142ABD333B66">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bypasslqcsr.jsp line 32 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bypasslqcsr.jsp</FileName>
<FilePath>webapp/bypasslqcsr.jsp</FilePath>
<LineStart>32</LineStart>
<Snippet>&lt;% } %&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/bypasslqcsr&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F8813C5C21CF5769E6E3F913BDE2257B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pnenvinfo.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pnenvinfo.jsp</FileName>
<FilePath>webapp/pnenvinfo.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/pnenvinfo.do&quot; method=&quot;post&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
&lt;table width=&quot;740&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="52A272131DD926EE6381C567EBB403C4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutHbiHold.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutHbiHold.jsp</FileName>
<FilePath>webapp/OVFalloutHbiHold.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/ovfallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 312 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>312</LineStart>
<Snippet>  else if (Constants.CBON_MAP_ID.equals(mapId)) {
  %&gt;
       &lt;form action=&quot;fallout_others.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BAE16A28D3DF9D4A694526B0E1064E5E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_pp_desc.jsp line 149 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_pp_desc.jsp</FileName>
<FilePath>webapp/fallout_pp_desc.jsp</FilePath>
<LineStart>149</LineStart>
<Snippet>        &lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_pp_detail.do&quot; method=&quot;post&quot; target=&quot;pp_correction&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;lqcsrrequestsubmited&quot;/&gt;
  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7CB359D5ECFD7124A8645C99EEE3FDE7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at erateDiscountDetails.jsp line 95 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>erateDiscountDetails.jsp</FileName>
<FilePath>webapp/businessTools/tools/erateDiscountDetails.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;s:form name=&quot;ERateDiscountForm&quot; method=&quot;post&quot;  target =&quot;erateframe&quot; theme=&quot;simple&quot;&gt; 

&lt;!-- &lt;input type=&quot;hidden&quot; name=&quot;csrRegion&quot; value=&quot;&quot; /&gt; --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2355F56C71E31C68965DB2D7D61DF929">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_wireClli_correct.jsp line 53 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_wireClli_correct.jsp</FileName>
<FilePath>webapp/fallout_wireClli_correct.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>
&lt;BODY onLoad=&quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;br&gt;
&lt;table width='696' border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; &gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9CF5CC6C5B01AF6B9EB1576C1AFE7477">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Ivapp_report_main.jsp line 90 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Ivapp_report_main.jsp</FileName>
<FilePath>webapp/Ivapp_report_main.jsp</FilePath>
<LineStart>90</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/ivappfalloutreports.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0CE6E7065B616EC62B499CCB49D564BB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrectionVer1.jsp line 35 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrectionVer1.jsp</FileName>
<FilePath>webapp/sspvision/sspV5ProfileCorrectionVer1.jsp</FilePath>
<LineStart>35</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;SSPV5ProfileCorrectionForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;
	cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="392194B7F96FD5DEDC1E45AEA706F862">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_billing.jsp line 390 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_billing.jsp</FileName>
<FilePath>webapp/fallout_billing.jsp</FilePath>
<LineStart>390</LineStart>
<Snippet>&lt;!-- VDSI - Janani - WR 23370 - 07/29 - Ends --&gt;

&lt;form name=&quot;RouteForm&quot; action=&quot;/sourceroute.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
&lt;/form&gt;
&lt;!--\fallout_billing.jsp--&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 225 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>  else if (mapId.equals(Constants.REMEDY_MAP_ID)) {
  %&gt;
       &lt;form action=&quot;ssppgFallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2570FA8DD1B8A99D7E992A1D994B2E33">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at deactivateProducts.jsp line 186 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>deactivateProducts.jsp</FileName>
<FilePath>webapp/deactivateProducts.jsp</FilePath>
<LineStart>186</LineStart>
<Snippet>
	&lt;/script&gt;
	&lt;html:form action=&quot;/deactivateProducts.do&quot; method=&quot;post&quot; target=&quot;productDetails&quot;&gt;
	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
	&lt;table width=&quot;99%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D322343980A993CCF7800F8457F89142">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_touchpoint.jsp line 476 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_touchpoint.jsp</FileName>
<FilePath>webapp/view_touchpoint.jsp</FilePath>
<LineStart>476</LineStart>
<Snippet>  &lt;/body&gt;
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5E3317A12C4D2D884903E60104BD20C8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massPYVUpload.jsp line 25 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massPYVUpload.jsp</FileName>
<FilePath>webapp/massPYVUpload.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>&lt;tr&gt;
&lt;td&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massPYV&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7BFD7DFE0130F90A5B1D0EAEC87C5C7F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pots_report_main.jsp line 121 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pots_report_main.jsp</FileName>
<FilePath>webapp/pots_report_main.jsp</FilePath>
<LineStart>121</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javacsript:initializeForm()&quot;&gt;
&lt;html:form action=&quot;/potsreport.do&quot; method=&quot;post&quot; focus=&quot;state&quot; target=&quot;searchbox&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="17A23761BA188E8FDE04434FD19403E5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at PNDeleteOrderTool.jsp line 113 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PNDeleteOrderTool.jsp</FileName>
<FilePath>webapp/PNDeleteOrderTool.jsp</FilePath>
<LineStart>113</LineStart>
<Snippet>&lt;/html&gt;
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FDF3A592B68AB5AF57A03804E583A2B1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at manageOrder.jsp line 520 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>manageOrder.jsp</FileName>
<FilePath>webapp/manageOrder.jsp</FilePath>
<LineStart>520</LineStart>
<Snippet>
 &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E6DA5925A47BD3FF87A0B30329870530">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at add_correction_PC.jsp line 672 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>add_correction_PC.jsp</FileName>
<FilePath>webapp/add_correction_PC.jsp</FilePath>
<LineStart>672</LineStart>
<Snippet>&lt;/logic:notPresent&gt;

&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; &gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A0ABBDA4E4B73A6AD269984159F4F01A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at falloutHandle.jsp line 173 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>falloutHandle.jsp</FileName>
<FilePath>webapp/businessTools/tools/falloutHandle.jsp</FilePath>
<LineStart>173</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;falloutHandleForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;openList&quot;/&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;closedList&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F236A559B5E6C6D15E8241DB344D9D41">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fcoNotesDetails.jsp line 205 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fcoNotesDetails.jsp</FileName>
<FilePath>webapp/fcoNotesDetails.jsp</FilePath>
<LineStart>205</LineStart>
<Snippet>		&lt;html:form action=&quot;/sourceroute.do&quot; method=&quot;post&quot;&gt;
        &lt;/html:form&gt;
        &lt;html:form action=&quot;/fcoUpdate.do&quot; method=&quot;post&quot;&gt;
		   &lt;html:hidden property=&quot;orderId&quot; value=&quot;&lt;%=orderId%&gt;&quot;/&gt;
           &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&lt;%=elementId%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="38D37164DBD1CC7FB4EE065C119DC301">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeproduct_details.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeproduct_details.jsp</FileName>
<FilePath>webapp/bbeproduct_details.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	window.onload=resize_iframe;
&lt;/script&gt;
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;6&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DF919E45488D0F9CB0E2FE4EC786598F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ponHistory.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ponHistory.jsp</FileName>
<FilePath>webapp/businessTools/tools/ponHistory.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>
&lt;body&gt;
&lt;s:form name=&quot;BroadbandGuiSearchOrderForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="733F60D17051CA5DD1C390C09BB94160">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at widget_wshcreport.jsp line 75 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>widget_wshcreport.jsp</FileName>
<FilePath>webapp/widget_wshcreport.jsp</FilePath>
<LineStart>75</LineStart>
<Snippet>&lt;body&gt;
	&lt;jsp:include page=&quot;/widgets_admin_header.jsp&quot;&gt;&lt;/jsp:include&gt;
	&lt;html:form action=&quot;doWSHealthCheck?WidgetName=MYACCOUNT&quot; method=&quot;post&quot;&gt;
	&lt;table width=&quot;750&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8F6C8FD6D75D6192118C41562698458B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restrict_flowGUI_user.jsp line 825 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restrict_flowGUI_user.jsp</FileName>
<FilePath>webapp/restrict_flowGUI_user.jsp</FilePath>
<LineStart>825</LineStart>
<Snippet></Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7793F48F6B6D4215AE3890C953563ECE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bqtreportinfo.jsp line 35 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bqtreportinfo.jsp</FileName>
<FilePath>webapp/bqtreportinfo.jsp</FilePath>
<LineStart>35</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form action=&quot;/bqtReport.do&quot; method=&quot;post&quot; target=&quot;innerbqtreport&quot;&gt;
&lt;logic:present name=&quot;RESULT_LIST&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AE369E3C50B5F7FFA12FEC5336EA086E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at header.jsp line 234 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>header.jsp</FileName>
<FilePath>webapp/header.jsp</FilePath>
<LineStart>234</LineStart>
<Snippet>		return;
	}
	  jQuery('&lt;form&gt;', {
        'action': 'headerSearch.do',
        'method': 'post'</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A05384B6E183E413C72E9C72DD4E653E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at genericSearchDMT.jsp line 254 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>genericSearchDMT.jsp</FileName>
<FilePath>webapp/genericSearchDMT.jsp</FilePath>
<LineStart>254</LineStart>
<Snippet>	&lt;/td&gt;
&lt;/tr&gt;
&lt;html:form action=&quot;/dmtelementrowdetails.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;tr&gt;
       &lt;td colspan=&quot;2&quot;&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BA6E9EFFBD1ADA958B3719C15341D91D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_nsop_converttoharmony.jsp line 41 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_nsop_converttoharmony.jsp</FileName>
<FilePath>webapp/fallout_nsop_converttoharmony.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;

	&lt;html:form  action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
    
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050291">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2315 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2315</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form action=&quot;/mapdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="90E3E05D777C8A070CCA40B1CB74F340">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fileupload.jsp line 44 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fileupload.jsp</FileName>
<FilePath>webapp/businessTools/tools/fileupload.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>		&lt;div class=&quot;table_body_whtie marketing_profile_search&quot;&gt;
			&lt;div class=&quot;inline_block&quot;&gt;
				&lt;form action=&quot;bulkUpload.action&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
					&lt;span class=&quot;search_param_label&quot; style= &quot;font-size: 14px;&quot;&gt;Select a file to upload &amp;nbsp;&amp;nbsp;&amp;nbsp;:&lt;/span&gt;				
					&lt;span&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="882EEDB2E7F682E7ECCC847AF9F2BBC0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_change.jsp line 184 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_change.jsp</FileName>
<FilePath>webapp/fallout_change.jsp</FilePath>
<LineStart>184</LineStart>
<Snippet>&lt;jsp:include page=&quot;/fallout_release_include.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_change_detail.do&quot; method=&quot;post&quot; target=&quot;conflictChangeBox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7C962C7C10E011139142D5806258A579">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mass_emails_admin.jsp line 94 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mass_emails_admin.jsp</FileName>
<FilePath>webapp/mass_emails_admin.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>									&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
									&lt;logic:notPresent name=&quot;RESULT&quot;&gt;
									&lt;form name=&quot;reportForm&quot; method=&quot;post&quot; action=&quot;/sspflow/massEmailApprove.do&quot;&gt;
										&lt;tr&gt;
											&lt;td width=&quot;75&quot; height=&quot;50&quot; align=&quot;center&quot;&gt;&lt;b&gt;Template Id&lt;/b&gt;&lt;/td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3EA30304A618139EE3912A323FD384C7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeUow.jsp line 235 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeUow.jsp</FileName>
<FilePath>webapp/routeUow.jsp</FilePath>
<LineStart>235</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/routeFalloutsManagement.do&quot; target=&quot;searchbox&quot;&gt;   
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="34E35C26C10C4F1A701DFAC965E22DD1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at releaseDateUpdate.jsp line 429 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>releaseDateUpdate.jsp</FileName>
<FilePath>webapp/releaseDateUpdate.jsp</FilePath>
<LineStart>429</LineStart>
<Snippet>&lt;/table&gt; 
  &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:100px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;  
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt; 
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt; 
                                          &lt;tr&gt;&lt;td&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3A86348B9DA45CD218DC9AB141C74FA4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_interland_correct.jsp line 31 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_interland_correct.jsp</FileName>
<FilePath>webapp/fallout_interland_correct.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>  &lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;712&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="59632350D6AA19E088E9103783D4B0E6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_arbor.jsp line 767 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_arbor.jsp</FileName>
<FilePath>webapp/order_view_arbor.jsp</FilePath>
<LineStart>767</LineStart>
<Snippet>   &lt;/html:form&gt;
   
   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
     &lt;html:hidden property=&quot;beanName&quot;/&gt;
     &lt;html:hidden property=&quot;listName&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9D8E4E5824CAF46C6DFEF840B8753923">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewNewOrderResponses.jsp line 81 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewNewOrderResponses.jsp</FileName>
<FilePath>webapp/viewNewOrderResponses.jsp</FilePath>
<LineStart>81</LineStart>
<Snippet>&lt;/head&gt;
&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot;&gt;
&lt;html:form action=&quot;/orderDiagnosisNew.do&quot; method=&quot;post&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="86DE46C987142F505630C06BA254F6F6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at data_serviceinfo.jsp line 102 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>data_serviceinfo.jsp</FileName>
<FilePath>webapp/data_serviceinfo.jsp</FilePath>
<LineStart>102</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form  action=&quot;/datanamecorrection.do&quot; method=&quot;post&quot;&gt;
   &lt;table width=&quot;696&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot;&gt;
   &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8C4EE65E776D268238643EAAF62F154E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at promo_report.jsp line 125 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>promo_report.jsp</FileName>
<FilePath>webapp/promo_report.jsp</FilePath>
<LineStart>125</LineStart>
<Snippet>	String rptDb = promoForm.getResourceDB();
%&gt;
&lt;html:form method=&quot;post&quot; action=&quot;promoReports.do&quot;&gt;
&lt;input type=&quot;hidden&quot; id=&quot;popStartDate&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; id=&quot;popEndDate&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3078A19D9F390B548F9149DECCCC06FE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeOuterUowManual.jsp line 230 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeOuterUowManual.jsp</FileName>
<FilePath>webapp/routeOuterUowManual.jsp</FilePath>
<LineStart>230</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;740&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/routeOuterUowManually.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FD5C3669C4AB6B9DAF5660AEFBAD1CDB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_disconnect_reflow.jsp line 111 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_disconnect_reflow.jsp</FileName>
<FilePath>webapp/fallout_disconnect_reflow.jsp</FilePath>
<LineStart>111</LineStart>
<Snippet>    &lt;/script&gt;
	&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
	&lt;html:form action=&quot;/fallout_disconnect_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
		&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
		  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A08410BDE9B57C2ADBDA0F33BC7CBBEE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at seamless_release_manage.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>seamless_release_manage.jsp</FileName>
<FilePath>webapp/seamless_release_manage.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; &gt;
	&lt;html:form focus=&quot;orderIds&quot; action=&quot;/seamless_release.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69F0F2821AE0D186768943F751ABC05D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at systemretry.jsp line 249 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>systemretry.jsp</FileName>
<FilePath>webapp/systemretry.jsp</FilePath>
<LineStart>249</LineStart>
<Snippet>  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/systemretry.do&quot;&gt;
  &lt;html:hidden property=&quot;mapId&quot;/&gt;
  &lt;html:hidden property=&quot;falloutCode&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="79DD7B0F705FB1B4FE1F9EC21F15879C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at compareEmails.jsp line 50 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>compareEmails.jsp</FileName>
<FilePath>webapp/compareEmails.jsp</FilePath>
<LineStart>50</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:showOrHideDiv()&quot;&gt;
	&lt;html:form action=&quot;/compareEmails.do&quot; method=&quot;post&quot;&gt;
	&lt;!-- COA Look and Feel By Sanjay --&gt;
	&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7E231862264C82756797946AEB3B4C15">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_lec.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_lec.jsp</FileName>
<FilePath>webapp/filter_lec.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DDC69567AAB80A1CE05236FAFFE50201">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest_completeNotes.jsp line 104 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest_completeNotes.jsp</FileName>
<FilePath>webapp/fallout_volwest_completeNotes.jsp</FilePath>
<LineStart>104</LineStart>
<Snippet>    &lt;/script&gt;
	&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;

	        &lt;table width=&quot;712&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D0550909A8CF84B1CCE168E57248FD4F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerReportsAnalysis.jsp line 765 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerReportsAnalysis.jsp</FileName>
<FilePath>webapp/analyzerReportsAnalysis.jsp</FilePath>
<LineStart>765</LineStart>
<Snippet>&lt;!-- Calender Starts here --&gt;
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385263">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1479 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1479</LineStart>
<Snippet>
&lt;!-- Added by shraddha for due date history --&gt;
&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E4749E56A3D1CB40F5C19F937B2F92A5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_cashcard.jsp line 216 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_cashcard.jsp</FileName>
<FilePath>webapp/view_cashcard.jsp</FilePath>
<LineStart>216</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_Cashcard.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="25E411C41924E62501991A9AA29F712F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restoreHardDisconnecttool.jsp line 291 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restoreHardDisconnecttool.jsp</FileName>
<FilePath>webapp/restoreHardDisconnecttool.jsp</FilePath>
<LineStart>291</LineStart>
<Snippet>		&lt;td height=&quot;18&quot;&gt;&lt;strong&gt;SSP ACCT ID&lt;/strong&gt;&lt;/td&gt;
		
		&lt;form name=&quot;AcctForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;accountId&quot; value=&quot;&quot; /&gt;
		&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0E2687F83F6D6FEF65A5C7A673307ADB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogGUIMetrics.jsp line 51 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogGUIMetrics.jsp</FileName>
<FilePath>webapp/mogGUIMetrics.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/mogGUIHeader.jsp&quot;/&gt;
&lt;html:form action=&quot;/mogMetrics.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;98%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="330E1B485B32103D1BD55B5BAB087442">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ucsrProductInput.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ucsrProductInput.jsp</FileName>
<FilePath>webapp/businessTools/tools/ucsrProductInput.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;s:form name=&quot;UCSRProductDetailsForm&quot; method=&quot;post&quot; target=&quot;UCSRProductDetails&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4C691DE34A39C180ADBEB3687E63BB89">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_vadifttp.jsp line 7 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_vadifttp.jsp</FileName>
<FilePath>webapp/filter_vadifttp.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>&lt;bean:define id=&quot;filterErrorCode&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ERRORCODE)) %&gt;&quot;/&gt;
&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CEE59F4FB92027C2E684B89631886531">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sq_error_handler_names.jsp line 105 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sq_error_handler_names.jsp</FileName>
<FilePath>webapp/sq_error_handler_names.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>
&lt;body onload=&quot;populateTables();&quot;&gt;
&lt;form name=&quot;NoticeForm&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;3&quot; bgcolor=&quot;#FFFFFF&quot;&gt;
&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 264 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>264</LineStart>
<Snippet>  else  if(Constants.VOSE_MAP_ID.equals(mapId)){
  %&gt;
        &lt;form action=&quot;sspfallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot; &gt;
        &lt;html:hidden property=&quot;requestType&quot; value=&quot;correct&quot;/&gt;
        &lt;html:hidden property=&quot;requestAction&quot; value=&quot;correct:submit&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1D92C2BCC74E9DEFDF9B7173B5CDD4FC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_massuow.jsp line 31 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_massuow.jsp</FileName>
<FilePath>webapp/wmg_massuow.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/wmgmassuow&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9464ED6D23011D98640B75DE94FE27DD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrectionAddNewService.jsp line 159 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrectionAddNewService.jsp</FileName>
<FilePath>webapp/sspvision/sspV5ProfileCorrectionAddNewService.jsp</FilePath>
<LineStart>159</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;SSPV5ProfileAddServiceForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B11639D4E6014CF4DAFDB7D5B966F97C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_lec.jsp line 217 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_lec.jsp</FileName>
<FilePath>webapp/view_lec.jsp</FilePath>
<LineStart>217</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_lec.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8C955DD3B4E9EED2FBD210F5848C6DE1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mass_emails_newTemplate.jsp line 65 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mass_emails_newTemplate.jsp</FileName>
<FilePath>webapp/mass_emails_newTemplate.jsp</FilePath>
<LineStart>65</LineStart>
<Snippet>                            &lt;tr&gt;
                                &lt;td height=&quot;400&quot; align=&quot;left&quot; valign=&quot;top&quot; bgcolor=&quot;#FFFFFF&quot; style=&quot;padding: 10px 10px 10px 50px&quot;&gt;
									&lt;html:form method=&quot;post&quot; action=&quot;/massEmail&quot; enctype=&quot;multipart/form-data&quot;&gt;
									&lt;table width=&quot;600&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
                                        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4034CCA263A7139AB92F3CE712E46028">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_reports_age.jsp line 106 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_reports_age.jsp</FileName>
<FilePath>webapp/wmg_reports_age.jsp</FilePath>
<LineStart>106</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgRptByAge.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;html:hidden property=&quot;reqType&quot;/&gt;
&lt;html:hidden property=&quot;queryType&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E98A2E27F08EEF160F78DB3D6D46D445">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ValidationTrees.jsp line 442 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ValidationTrees.jsp</FileName>
<FilePath>webapp/ValidationTrees.jsp</FilePath>
<LineStart>442</LineStart>
<Snippet>   &lt;/script&gt;
 &lt;/head&gt;
 &lt;s:form method = &quot;post&quot; action=&quot;validationEngine&quot; enctype=&quot;multipart/form-data&quot;&gt;
 &lt;s:hidden name=&quot;searchId&quot;/&gt;
 &lt;s:hidden name=&quot;triggerForm.treeJsons&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="ED80560C1045960216E00196C4AECE34">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_iCredit.jsp line 21 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_iCredit.jsp</FileName>
<FilePath>webapp/filter_iCredit.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1C93FD906F937F025BB60FF1162E321D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_dtv.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_dtv.jsp</FileName>
<FilePath>webapp/filter_dtv.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6A446FCC3F3ABE5C008C86FEB6A3F474">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvCatalog.jsp line 183 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvCatalog.jsp</FileName>
<FilePath>webapp/ppvCatalog.jsp</FilePath>
<LineStart>183</LineStart>
<Snippet>                      &lt;td&gt;
                        &lt;!--Basic Search Starts Here--&gt;
						&lt;html:form action=&quot;/ppvcatalog.do&quot; method=&quot;post&quot;&gt;
						&lt;html:hidden property=&quot;searchTypeInd&quot;/&gt;
                        &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E354601C379ADB2D4AD7061CF5AB1038">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at icareNotes.jsp line 366 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>icareNotes.jsp</FileName>
<FilePath>webapp/icareNotes.jsp</FilePath>
<LineStart>366</LineStart>
<Snippet>        &lt;/form&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

		&lt;html:form action=&quot;/icare_hold_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
           &lt;html:hidden property=&quot;requestType&quot; value=&quot;hold&quot;/&gt;
        &lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0638000D912562F59F7F615E56F039F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mp.jsp line 154 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mp.jsp</FileName>
<FilePath>webapp/mp.jsp</FilePath>
<LineStart>154</LineStart>
<Snippet>  &lt;tr&gt;
    &lt;td&gt;
     &lt;html:form method=&quot;post&quot; action=&quot;/mp.do&quot;&gt;		
        &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
          &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CC5FB795C2F3C3CB80009B0B60768AC1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at additional_info.jsp line 5 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>additional_info.jsp</FileName>
<FilePath>webapp/additional_info.jsp</FilePath>
<LineStart>5</LineStart>
<Snippet>&lt;%@ taglib uri=&quot;/WEB-INF/struts-html.tld&quot; prefix=&quot;html&quot; %&gt;

&lt;form&gt;
&lt;table width=&quot;738&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA0A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 502 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>502</LineStart>
<Snippet>&lt;!--Ver 1.1 Begins For Manual Routing --&gt;
&lt;logic:present name=&quot;manualQueue&quot;&gt;
&lt;html:form action=&quot;/ManualRouting.do&quot; method=&quot;post&quot;&gt;

&lt;a href=&quot;javascript:releaseOrder();&quot;&gt;&lt;img src=&quot;images/buttons_release.gif&quot; width=&quot;102&quot; height=&quot;20&quot; border=&quot;0&quot;&gt;&lt;/a&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2DA00595988820D1B6B1976E31A477F9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wdfalloutmgt.jsp line 183 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wdfalloutmgt.jsp</FileName>
<FilePath>webapp/wdfalloutmgt.jsp</FilePath>
<LineStart>183</LineStart>
<Snippet>  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/wdfalloutmgt.do&quot;&gt;
  &lt;html:hidden property=&quot;mapId&quot;/&gt;  
  &lt;html:hidden property=&quot;falloutCode&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="79A0F8FF6DAE7E4EDFFCF5EA7FACC836">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_sdmp.jsp line 267 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_sdmp.jsp</FileName>
<FilePath>webapp/fallout_sdmp.jsp</FilePath>
<LineStart>267</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_sdmp_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;falloutCode&quot; value=&quot;&lt;%=erCode%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DA34550430E1464860B6C4F20B1E47F5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at recapCkt.jsp line 40 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>recapCkt.jsp</FileName>
<FilePath>webapp/recapCkt.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>&lt;!-- COA Look and Feel By Sanjay --&gt;

 &lt;html:form method=&quot;post&quot; action=&quot;/recapCkt.do&quot;&gt;
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;98%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9C796FBDF8D9D3C948FE963C746CADAD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mp_add.jsp line 184 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mp_add.jsp</FileName>
<FilePath>webapp/mp_add.jsp</FilePath>
<LineStart>184</LineStart>
<Snippet>  &lt;tr&gt;
    &lt;td&gt;
     &lt;html:form method=&quot;post&quot; action=&quot;/mp.do&quot;&gt;
        &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
          &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CE925731B82B8DEF9F0A9DDC2847E8B5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pcanMenus.jsp line 27 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pcanMenus.jsp</FileName>
<FilePath>webapp/pcanMenus.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>
&lt;body&gt;
&lt;form&gt;

&lt;div class=&quot;pcan_dropdown&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F6184449D94EA3222D0B5F42A2008FF9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at remedysearch.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>remedysearch.jsp</FileName>
<FilePath>webapp/remedysearch.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>&lt;/script&gt;

&lt;html:form action=&quot;/remedySearch.do&quot; method=&quot;post&quot; target=&quot;remedysearch&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="98EDC08AF4E9906B8DF1C8504D330156">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at RedirectExReport.jsp line 26 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RedirectExReport.jsp</FileName>
<FilePath>webapp/RedirectExReport.jsp</FilePath>
<LineStart>26</LineStart>
<Snippet>&lt;/script&gt;
&lt;body onload='init()'&gt;
	&lt;form&gt;	
		&lt;input type='hidden' name='srcApp' value='FlowGUI'/&gt;
		&lt;input type='hidden' name='hurl' value='&lt;bean:write name=&quot;urlBean&quot;/&gt;'/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="48CB81CE4224312A32E96014A9568FCF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateCanBtnBillCycle.jsp line 57 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateCanBtnBillCycle.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/updateCanBtnBillCycle.jsp</FilePath>
<LineStart>57</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;scrubUpdates&quot; name=&quot;UpdateCANBTNBCIdFM&quot; &gt;

&lt;body onload=&quot;onChangeUpdateType()&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BFFC68B7B6DA3AD95EE56E21C3BD3749">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at detail_onebill_orderproduct.jsp line 267 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>detail_onebill_orderproduct.jsp</FileName>
<FilePath>webapp/detail_onebill_orderproduct.jsp</FilePath>
<LineStart>267</LineStart>
<Snippet>&lt;%}%&gt;
	
&lt;html:form method=&quot;post&quot; action=&quot;/diaExport.do&quot;&gt;
&lt;html:hidden property=&quot;orderID&quot; /&gt;
&lt;html:hidden property=&quot;elememtID&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8507F6CA200DC56FB600F637CDC9EA07">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at detail_orderproductdisconnect.jsp line 625 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>detail_orderproductdisconnect.jsp</FileName>
<FilePath>webapp/detail_orderproductdisconnect.jsp</FilePath>
<LineStart>625</LineStart>
<Snippet>&lt;/logic:equal&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/diaExport.do&quot;&gt;
&lt;html:hidden property=&quot;orderID&quot; /&gt;
&lt;html:hidden property=&quot;elememtID&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B1D4518D3F0FE3524277342A499C9B1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_usage_queue.jsp line 546 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_usage_queue.jsp</FileName>
<FilePath>webapp/supervisor_usage_queue.jsp</FilePath>
<LineStart>546</LineStart>
<Snippet>    &lt;/html:form&gt; 
    
    &lt;html:form action=&quot;/elements.do&quot; method=&quot;post&quot;&gt;
      &lt;html:hidden property=&quot;ELEMENT_ORDERID&quot;/&gt;
      &lt;html:hidden property=&quot;ELEMENT_ELEMENTID&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5AB85E3143EB1E73B36F7115624CB2C7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at staticssp_names.jsp line 105 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>staticssp_names.jsp</FileName>
<FilePath>webapp/staticssp_names.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>
&lt;body onload=&quot;populateTables();&quot;&gt;
&lt;form name=&quot;NoticeForm&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;3&quot; bgcolor=&quot;#FFFFFF&quot;&gt;
&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="00D0E4BC0ADF8773AC4215C0CB8CE8A9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVPPCorrection.jsp line 1147 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVPPCorrection.jsp</FileName>
<FilePath>webapp/OVPPCorrection.jsp</FilePath>
<LineStart>1147</LineStart>
<Snippet>                                    &lt;/div&gt;

&lt;html:form action=&quot;/ovfallout_pp_detail.do&quot; method=&quot;post&quot; target=&quot;PPCorrection&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FCACFBA254902F70B7CA15330F195AB1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at historyPopup.jsp line 196 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>historyPopup.jsp</FileName>
<FilePath>webapp/historyPopup.jsp</FilePath>
<LineStart>196</LineStart>
<Snippet>  &lt;/logic:present&gt;

	&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
&lt;!-- hidden fields --&gt;
&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B68F148F5C0623FA89043D7689BC099B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeUowManual.jsp line 232 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeUowManual.jsp</FileName>
<FilePath>webapp/routeUowManual.jsp</FilePath>
<LineStart>232</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/routeUowManually.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 318 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>318</LineStart>
<Snippet>  else if (Constants.RIBSCASH_MAP_ID.equals(mapId)) {
  %&gt;
  &lt;form action=&quot;fallout_others.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;!--SDMP Migration - Kousel--&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="59632350D6AA19E088E9103783D4B0E3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_arbor.jsp line 486 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_arbor.jsp</FileName>
<FilePath>webapp/order_view_arbor.jsp</FilePath>
<LineStart>486</LineStart>
<Snippet>   &lt;tr&gt;
   &lt;td&gt;
   &lt;html:form action=&quot;/arborfilter.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
    &lt;html:hidden property=&quot;mapId&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPID) %&gt;&quot;/&gt;
    &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPVER) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1097D5541DF621770E7DADEC7E6E8A60">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massupload.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massupload.jsp</FileName>
<FilePath>webapp/businessTools/tools/massupload.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;s:form name=&quot;MassBillingForm&quot; method=&quot;post&quot; action=&quot;/massupload.action&quot; enctype=&quot;multipart/form-data&quot; theme=&quot;simple&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1AEAB2B4D66EDEB3D9E6DEB2FB9CBE9E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_parallelpots.jsp line 44 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_parallelpots.jsp</FileName>
<FilePath>webapp/filter_parallelpots.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
// Added by Venkatesan R on 24-06-2004 starts</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050294">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2367 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2367</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 08/07 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8BD892E58687C091AD31FAA63CABF0F9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vzWITReport.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vzWITReport.jsp</FileName>
<FilePath>webapp/vzWITReport.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>				&lt;td valign=&quot;top&quot;&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;4&quot; id=&quot;table3&quot; bgcolor=&quot;#bfbfbf&quot;&gt;
				  &lt;tr class=&quot;headbg8&quot;&gt;
				  &lt;html:form  action=&quot;/vzWITReport.do&quot; method=&quot;post&quot;&gt;	
				    &lt;td valign=&quot;top&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
				      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F8E7DD026820C135C739DC761E9497A2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerReportsAnalysisCorrection.jsp line 817 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerReportsAnalysisCorrection.jsp</FileName>
<FilePath>webapp/analyzerReportsAnalysisCorrection.jsp</FilePath>
<LineStart>817</LineStart>
<Snippet>
 &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8D2BDF58CBA2EFBE04A831B5AF8A087E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caofferOrderView.jsp line 56 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caofferOrderView.jsp</FileName>
<FilePath>webapp/caofferOrderView.jsp</FilePath>
<LineStart>56</LineStart>
<Snippet>	
      &lt;tr&gt;
	  &lt;form name=&quot;MONForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;cogOrderId&quot; value=&quot;&quot;/&gt;
        &lt;td class=&quot;nmfheadbg&quot;&gt;&amp;nbsp;&amp;nbsp;Order ID: &lt;bean:write name=&quot;CAOfferServiceDetails&quot; property=&quot;orderId&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A837D4E804A0D65E776A73C03FA1F136">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewGroupRuleMaster.jsp line 98 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewGroupRuleMaster.jsp</FileName>
<FilePath>webapp/businessTools/tools/viewGroupRuleMaster.jsp</FilePath>
<LineStart>98</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DED8B9857B41631FAB2965EE6531BC42">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at queuecop_report_main.jsp line 95 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>queuecop_report_main.jsp</FileName>
<FilePath>webapp/queuecop_report_main.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/queuecop.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A9FF687B6141A52F15ECFA7E593D0089">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at watchdog_retry.jsp line 137 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>watchdog_retry.jsp</FileName>
<FilePath>webapp/watchdog_retry.jsp</FilePath>
<LineStart>137</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;100%&quot; &gt;
	&lt;html:form focus=&quot;orderIDs&quot; action=&quot;/watchdog_retry.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="225A30F5EDABA91A6551D343B49FB849">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at quoteEmailView.jsp line 55 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>quoteEmailView.jsp</FileName>
<FilePath>webapp/quoteEmailView.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>

&lt;form name=&quot;QuoteEmailResndForm&quot; action=&quot;/sspflow/quotemailresend.do&quot; method=&quot;post&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
          &lt;table width=&quot;99%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9B30E98C10817D7C2A86D22DBF5730DA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Track_Testing.jsp line 54 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Track_Testing.jsp</FileName>
<FilePath>webapp/Track_Testing.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>&lt;/head&gt;
&lt;body style=&quot; margin:0; font-size:0.9em; line-height:20px; font-family: 'Myriad Pro', 'Trebuchet MS', Arial;  background-color:#EEEFF7;&quot;&gt;
&lt;form name=&quot;configureTestCaseForm&quot; method=&quot;post&quot; target=&quot;tstCsDtlsFrm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;param&quot; value=&quot;&quot;&gt;
&lt;table align=&quot;center&quot; width=&quot;900&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69CDD0DF8DCF12E0B399F9F29F3DBC98">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at displayNewMessages.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>displayNewMessages.jsp</FileName>
<FilePath>webapp/displayNewMessages.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>&lt;/script&gt;    
&lt;/HEAD&gt;
&lt;html:form name=&quot;OrderDiagnosisNewForm&quot; action=&quot;/orderDiagnosisNew.do&quot; method=&quot;post&quot; type=&quot;com.verizon.ssp.flowclient.tools.orderDiagnosis.OrderDiagnosisNewForm&quot;&gt;

&lt;html:hidden property=&quot;messageId&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FE7D137E6094DF648FA7779DBF1A9B97">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at map_outerFrame.jsp line 86 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>map_outerFrame.jsp</FileName>
<FilePath>webapp/map_outerFrame.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>

&lt;form name=&quot;FlowMapForm&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;MAPID&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;isInnerMap&quot; value=&quot;Y&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7669DF40CD8E730ACB9C980CCFF82FC5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ucsrresponsehome.jsp line 65 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ucsrresponsehome.jsp</FileName>
<FilePath>webapp/ucsrresponsehome.jsp</FilePath>
<LineStart>65</LineStart>
<Snippet>

	&lt;html:form action=&quot;/ucsrResponseTool.do&quot; method=&quot;post&quot; target=&quot;bundleDetails&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CE925731B82B8DEF9F0A9DDC2847E8B6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pcanMenus.jsp line 27 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pcanMenus.jsp</FileName>
<FilePath>webapp/sspvision/pcanMenus.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>
&lt;body&gt;
&lt;form&gt;

&lt;div class=&quot;pcan_dropdown&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8B15B9A140F3A2E9B77451ADE616361A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_reports_file.jsp line 52 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_reports_file.jsp</FileName>
<FilePath>webapp/wmg_reports_file.jsp</FilePath>
<LineStart>52</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgfileRpt.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;html:hidden property=&quot;reqType&quot;/&gt;
&lt;html:hidden property=&quot;filename&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="484E05A842204AB646EAB7EE68B59E7B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_queue.jsp line 525 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_queue.jsp</FileName>
<FilePath>webapp/supervisor_queue.jsp</FilePath>
<LineStart>525</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/supervisor_detail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;mapId&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPID) %&gt;&quot;/&gt;
      &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPVER) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="30DFC293-D2B8-463A-9952-257A44B5339C" iid="6B59917282F96B805CA56DABEBCDD755">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The HTTP request at gettrkFltDtls_new.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>gettrkFltDtls_new.jsp</FileName>
<FilePath>webapp/gettrkFltDtls_new.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>	var randomVal = new Date().getTime();
	var url = &quot;getMapTrigPassDetailView.jsp?tstCaseId=&quot;+tstCsId+&quot;&amp;batchId=&quot;+btchId+&quot;&amp;typeId=&quot;+type+&quot;&amp;flag=PASS&amp;tempval=&quot;+randomVal;
	http.open(&quot;GET&quot;, url, true);
	http.onreadystatechange = handleDetailView;
	http.send(null);</Snippet>
<TargetFunction>FunctionPointerCall()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5E7AE32BE1166AF3C52DEDCB50C65D88">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at btnCorrection.jsp line 244 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>btnCorrection.jsp</FileName>
<FilePath>webapp/btnCorrection.jsp</FilePath>
<LineStart>244</LineStart>
<Snippet>	&lt;p&gt;&amp;nbsp;&lt;/p&gt;
	&lt;tr&gt;
            &lt;td colspan=&quot;3&quot;&gt;&lt;FORM name=&quot;changeForm&quot; method='POST'  action=&quot;&quot; target=&quot;displayMsg2&quot; &gt;

                &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000099&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5172E4F62F403F0A156AB995FDB73BB9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogGUIProcessorStatus.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogGUIProcessorStatus.jsp</FileName>
<FilePath>webapp/mogGUIProcessorStatus.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
              &lt;html:form action=&quot;/mogProcessorStatus.do&quot;&gt;
              &lt;!--Search Table Starts Here--&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4046BA0AA5905B713244D72294C14E8D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_FVRIBS.jsp line 206 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_FVRIBS.jsp</FileName>
<FilePath>webapp/view_FVRIBS.jsp</FilePath>
<LineStart>206</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_FVRIBS.jsp&quot;/&gt;
                  &lt;tr&gt;
				  &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
					&lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A3C1E8884A661C97357F0F8C501C5009">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_truckroll.jsp line 541 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_truckroll.jsp</FileName>
<FilePath>webapp/view_truckroll.jsp</FilePath>
<LineStart>541</LineStart>
<Snippet>    &lt;/html:form&gt;
    
    &lt;html:form action=&quot;/trqueueedit.do&quot; method=&quot;post&quot;&gt;
      &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
      &lt;html:hidden property=&quot;TRUCKROLL_REQUESTTYPE&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="97A31E7ADEA1CDECE005599D708563E5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nsop_report_main.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nsop_report_main.jsp</FileName>
<FilePath>webapp/nsop_report_main.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javacsript:changeState()&quot;&gt;
&lt;html:form action=&quot;/nsopreport.do&quot; method=&quot;post&quot; focus=&quot;state&quot; target=&quot;searchbox&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050293">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2351 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2351</LineStart>
<Snippet>
&lt;!-- Added by shraddha for due date history --&gt;
&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="27C9DEFB9B18999465BF1443FE1321D5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_wmg_queuepage.jsp line 3 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_wmg_queuepage.jsp</FileName>
<FilePath>webapp/filter_wmg_queuepage.jsp</FilePath>
<LineStart>3</LineStart>
<Snippet>&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot; src=&quot;javascript/flowclient.js&quot;&gt;&lt;/script&gt; 

&lt;form name=&quot;filterForm&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table3&quot; bgcolor=&quot;#bfbfbf&quot;&gt;
&lt;tr class=&quot;headbg2&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="240FB0455C306474529D100528D76C09">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at JSpell.jsp line 100 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSpell.jsp</FileName>
<FilePath>webapp/jspellhtml2k4/JSpell.jsp</FilePath>
<LineStart>100</LineStart>
<Snippet>			&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=4&gt;&lt;%=java.util.ResourceBundle.getBundle(&quot;com/wallstreetwise/app/jspell/gui/i18n&quot;,guiLocale).getString(&quot;spellcheckcomplete&quot;)%&gt;&lt;/font&gt;&lt;br&gt;
			&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=2&gt;(&lt;%=java.util.ResourceBundle.getBundle(&quot;com/wallstreetwise/app/jspell/gui/i18n&quot;,guiLocale).getString(&quot;noerrorsfound&quot;)%&gt;)&lt;/font&gt;&lt;p&gt;
			&lt;form&gt;
				&lt;input type=button class=&quot;noerrorbutton&quot; name=&quot;closeButton&quot; value=&quot;&lt;%=java.util.ResourceBundle.getBundle(&quot;com/wallstreetwise/app/jspell/gui/i18n&quot;,guiLocale).getString(&quot;ok&quot;)%&gt;&quot; onclick=&quot;spellCheckClosing(); parent.close();&quot;&gt;&lt;br&gt;
			&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA02826849710E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 1554 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>1554</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 08/07 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4F6B769D37522FD4EA7344373ACDF34A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_fttpvideo.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_fttpvideo.jsp</FileName>
<FilePath>webapp/filter_fttpvideo.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
	&lt;script language=&quot;JavaScript&quot;&gt;
		function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="82D70A683B742F65EFED6A7D1C794795">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_mywork.jsp line 219 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_mywork.jsp</FileName>
<FilePath>webapp/view_mywork.jsp</FilePath>
<LineStart>219</LineStart>
<Snippet>    &lt;/table&gt; 
		&lt;!--VDSI - Sarvani - Release/Release All button in My work queue -Start --&gt;
	&lt;html:form action=&quot;/queuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="901A72384FD14ED34F50C52659AF598A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_hbi_requestsubmitfailure.jsp line 51 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_hbi_requestsubmitfailure.jsp</FileName>
<FilePath>webapp/fallout_hbi_requestsubmitfailure.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>    if( mapId != null &amp;&amp; mapId.equals(&quot;8&quot;) ) {
  %&gt;
    &lt;form action=&quot;hbi_resubmit.do&quot; method=&quot;post&quot;&gt;&lt;/form&gt;
  &lt;% }%&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C0E668EB8B782F615838BB7C9A829413">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at andreiBundleHeaders.jsp line 54 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>andreiBundleHeaders.jsp</FileName>
<FilePath>webapp/businessTools/tools/andreiBundleHeaders.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="39917DE99797C7F7299B7AE1D7E823CF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_ribs.jsp line 327 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_ribs.jsp</FileName>
<FilePath>webapp/fallout_ribs.jsp</FilePath>
<LineStart>327</LineStart>
<Snippet>&lt;!-- VDSI - Janani - WR 23370 - 07/29 - Ends --&gt;

&lt;form name=&quot;RouteForm&quot; action=&quot;/sourceroute.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
&lt;/form&gt;
&lt;!--\fallout_ribs.jsp--&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A152043C20702DE6E4FA5D1FA066F148">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_nsop_converttoharmony_faliure.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_nsop_converttoharmony_faliure.jsp</FileName>
<FilePath>webapp/fallout_nsop_converttoharmony_faliure.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>&lt;/table&gt;

    &lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2062F6A9ECB80FAFC892DC36D8BB665A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at cmgqueue.jsp line 254 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>cmgqueue.jsp</FileName>
<FilePath>webapp/cmgqueue.jsp</FilePath>
<LineStart>254</LineStart>
<Snippet>&lt;/div&gt;
&lt;/div&gt;
&lt;html:form action=&quot;/conflictQueue.do&quot; method=&quot;post&quot; &gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
	   &lt;html:hidden property=&quot;conflictStartDate&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DBBE1732B7ABFE7E0CCA4CE4DB3786E5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sqhold_release_manage.jsp line 172 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sqhold_release_manage.jsp</FileName>
<FilePath>webapp/sqhold_release_manage.jsp</FilePath>
<LineStart>172</LineStart>
<Snippet>		&lt;td width=&quot;5&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;5&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
		&lt;td width=&quot;100%&quot;&gt;
		&lt;html:form focus=&quot;orderIds&quot; action=&quot;/sqhold_release.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot; target=&quot;searchbox&quot;&gt;   
			&lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
				&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FF32F2630205466C9CD5CFEFD5D6AE99">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at kobieLookup.jsp line 100 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>kobieLookup.jsp</FileName>
<FilePath>webapp/businessTools/tools/kobieLookup.jsp</FilePath>
<LineStart>100</LineStart>
<Snippet>
											&lt;/tr&gt;
											&lt;s:form action=&quot;kobielookup_getData&quot; id=&quot;searchForm&quot;&gt;
												&lt;tr&gt;
												&lt;s:hidden name=&quot;accIdentifierName&quot; id=&quot;accIdntfrName&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7892B2B4BA1067B2AAA1692A86D409F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_release_include.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_release_include.jsp</FileName>
<FilePath>webapp/fallout_release_include.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>        }
&lt;/script&gt;
&lt;html:form action=&quot;/releaseOrReleaseAll.do&quot; method=&quot;post&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot;/&gt;
	&lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D6B585B50864498BE413646C5C14EE1C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_workgroup_add.jsp line 79 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_workgroup_add.jsp</FileName>
<FilePath>webapp/admin_workgroup_add.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>              &lt;tr bgcolor=&quot;#ffffff&quot;&gt;
                &lt;td&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/wrkgrpmgmt.do&quot;&gt;
&lt;%
String wrkGrpName=(String)request.getAttribute(&quot;workgrpname&quot;);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="484E05A842204AB646EAB7EE68B59E7E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_queue.jsp line 553 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_queue.jsp</FileName>
<FilePath>webapp/supervisor_queue.jsp</FilePath>
<LineStart>553</LineStart>
<Snippet>
	&lt;!--VDSI - Sarvani - Release/Release All button in Supervisor Queue page for HBI, VW, POTS, Presale--&gt;
	&lt;html:form action=&quot;/queuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="112C7AACBFFC8133EDF36FC36B8137AD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at deenroll_tool.jsp line 89 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>deenroll_tool.jsp</FileName>
<FilePath>webapp/deenroll_tool.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/deenrollmentTool.do&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;!-- &lt;jsp:include page=&quot;/header.jsp&quot;/&gt; --&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; style=&quot;border-collapse: collapse&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C1D56F9B4813E64EAF92E61E7D2DF52">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrection.jsp line 1226 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrection.jsp</FileName>
<FilePath>webapp/sspV5ProfileCorrection.jsp</FilePath>
<LineStart>1226</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;SSPV5ProfileCorrectionForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;
	cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="34F039C4342EFD4624E11DDD40187DAA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgCustCommThirdPartyEcrm.jsp line 124 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgCustCommThirdPartyEcrm.jsp</FileName>
<FilePath>webapp/ssppgCustCommThirdPartyEcrm.jsp</FilePath>
<LineStart>124</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
 &lt;jsp:include page=&quot;./ssppgHeader.jsp&quot;/&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
	 &lt;%String isCustComm=&quot;CUST_COMM&quot;;
		 request.setAttribute(&quot;CUST_COMM&quot;,isCustComm);</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="067EDDD301D7EF62555A539E77D0C441">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_view_agentreminders.jsp line 182 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_view_agentreminders.jsp</FileName>
<FilePath>webapp/wmg_view_agentreminders.jsp</FilePath>
<LineStart>182</LineStart>
<Snippet>	&lt;/tr&gt;
&lt;/table&gt;
&lt;html:form action=&quot;/wmgsearch.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;id&quot;/&gt;
  &lt;html:hidden property=&quot;refId&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050297">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2426 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2426</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DF5039DB9C61BBFBB774F2E92941BD94">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_ob.jsp line 184 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_ob.jsp</FileName>
<FilePath>webapp/fallout_ob.jsp</FilePath>
<LineStart>184</LineStart>
<Snippet>&lt;/table&gt;

&lt;form action=&quot;fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;obMessageType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2BA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 272 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>272</LineStart>
<Snippet>  else {System.out.println(&quot;@@@@@@@@@@vadiwest_resubmit.do==&quot;+mapId	);
    %&gt;
      &lt;form action=&quot;vadiwest_resubmit.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;

&lt;input type=hidden name=&quot;rejectReason&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FDF3A592B68AB5AF57A03804E583A2B0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at manageOrder.jsp line 297 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>manageOrder.jsp</FileName>
<FilePath>webapp/manageOrder.jsp</FilePath>
<LineStart>297</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/orderManagement.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="569570136FAA3140E3B742E60F814232">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caofferuserhistorywrap.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caofferuserhistorywrap.jsp</FileName>
<FilePath>webapp/caofferuserhistorywrap.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>%&gt;
&lt;bean:define id=&quot;descStringBean&quot; value=&quot;&lt;%=descString%&gt;&quot;/&gt;
&lt;form&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
		&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="086C187841791149DAD379903F9005A6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at displayMessages.jsp line 101 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>displayMessages.jsp</FileName>
<FilePath>webapp/displayMessages.jsp</FilePath>
<LineStart>101</LineStart>
<Snippet>	&lt;TABLE width=&quot;100%&quot; bgColor=#C0C0C0 border=0&gt;
&lt;logic:present name=&quot;ORDER_LIST&quot;&gt;	
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; bordercolor=&quot;#000000&quot;&gt;
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DDB0621322BED3954F20D15EC2D1B2C2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at moveTemplate_two.jsp line 72 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>moveTemplate_two.jsp</FileName>
<FilePath>webapp/moveTemplate_two.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; &gt;
&lt;form name=&quot;FlowMapForm&quot; method=&quot;post&quot; &gt;
&lt;input type=&quot;hidden&quot; name=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;input type=&quot;hidden&quot; name=&quot;serviceType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DD63CD8F0F4934066EDAA720F150C197">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vasip_report_page.jsp line 173 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vasip_report_page.jsp</FileName>
<FilePath>webapp/vasip_report_page.jsp</FilePath>
<LineStart>173</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7000830A1E575CA9810C0C727E9C6071">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at notes.jsp line 83 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>notes.jsp</FileName>
<FilePath>webapp/notes.jsp</FilePath>
<LineStart>83</LineStart>
<Snippet>&lt;bean:define id=&quot;pieIdBean&quot; value=&quot;null&quot;/&gt;&lt;%}else{%&gt;
&lt;bean:define id=&quot;pieIdBean&quot; value=&quot;&lt;%=pieId%&gt;&quot;/&gt;&lt;%}%&gt;
&lt;html:form action=&quot;/addnotes.do?VIEW_TAB=NOTESTAB&quot; method=&quot;post&quot; focus=&quot;textarea_note&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9EE16703839B64880F1ED04024C416E3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutDisconnect.jsp line 184 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutDisconnect.jsp</FileName>
<FilePath>webapp/OVFalloutDisconnect.jsp</FilePath>
<LineStart>184</LineStart>
<Snippet>&lt;jsp:include page=&quot;/ssppgfallout_release_include.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/ssppg_Fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/ovfallout_disconnect_detail.do&quot; method=&quot;post&quot; target=&quot;conflictDisconnectBox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="506B2373981399B427AF507A3EE947C0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fcoNo.jsp line 181 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fcoNo.jsp</FileName>
<FilePath>webapp/fcoNo.jsp</FilePath>
<LineStart>181</LineStart>
<Snippet>
		
		&lt;html:form action=&quot;/sourceroute.do&quot; method=&quot;post&quot;&gt;
        &lt;/html:form&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="066A340856B22D5066DB3D9355C80DC1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at MessageErrorRIBS.jsp line 119 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MessageErrorRIBS.jsp</FileName>
<FilePath>webapp/MessageErrorRIBS.jsp</FilePath>
<LineStart>119</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/falloutStatRIBS.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FE39D527068A865327606993ACD95A18">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ivappreports.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ivappreports.jsp</FileName>
<FilePath>webapp/ivappreports.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/ivappreports.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="92C2AF7500AD7DC79127F946FB3E6B17">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_fco.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_fco.jsp</FileName>
<FilePath>webapp/filter_fco.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;background3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EC39D274736A3FC83B0E963FD4A740DE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at lecprofile.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>lecprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/lecprofile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>		&lt;div class=&quot;table_body_whtie lec_profile_search_update&quot;&gt;
			&lt;div class=&quot;inline_block&quot;&gt;
				&lt;form name=&quot;lecProfileForm&quot; id=&quot;lecProfileForm&quot; action=&quot;LecProfileRetrieve.action&quot; method=&quot;post&quot;&gt;
					&lt;span class=&quot;search_param_label&quot;&gt;BTN*&amp;nbsp;&amp;nbsp;&amp;nbsp;:&lt;/span&gt;
					&lt;span class=&quot;search_value&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BBB796165888658A9F1697ADDF9F86AE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at profile_details.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>profile_details.jsp</FileName>
<FilePath>webapp/profile_details.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	window.onload=resize_iframe;
&lt;/script&gt;
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;6&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="579C8DEFA58018A7602FFE0F5EA14224">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massuploadbyerrorcode.jsp line 162 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massuploadbyerrorcode.jsp</FileName>
<FilePath>webapp/businessTools/tools/massuploadbyerrorcode.jsp</FilePath>
<LineStart>162</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;populateMap(); initialMap();&quot;&gt;
&lt;s:form name=&quot;MassBillingForm&quot; action=&quot;/massuploadbyerrorcode.action&quot; target=&quot;displayMsg&quot; theme=&quot;simple&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CC2EC8EE7013D0AD9341859027BB96F1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_admin_billingops.jsp line 634 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_admin_billingops.jsp</FileName>
<FilePath>webapp/wmg_admin_billingops.jsp</FilePath>
<LineStart>634</LineStart>
<Snippet>&lt;/table&gt;
&lt;/html:form&gt;
&lt;html:form action=&quot;/wmgAdmin.do&quot; method=&quot;post&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot;/&gt;
&lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="004454F76B85088303E283CFAF19FCED">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at messagePostingPN.jsp line 77 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>messagePostingPN.jsp</FileName>
<FilePath>webapp/messagePostingPN.jsp</FilePath>
<LineStart>77</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/messagePostingPN.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="81BEF8F5F2AB1960DD803BEABA896A95">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspfallout_volwest_hold.jsp line 92 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspfallout_volwest_hold.jsp</FileName>
<FilePath>webapp/sspfallout_volwest_hold.jsp</FilePath>
<LineStart>92</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/sspfallout_volwest_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1C818BA767D7C62C09E0B19E7498BC4A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at hoaDisconnect.jsp line 77 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>hoaDisconnect.jsp</FileName>
<FilePath>webapp/hoaDisconnect.jsp</FilePath>
<LineStart>77</LineStart>
<Snippet>&lt;body&gt;

  &lt;html:form action=&quot;/restoreaccount.do&quot; method=&quot;post&quot; target=&quot;hoadisconnect&quot;&gt;
  &lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
  &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C928A17520A46FDFA9C145A68C08668">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_ribs.jsp line 709 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_ribs.jsp</FileName>
<FilePath>webapp/order_view_ribs.jsp</FilePath>
<LineStart>709</LineStart>
<Snippet>    &lt;/table&gt;
   &lt;/html:form&gt;
   &lt;html:form action=&quot;/elements.do&quot; method=&quot;post&quot;&gt;
    &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
    &lt;html:hidden property=&quot;ELEMENT_ORDERID&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B3A557056080AC1E0D1F4E606886454B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribs_correction.jsp line 286 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribs_correction.jsp</FileName>
<FilePath>webapp/ribs_correction.jsp</FilePath>
<LineStart>286</LineStart>
<Snippet>	     &lt;/html:form&gt;
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C1D56F9B4813E64EAF92E61E7D2DF53">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrection.jsp line 1226 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrection.jsp</FileName>
<FilePath>webapp/sspvision/sspV5ProfileCorrection.jsp</FilePath>
<LineStart>1226</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;SSPV5ProfileCorrectionForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;
	cellspacing=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CCC8D42C246721B2B4279700C8870ABF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massRecapTrack.jsp line 46 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massRecapTrack.jsp</FileName>
<FilePath>webapp/massRecapTrack.jsp</FilePath>
<LineStart>46</LineStart>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CADEABC16ADAFC35212C397E623DABA1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at BQTHistoryTool.jsp line 125 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BQTHistoryTool.jsp</FileName>
<FilePath>webapp/BQTHistoryTool.jsp</FilePath>
<LineStart>125</LineStart>
<Snippet>											&lt;td colspan=&quot;5&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; height=&quot;2&quot;&gt;&lt;/td&gt;
										&lt;/tr&gt;
										&lt;form name=&quot;BQTForm&quot; method=&quot;post&quot; target=&quot;bqt&quot;&gt;
										&lt;tr class=&quot;background3&quot;&gt;
											&lt;td &gt;&lt;img src=&quot;images/spacer.gif&quot; height=&quot;2&quot;&gt;&lt;/td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D569EAE84957743C8ECA373BF2EFBF06">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at detail_orderproduct.jsp line 1510 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>detail_orderproduct.jsp</FileName>
<FilePath>webapp/detail_orderproduct.jsp</FilePath>
<LineStart>1510</LineStart>
<Snippet>
&lt;!-- Added by Neha to show release_date for ER orders Ends --&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/diaExport.do&quot;&gt;
&lt;html:hidden property=&quot;orderID&quot; /&gt;
&lt;html:hidden property=&quot;elememtID&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="44EEE75E824100FDF7B425E701EE5A4F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_tekmart.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_tekmart.jsp</FileName>
<FilePath>webapp/filter_tekmart.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B95879BC8BF2491B1041CB9C0C2373D4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at logExtractorValidMessages.jsp line 46 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>logExtractorValidMessages.jsp</FileName>
<FilePath>webapp/logExtractorValidMessages.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>&lt;/head&gt;
&lt;BODY text=#000000 vLink=#0000ff link=#ff0000 bgColor=white&gt;
&lt;form name=&quot;logExtractForm&quot; method=&quot;post&quot; action=&quot;/sspflow/logExtractor.do&quot;&gt;

&lt;CENTER&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="84DCD11BE0143D4BBCBCEAA22027A3CE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_L2Accept.jsp line 264 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_L2Accept.jsp</FileName>
<FilePath>webapp/pop_L2Accept.jsp</FilePath>
<LineStart>264</LineStart>
<Snippet>&lt;/table&gt;
&lt;/form&gt;
&lt;html:form action=&quot;/IcareOrderUpdate.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
   &lt;html:hidden property=&quot;orderId&quot; value=&quot;&lt;%=orderId%&gt;&quot;/&gt;
   &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&lt;%=elementId%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5AA4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 1376 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>1376</LineStart>
<Snippet> &lt;!-- VISION5 - R4 - Renuka- Ends --&gt;
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="00D0E4BC0ADF8773AC4215C0CB8CE8A8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVPPCorrection.jsp line 1103 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVPPCorrection.jsp</FileName>
<FilePath>webapp/OVPPCorrection.jsp</FilePath>
<LineStart>1103</LineStart>
<Snippet>
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F88E32C8CE8DB8D024629ACEB4B0C48E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at NA_Mail_Details_Update.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>NA_Mail_Details_Update.jsp</FileName>
<FilePath>webapp/NA_Mail_Details_Update.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/nsnamailchanges.do&quot; target=&quot;searchbox&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3B4A5844D53AD962E158A2D1F6150254">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changeMapStatusManual.jsp line 148 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changeMapStatusManual.jsp</FileName>
<FilePath>webapp/changeMapStatusManual.jsp</FilePath>
<LineStart>148</LineStart>
<Snippet>}
&lt;/script&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/changeMapStatusManually.do&quot; target=&quot;searchbox&quot;&gt; 
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CED">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1682 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1682</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form action=&quot;/mapdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1E0567F4BCBE717B6DC618B4E18E7586">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at gettrkFltDtls_new.jsp line 89 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>gettrkFltDtls_new.jsp</FileName>
<FilePath>webapp/gettrkFltDtls_new.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>&lt;/script&gt;
&lt;body style=&quot; margin:0; font-size:0.9em; line-height:20px; font-family: 'Myriad Pro', 'Trebuchet MS', Arial;  background-color:#EEEFF7;&quot;&gt;
&lt;form name=&quot;BatchTrackForm&quot; method=&quot;post&quot;&gt;
&lt;div id=&quot;popMaps&quot; style=&quot;position:absolute;visibility:hidden;background-color:cornsilk;float:top&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;popMapsFail&quot; style=&quot;position:absolute;visibility:hidden;background-color:cornsilk;float:top&quot;&gt;&lt;/div&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F9F089AC4A980CEA287611A8A082B609">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bypasslqcsrDMT.jsp line 53 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bypasslqcsrDMT.jsp</FileName>
<FilePath>webapp/bypasslqcsrDMT.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/byPassLQCSRDMT.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C1D56F9B4813E64EAF92E61E7D2DF51">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrection.jsp line 27 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrection.jsp</FileName>
<FilePath>webapp/businessTools/tools/sspV5ProfileCorrection.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>&lt;head&gt;
&lt;body&gt;
&lt;s:form  method=&quot;post&quot; name=&quot;SSPV5ProfileCorrectionForm&quot;&gt;
&lt;!--Profile Compare Starts Here--&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="687977E3FD2BB657494A9841ECF6E7E3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at orderDiagnosis_searchList.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>orderDiagnosis_searchList.jsp</FileName>
<FilePath>webapp/orderDiagnosis_searchList.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>

&lt;html:form action=&quot;/orderDiagnosis.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;orderId&quot;/&gt;
&lt;html:errors/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5595EEF5812932650176A0DDDCEB9EF9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at JSpellIFrame.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSpellIFrame.jsp</FileName>
<FilePath>webapp/jspellhtml2k4/JSpellIFrame.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>							&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=4&gt;Spell Check Complete&lt;/font&gt;&lt;br&gt;
							&lt;font face=&quot;Verdana, Helvetica, Arial, san-serif&quot; size=2&gt;(No Errors Found)&lt;/font&gt;&lt;p&gt;
							&lt;form&gt;
								&lt;input type=button class=&quot;noerrorbutton&quot; name=&quot;closeButton&quot; value=&quot;Close Spell Checker&quot; onclick=&quot;self.close();&quot;&gt;&lt;br&gt;
							&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7104A830A95B12830747A0E74C26914B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_parallelpots.jsp line 333 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_parallelpots.jsp</FileName>
<FilePath>webapp/view_parallelpots.jsp</FilePath>
<LineStart>333</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AAE9E582B1CB53FD63DA04E7018C75EA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at itoWebServiceResult.jsp line 104 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>104</LineStart>
<Snippet>    }
&lt;/script&gt;
&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6DCC94E869278862216EBA0A282E4085">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at searchtemplateReadonly.jsp line 1159 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>searchtemplateReadonly.jsp</FileName>
<FilePath>webapp/searchtemplateReadonly.jsp</FilePath>
<LineStart>1159</LineStart>
<Snippet>

&lt;html:form method=&quot;post&quot; action=&quot;/dynamicemailsearch.do&quot; target=&quot;searchbox&quot;&gt;

&lt;input type=&quot;hidden&quot; name=&quot;Search&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="17A23761BA188E8FDE04434FD19403E4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at PNDeleteOrderTool.jsp line 28 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PNDeleteOrderTool.jsp</FileName>
<FilePath>webapp/PNDeleteOrderTool.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
  &lt;html:form action = &quot;/PNDeleteOrder.do&quot; method=&quot;post&quot;&gt;
  &lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
  &lt;table cellSpacing=0 cellPadding=0 width=750 border=0&gt;     </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CBB377690ABEE4CE08B932244FC6CE50">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutPPHold.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutPPHold.jsp</FileName>
<FilePath>webapp/OVFalloutPPHold.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>  
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
    &lt;html:form action=&quot;/ovfallout_pp_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="30DFC293-D2B8-463A-9952-257A44B5339C" iid="A821F4F6C7876BF2011A00CFEB1EC0E8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The HTTP request at gettrkFltDtls_new.jsp line 83 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>gettrkFltDtls_new.jsp</FileName>
<FilePath>webapp/gettrkFltDtls_new.jsp</FilePath>
<LineStart>83</LineStart>
<Snippet>	var randomVal = new Date().getTime();
	var url = &quot;getMapTrigFailDetailView.jsp?tstCaseId=&quot;+tstCsId+&quot;&amp;batchId=&quot;+btchId+&quot;&amp;typeId=&quot;+type+&quot;&amp;flag=FAIL&amp;tempval=&quot;+randomVal;
	http.open(&quot;GET&quot;, url, true);
	http.onreadystatechange = handleFailDetailView;
	http.send(null);</Snippet>
<TargetFunction>FunctionPointerCall()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EED7FBA5E155FDFCF92D73CE6F5F0F63">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massLECADX.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massLECADX.jsp</FileName>
<FilePath>webapp/massLECADX.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>
&lt;body&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massLECADX&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;html:errors/&gt;&lt;/span&gt;
&lt;table width=&quot;95%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="81CB4D938CCD4C36A371CA59BD0FFD7A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at winback_hold_order_report.jsp line 227 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>winback_hold_order_report.jsp</FileName>
<FilePath>webapp/winback_hold_order_report.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B11639D4E6014CF4DAFDB7D5B966F97D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_lec.jsp line 292 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_lec.jsp</FileName>
<FilePath>webapp/view_lec.jsp</FilePath>
<LineStart>292</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6D48B6E9B64A14CBC060A9DF5666ABB4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at email_history_tool.jsp line 155 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>email_history_tool.jsp</FileName>
<FilePath>webapp/email_history_tool.jsp</FilePath>
<LineStart>155</LineStart>
<Snippet>					&lt;tr class=&quot;headbg3&quot;&gt;
						&lt;td valign=&quot;top&quot;&gt;
						&lt;html:form action=&quot;/emailHistory.do&quot; method=&quot;post&quot;&gt;
						&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
						&lt;html:hidden property=&quot;startDate&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="942CEC1670F97DD7884B3C823EB5CE73">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at genericsearch.jsp line 256 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>genericsearch.jsp</FileName>
<FilePath>webapp/genericsearch.jsp</FilePath>
<LineStart>256</LineStart>
<Snippet>	&lt;/td&gt;
&lt;/tr&gt;
&lt;html:form action=&quot;/osselementrowdetails.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;tr&gt;
       &lt;td colspan=&quot;2&quot; bgcolor=&quot;#FFFFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FA706D4D8158AEE7E13075D79EFE1200">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at basesPosting.jsp line 146 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>basesPosting.jsp</FileName>
<FilePath>webapp/basesPosting.jsp</FilePath>
<LineStart>146</LineStart>
<Snippet>				&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
				&lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt; 
					&lt;html:form method=&quot;post&quot; action=&quot;/basesPosting.do&quot;&gt;    
						&lt;html:hidden property=&quot;basesState&quot;/&gt; 
						&lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="62CBD4D3E3F53AE07E96FA433FA791CF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nABundleHistory.jsp line 173 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nABundleHistory.jsp</FileName>
<FilePath>webapp/nABundleHistory.jsp</FilePath>
<LineStart>173</LineStart>
<Snippet>														&lt;/tr&gt;
													&lt;/table&gt;
													&lt;form name=&quot;ShowSSPHistoryForm&quot; method=&quot;post&quot; target=&quot;showSSPHistory&quot;&gt;
													&lt;input type=&quot;hidden&quot; name=&quot;orderID&quot; value=&quot;&quot; /&gt;
													&lt;input type=&quot;hidden&quot; name=&quot;input&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="80E7D4550363E8DF7896C7968D5B6AE7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addwdfalloutmgt.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addwdfalloutmgt.jsp</FileName>
<FilePath>webapp/addwdfalloutmgt.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;AddForm&quot;&gt;
	&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
		&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="771487E9390B2CB8DDF36DDCBB3A8A08">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateVZUserId.jsp line 97 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateVZUserId.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/updateVZUserId.jsp</FilePath>
<LineStart>97</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;updateVZUserId&quot; name=&quot;UpdateVZUserIdFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B3115D761E730BDE5E1BCD44B5CCBAD8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sdmpHeader.jsp line 16 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sdmpHeader.jsp</FileName>
<FilePath>webapp/sdmpHeader.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>&lt;tr&gt;
&lt;td class=&quot;st_nav&quot;&gt;
&lt;html:form action=&quot;/ppvSupportTool.do&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E73883F3025017560665C960EB82453A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspheader.jsp line 295 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspheader.jsp</FileName>
<FilePath>webapp/sspheader.jsp</FilePath>
<LineStart>295</LineStart>
<Snippet>	//var link = 'ortReport.do?input='+searchVal;
			
  jQuery('&lt;form&gt;', {
        'action': 'ortReport.do',
        'method': 'post'</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="91FEDB52A78AB17F47E1AE9EB4272C55">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at auto_cancel_add.jsp line 111 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>auto_cancel_add.jsp</FileName>
<FilePath>webapp/auto_cancel_add.jsp</FilePath>
<LineStart>111</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;populateMap();&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/autocancel.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C786321BE85CBBE7F951A04DE99D7155">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at add_correction.jsp line 1513 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>add_correction.jsp</FileName>
<FilePath>webapp/add_correction.jsp</FilePath>
<LineStart>1513</LineStart>
<Snippet>                                    &lt;/div&gt;

&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; &gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="36B264D583CE14C329D4EDC884D2F699">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at RepostingXml.jsp line 258 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RepostingXml.jsp</FileName>
<FilePath>webapp/RepostingXml.jsp</FilePath>
<LineStart>258</LineStart>
<Snippet>&lt;!-- COA Look and Feel By Sanjay --&gt;

&lt;html:form action=&quot;/repostsearch.do&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;table width=&quot;99%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bordercolor=&quot;#FFFFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DE489B6F2C87417092566CB8D97106D9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at marketingProfile.jsp line 233 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>marketingProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/marketingProfile.jsp</FilePath>
<LineStart>233</LineStart>
<Snippet>		&lt;div class=&quot;table_body_whtie marketing_profile_search&quot;&gt;
			&lt;div class=&quot;inline_block&quot;&gt;
				&lt;form name=&quot;marketingProfileDisplayForm&quot; id=&quot;marketingProfileDisplayForm&quot; action=&quot;MarketingProfileRetrieve.action&quot; method=&quot;post&quot;&gt;
					&lt;span class=&quot;search_param_label&quot;&gt;SEARCH PARAMETER*&amp;nbsp;&amp;nbsp;&amp;nbsp;:&lt;/span&gt;
					&lt;span class=&quot;search_value&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5AA0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 1310 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>1310</LineStart>
<Snippet>
&lt;!-- Added by shraddha for due date history --&gt;
&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA0D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 827 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>827</LineStart>
<Snippet>&lt;!-- End - add for video address update --&gt;
&lt;!-- NOS Retirement Vinay Start--&gt;
&lt;html:form action=&quot;/datanamecorrection.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt; 
&lt;html:hidden property=&quot;actionInfo&quot; value=&quot;&quot;/&gt; 
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D3559CF7A934FEDB72D5BDC1F58C739D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at reflowivapp.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>reflowivapp.jsp</FileName>
<FilePath>webapp/reflowivapp.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/reflowivapp&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BC3CF85FA157A3148B6869ED1F21C525">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at widget_stn_wshcreport.jsp line 146 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>widget_stn_wshcreport.jsp</FileName>
<FilePath>webapp/widget_stn_wshcreport.jsp</FilePath>
<LineStart>146</LineStart>
<Snippet>	&lt;jsp:include page=&quot;/widgets_admin_header.jsp&quot;&gt;&lt;/jsp:include&gt;

	&lt;html:form action=&quot;doWSHealthCheck?WidgetName=STN&quot; method=&quot;post&quot;&gt;

	&lt;table width=&quot;750&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CC2EC8EE7013D0AD9341859027BB96F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_admin_billingops.jsp line 140 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_admin_billingops.jsp</FileName>
<FilePath>webapp/wmg_admin_billingops.jsp</FilePath>
<LineStart>140</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgAccessMgmt.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;reqType&quot;/&gt;
&lt;html:hidden property=&quot;toolIds&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A59C58965ABFCA7601AE3671530F4B15">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at cancelXML.jsp line 86 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>cancelXML.jsp</FileName>
<FilePath>webapp/cancelXML.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>	%&gt;
		
		&lt;form name=&quot;frmPbl&quot; action=&quot;cancelResultXML.jsp&quot; method=post target=&quot;ifrmXML&quot;&gt;
		&lt;% 
			Iterator ite = xmlStr.keySet().iterator();</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8E11980794B4DC8B5EC672724BF4411B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stbupdate.jsp line 269 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stbupdate.jsp</FileName>
<FilePath>webapp/stbupdate.jsp</FilePath>
<LineStart>269</LineStart>
<Snippet>%&gt;

 &lt;html:form name=&quot;STBUpdateForm&quot; type=&quot;com.verizon.ssp.flowclient.tools.stbupdate.STBUpdateForm&quot; action=&quot;/stbUpdate.do&quot; method=&quot;post&quot;&gt;

&lt;table width=&quot;650&quot; id=&quot;multiTable&quot; style=&quot;border-collapse: collapse&quot; cellpadding=&quot;0&quot; bordercolor=&quot;#EEEEF2&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="558D46CECBBE74305C3049C2DD2999F2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at myreminder_count.jsp line 130 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>myreminder_count.jsp</FileName>
<FilePath>webapp/myreminder_count.jsp</FilePath>
<LineStart>130</LineStart>
<Snippet>							&lt;/tr&gt;							
						&lt;/table&gt;
&lt;form name=&quot;ondemandcount&quot; target=&quot;dyamic_count&quot; action=&quot;/sspflow/ondemandcount.do&quot;&gt;
&lt;/form&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="91089DDE5B53AEEE9EB7E99F8F048098">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massUpdatePromo.jsp line 239 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massUpdatePromo.jsp</FileName>
<FilePath>webapp/massUpdatePromo.jsp</FilePath>
<LineStart>239</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt; 
	&lt;html:form method=&quot;post&quot; action=&quot;/massRouteManualManagement.do&quot;&gt;    
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AD455C71836DCFCD6DF849D4E652187E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at affinityConsumerDetails.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>affinityConsumerDetails.jsp</FileName>
<FilePath>webapp/affinityConsumerDetails.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>
 &lt;body onload=&quot;javascript:reloadParent();&quot;&gt;
  &lt;html:form action=&quot;/affinity.do&quot; target=&quot;displayAffinity&quot;&gt; 
    
    &lt;logic:present name=&quot;DISPLAY_TOKEN_DETAILS&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="934C3D8924C157ED813A9C40C1A259DD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addRuleGroupMaster.jsp line 74 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addRuleGroupMaster.jsp</FileName>
<FilePath>webapp/businessTools/tools/addRuleGroupMaster.jsp</FilePath>
<LineStart>74</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="09D3E3CF9C2481BB7F9F3AAB01317F76">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vadiwest_requestsubmitfailure.jsp line 41 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vadiwest_requestsubmitfailure.jsp</FileName>
<FilePath>webapp/fallout_vadiwest_requestsubmitfailure.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;changeImage();MM_preloadImages('images/buttons_submit_disabled.gif');&quot;&gt;
	&lt;%if(mapId != null &amp;&amp; (mapId.equals(Constants.VADIWEST_MAP_ID) || (mapId.equals(Constants.VTP_MAP_ID)) || mapId.equals(Constants.VIS_MAP_ID) || mapId.equals(Constants.VADI_FTTP)  ||(mapId.equals(Constants.TEKMART_MAP_ID))|| (mapId.equals(Constants.INTERLAND_MAP_ID)) ||(mapId.equals(Constants.DGF_MAP_ID))||(mapId.equals(Constants.UUNET_MAP_ID))||   (mapId.equals(Constants.CADMUS_MAP_ID)) || (mapId.equals(Constants.MCAFEE_MAP_ID)) || (mapId.equals(Constants.DNSADMIN_MAP_ID)) || (mapId.equals(Constants.CKTID_MAP_ID)) || (mapId.equals(Constants.SOFT_DISCONNECT_MAP_ID))  )) {%&gt;
    &lt;form action=&quot;vadiwest_resubmit.do&quot; method=&quot;post&quot;&gt;
	&lt;/form&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4CDAB70ECA31C760C7AA58133804D532">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at migrationTemplate_two.jsp line 78 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>migrationTemplate_two.jsp</FileName>
<FilePath>webapp/migrationTemplate_two.jsp</FilePath>
<LineStart>78</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; &gt;
&lt;form name=&quot;FlowMapForm&quot; method=&quot;post&quot; action=&quot;flowMapForm.do&quot; target=&quot;outermap&quot;/&gt;
&lt;input type=&quot;hidden&quot; name=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;input type=&quot;hidden&quot; name=&quot;serviceType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EC6320A62C4B6C2E3BB6D2A71BCD852C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_detail_workgroups.jsp line 74 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_detail_workgroups.jsp</FileName>
<FilePath>webapp/admin_detail_workgroups.jsp</FilePath>
<LineStart>74</LineStart>
<Snippet>&lt;/head&gt;
&lt;body class=&quot;iconsole&quot; leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;populateWorkGrp()&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/wrkgrpmgmt.do&quot; target=&quot;_parent&quot; &gt;

</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="562EDABDD2C40D40870936FB3007C66D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at logExtractor3.jsp line 360 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>logExtractor3.jsp</FileName>
<FilePath>webapp/logExtractor3.jsp</FilePath>
<LineStart>360</LineStart>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="48DDA580C78005218B6F5432720DBE5E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massUpdate.jsp line 422 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massUpdate.jsp</FileName>
<FilePath>webapp/massUpdate.jsp</FilePath>
<LineStart>422</LineStart>
<Snippet>&lt;/table&gt; 
  &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:100px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;  
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt; 
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt; 
                                          &lt;tr&gt;&lt;td&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F1B1CEDBAC61EB9FD0C3DB8C629EEBE8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at csgwLookup.jsp line 60 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>csgwLookup.jsp</FileName>
<FilePath>webapp/csgwLookup.jsp</FilePath>
<LineStart>60</LineStart>
<Snippet>            &lt;td&gt;
			&lt;!--Search Table Starts Here--&gt;
			&lt;html:form action=&quot;/csgwLookup.do&quot; method=&quot;post&quot; id=&quot;search&quot;&gt;
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9177D0D4DE30C0ED35CBB566EA7CA571">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgFalloutz2p.jsp line 392 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgFalloutz2p.jsp</FileName>
<FilePath>webapp/ssppgFalloutz2p.jsp</FilePath>
<LineStart>392</LineStart>
<Snippet>

	&lt;html:form action=&quot;/ssppgFalloutVIS.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;

</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A26FD91392BA3F5D767C3F9CEAE433FD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at adptStubMappingRequest.jsp line 46 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>adptStubMappingRequest.jsp</FileName>
<FilePath>webapp/businessTools/tools/adptStubMappingRequest.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;adptStubMappingForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="21D66937BA5180BD592907179356A2F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_FIOS.jsp line 201 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_FIOS.jsp</FileName>
<FilePath>webapp/view_FIOS.jsp</FilePath>
<LineStart>201</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_fios.jsp&quot;/&gt;
                  &lt;tr&gt;
				  &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
					&lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C7B50F8450E7F03F69780866C97057AF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restrict_flowGUI_user_Menu.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restrict_flowGUI_user_Menu.jsp</FileName>
<FilePath>webapp/restrict_flowGUI_user_Menu.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>&lt;bean:define id=&quot;userNameBean&quot; value=&quot;&lt;%=userName%&gt;&quot;/&gt;
&lt;bean:define id=&quot;userIdBean&quot; value=&quot;&lt;%=userId%&gt;&quot;/&gt;
&lt;form name=&quot;RestrictFormMenu&quot; method=&quot;post&quot;&gt;							  
	&lt;input type=&quot;hidden&quot; name=&quot;srcApp&quot; value=&quot;FlowGUI&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;userID&quot; value='&lt;bean:write name=&quot;userNameBean&quot;/&gt;'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="01DBD596F3745921942D00D2BE3AD5FD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massUOWAcct.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massUOWAcct.jsp</FileName>
<FilePath>webapp/massUOWAcct.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;/table&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massUOWAcct&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B748">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 1305 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>1305</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6ADD30B39EFCB404647E6C06F264D335">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_presale.jsp line 352 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_presale.jsp</FileName>
<FilePath>webapp/view_presale.jsp</FilePath>
<LineStart>352</LineStart>
<Snippet>    &lt;/table&gt;
    &lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/queuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="687505E282C3CC860C390703C10B38E1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at harmonyOrderDMT.jsp line 126 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>harmonyOrderDMT.jsp</FileName>
<FilePath>webapp/harmonyOrderDMT.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>    &lt;td width=&quot;10&quot; rowspan=&quot;3&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; width=&quot;10&quot; height=&quot;20&quot;&gt;&lt;/td&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/unityManagementDMT.do&quot; target=&quot;searchbox&quot;&gt;   
       &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 306 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>306</LineStart>
<Snippet>   else if ( mapId != null &amp;&amp; (mapId.equals(&quot;186&quot;) ||mapId.equals(&quot;182&quot;))) {
  %&gt;
       &lt;form action=&quot;fallout_vendor.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="32D45D56A84A2A09BFE0ABE19CE37DB8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at partial_address_validation.jsp line 113 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>partial_address_validation.jsp</FileName>
<FilePath>webapp/partial_address_validation.jsp</FilePath>
<LineStart>113</LineStart>
<Snippet>	window.onload=resize_iframe;		
	&lt;/script&gt;
	&lt;html:form action=&quot;/partial_validation.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
	&lt;!-- COA Look and Feel By Sanjay --&gt;
	&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="30DFC293-D2B8-463A-9952-257A44B5339C" iid="6FCCFB56BF151B916BCD218321F3CE07">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The HTTP request at searchtemplate.jsp line 182 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>searchtemplate.jsp</FileName>
<FilePath>webapp/searchtemplate.jsp</FilePath>
<LineStart>182</LineStart>
<Snippet>			var url = &quot;getEmailVersionsToCompare.jsp?refId=&quot;;
			url += eventId+'&amp;crap='+randomVal;
			http.open(&quot;GET&quot;, url, true);
			http.onreadystatechange = comparePrevMail;
			http.send(null);</Snippet>
<TargetFunction>FunctionPointerCall()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="ADB7DD4711CB7C2E02835579345289CA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at createUOW.jsp line 876 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>createUOW.jsp</FileName>
<FilePath>webapp/createUOW.jsp</FilePath>
<LineStart>876</LineStart>
<Snippet>&lt;/html:form&gt;

    &lt;html:form action=&quot;/ossservicemapdetails.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	
	&lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C32D0A98FCD1F321B46EA0A196C0D3F4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at HBI_main_report.jsp line 97 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HBI_main_report.jsp</FileName>
<FilePath>webapp/HBI_main_report.jsp</FilePath>
<LineStart>97</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/hbireport.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;

&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B1D4518D3F0FE3524277342A499C9AE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_usage_queue.jsp line 239 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_usage_queue.jsp</FileName>
<FilePath>webapp/supervisor_usage_queue.jsp</FilePath>
<LineStart>239</LineStart>
<Snippet>                  &lt;tr&gt;
                    &lt;td class=&quot;background3&quot;&gt;
                      &lt;form name=&quot;FilterForm&quot;&gt;
                      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; class=&quot;background2&quot;&gt;
                        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B747">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 577 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>577</LineStart>
<Snippet>                            &lt;!-- &lt;VDSI:1281:BTN_Hyperlink_Search:Z919003:29072008:START&gt; --&gt;
							&lt;td valign=&quot;top&quot;&gt;
							 &lt;form name=&quot;billingTelForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;billingTN&quot; value=&quot;&quot;/&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9F7FDB83200F129B09CA4284F2E51A2C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stbprofile.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stbprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/stbprofile.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>	&lt;div class=&quot;panel serif&quot;&gt;
		&lt;s:if test='%{#request.equipmentProfileInfo.stbInfo != null &amp;&amp; #request.equipmentProfileInfo.stbInfo.size()&gt;0}'&gt;
		&lt;s:form action=&quot;EPUpdateStbInfo&quot; name=&quot;StbInfoDisplayForm&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;STBInfoMap&quot; id=&quot;STBInfoMap&quot;/&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;EquipmentHistoryInfoMap&quot; id=&quot;EquipmentHistoryInfoMap&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1B86536AC27E084C1BDF1AB966B51A28">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvCustPurchaseDetails.jsp line 97 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvCustPurchaseDetails.jsp</FileName>
<FilePath>webapp/ppvCustPurchaseDetails.jsp</FilePath>
<LineStart>97</LineStart>
<Snippet>                &lt;td&gt;
                &lt;!--Customer Purchases Table Filter Starts Here--&gt;
				&lt;html:form action=&quot;/customerPurchase.do&quot; method=&quot;post&quot;&gt;
				&lt;html:hidden property='searchOption'/&gt;
				&lt;html:hidden property='pcan'/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A214B9AEF04B44485EBF567374CAB6EE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at suppDueDate.jsp line 177 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>suppDueDate.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/suppDueDate.jsp</FilePath>
<LineStart>177</LineStart>
<Snippet>&lt;/head&gt;

&lt;s:form  action=&quot;suppDueDate&quot; name=&quot;SuppDueDateFM&quot; theme=&quot;simple&quot;&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;onLoad(false)&quot;&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69A05B99DC7BAE7604565D1203CC4DAD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_bbe_queue.jsp line 526 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_bbe_queue.jsp</FileName>
<FilePath>webapp/supervisor_bbe_queue.jsp</FilePath>
<LineStart>526</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/supervisor_detail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;mapId&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPID) %&gt;&quot;/&gt;
      &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPVER) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="18F72BE653A407D2400F46D49B70CC52">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at thirdparty_email_head.jsp line 118 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>thirdparty_email_head.jsp</FileName>
<FilePath>webapp/thirdparty_email_head.jsp</FilePath>
<LineStart>118</LineStart>
<Snippet>      &lt;table width=&quot;100%&quot; border=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot;&gt;   
	  &lt;tr&gt;
        &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;HistoryDetails&quot;&gt;

          &lt;td class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3B4A5844D53AD962E158A2D1F6150255">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changeMapStatusManual.jsp line 112 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changeMapStatusManual.jsp</FileName>
<FilePath>webapp/systemtools/ittools/changeMapStatusManual.jsp</FilePath>
<LineStart>112</LineStart>
<Snippet>}
&lt;/script&gt;&lt;!-- target=&quot;searchbox&quot; --&gt;
&lt;s:form action=&quot;changeMapStatusManually&quot; method=&quot;post&quot;  name=&quot;RouteUowManuallyForm&quot; theme=&quot;simple&quot; target=&quot;searchbox&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
 &lt;table width=&quot;99%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="506E30119D783A88C3813197FC6F6626">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_verisign.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_verisign.jsp</FileName>
<FilePath>webapp/filter_verisign.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F3CA851D658745E277112054B8B677D4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ispgwHeader.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ispgwHeader.jsp</FileName>
<FilePath>webapp/businessTools/tools/ispgwHeader.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="21D66937BA5180BD592907179356A2F1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_FIOS.jsp line 273 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_FIOS.jsp</FileName>
<FilePath>webapp/view_FIOS.jsp</FilePath>
<LineStart>273</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/fiosqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BCE617F1487F81062798120F9283EB22">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribs_subservice_correction.jsp line 180 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribs_subservice_correction.jsp</FileName>
<FilePath>webapp/ribs_subservice_correction.jsp</FilePath>
<LineStart>180</LineStart>
<Snippet>&lt;tr&gt;
    &lt;td&gt;
        &lt;form name=&quot;SelectRadioButton&quot;&gt;
        &lt;table width=&quot;100%&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000000&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B74B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 1363 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>1363</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AC69148E8221511D7469D93947927E05">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusupdate.jsp line 376 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusupdate.jsp</FileName>
<FilePath>webapp/statusupdate.jsp</FilePath>
<LineStart>376</LineStart>
<Snippet>	&lt;/td&gt;
&lt;/tr&gt;
&lt;html:form action=&quot;/osselementrowdetails.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;tr&gt;
       &lt;td colspan=&quot;2&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3517042BF8C6B265A3FB10EC746E36D9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiAdminAddISP.jsp line 48 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiAdminAddISP.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiAdminAddISP.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;banGuiAdminAddISP&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

 &lt;table border=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="56F25C2D8FBD67682DCB8FD4EBECA619">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribsManagementTool.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribsManagementTool.jsp</FileName>
<FilePath>webapp/ribsManagementTool.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>&lt;body style=&quot;margin:0px; background-color:#E9F3FF;&quot;&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/ribsShellManagementTool.do&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8C2FD6B5A42A2EE88334009748AE13F3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_ispprov.jsp line 269 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_ispprov.jsp</FileName>
<FilePath>webapp/view_ispprov.jsp</FilePath>
<LineStart>269</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_ispprov.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A3C1E8884A661C97357F0F8C501C500B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_truckroll.jsp line 556 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_truckroll.jsp</FileName>
<FilePath>webapp/view_truckroll.jsp</FilePath>
<LineStart>556</LineStart>
<Snippet>   &lt;/body&gt;
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="45898FF37C3A6ED2C207B342E7A19147">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvPurchases.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvPurchases.jsp</FileName>
<FilePath>webapp/ppvPurchases.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>                        &lt;!--Basic Search Starts Here--&gt;
                       &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
					   &lt;html:form action=&quot;/ppvPurchases.do&quot; method=&quot;post&quot;&gt;
                          &lt;div class=&quot;st_searchcomp&quot;&gt;
                            Search Option:&lt;br /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8E1C8D1F92E705AEDAA68674730B5564">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_search_ref.jsp line 183 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_search_ref.jsp</FileName>
<FilePath>webapp/wmg_search_ref.jsp</FilePath>
<LineStart>183</LineStart>
<Snippet>&lt;/table&gt;
&lt;/html:form&gt;
&lt;html:form action=&quot;/wmgsearch.do&quot; method=&quot;post&quot;&gt;
  &lt;html:hidden property=&quot;refId&quot;/&gt;
  &lt;html:hidden property=&quot;id&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F05037AD51DAE8F27639BCFFAF81893B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at placeChangeOrdertool.jsp line 574 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>placeChangeOrdertool.jsp</FileName>
<FilePath>webapp/placeChangeOrdertool.jsp</FilePath>
<LineStart>574</LineStart>
<Snippet>		&lt;td width='20%' class=&quot;coabigfont&quot; align='left'&gt;&lt;strong&gt;SSP ACCT ID&lt;/strong&gt;&lt;/td&gt;
		
		&lt;form name=&quot;AcctForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;accountId&quot; value=&quot;&quot; /&gt;
		&lt;td class=&quot;coabigfont&quot; align='left' width='25%'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7D0C4A1626A4BB5542F4D984F112CE6C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vtp_failed_order.jsp line 64 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vtp_failed_order.jsp</FileName>
<FilePath>webapp/vtp_failed_order.jsp</FilePath>
<LineStart>64</LineStart>
<Snippet>&lt;div id=&quot;restag1&quot;&gt;
&lt;div id=&quot;restag2&quot;&gt; 
&lt;form name=&quot;EmailEventDetailsForm&quot; name=&quot;EmailEventDetailsForm&quot; action=&quot;/emailEventDetails.action?requestType=GET_DETAILS&quot; method=&quot;post&quot; target = &quot;displayEmailInfo&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;searchType&quot; value=&quot;mon&quot; id=&quot;mon&quot;/&gt;
&lt;input type=&quot;hidden&quot; hidden name=&quot;searchValue&quot; value='&lt;bean:write name=&quot;VTP_FAILED_ORDER&quot; property=&quot;mon&quot;/&gt;' id=&quot;searchValueId&quot; size=&quot;20&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="666D0C1B19A7E45B2F81801379039030">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutSDMPCorrect.jsp line 415 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutSDMPCorrect.jsp</FileName>
<FilePath>webapp/OVFalloutSDMPCorrect.jsp</FilePath>
<LineStart>415</LineStart>
<Snippet>&lt;/HTML&gt;
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5172E4F62F403F0A156AB995FDB73BBA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogGUIProcessorStatus.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogGUIProcessorStatus.jsp</FileName>
<FilePath>webapp/moggui/mogGUIProcessorStatus.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
              &lt;html:form action=&quot;/mogProcessorStatus.do&quot;&gt;
              &lt;!--Search Table Starts Here--&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="46FDD25702BEE54117E94ABCCE10DF30">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_icare.jsp line 473 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_icare.jsp</FileName>
<FilePath>webapp/view_icare.jsp</FilePath>
<LineStart>473</LineStart>
<Snippet>    &lt;/table&gt;
    &lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/icareQueueDetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CF2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1772 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1772</LineStart>
<Snippet>
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="27AD2CA043F86C294ADF435C08282868">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at changeAcctSvcAddress.jsp line 237 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>changeAcctSvcAddress.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/changeAcctSvcAddress.jsp</FilePath>
<LineStart>237</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;chgAcctSvcAddress&quot; name=&quot;ChgAcctSvcAddressFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F39103066EBC2F8D8F8BBB6ECEF5F89A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_Botb.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_Botb.jsp</FileName>
<FilePath>webapp/filter_Botb.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap botb::&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CF3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1789 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1789</LineStart>
<Snippet>
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C1180ED7551E5509714B0189CCABA016">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addsystemretry.jsp line 113 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addsystemretry.jsp</FileName>
<FilePath>webapp/addsystemretry.jsp</FilePath>
<LineStart>113</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;AddForm&quot;&gt;
	&lt;table width=&quot;710&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
		&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="80E0CA692AC75169E1AA167637CF76B2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_onebill.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_onebill.jsp</FileName>
<FilePath>webapp/filter_onebill.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterErrorCode&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ERRORCODE)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;background3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8879C787561FC870AE7C8AEA7C525C95">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vis_hold.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vis_hold.jsp</FileName>
<FilePath>webapp/fallout_vis_hold.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot;&gt;
	&lt;!-- COA Look and Feel By Sanjay --&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="74103052F0CBBFFE0E09B85A12C7685F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_iCredit.jsp line 218 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_iCredit.jsp</FileName>
<FilePath>webapp/view_iCredit.jsp</FilePath>
<LineStart>218</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_iCredit.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA0F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 850 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>850</LineStart>
<Snippet>&lt;!-- NOS Retirement Vinay End --&gt;
&lt;!-- Added by Neha for PZ1 postcard fallout correction starts --&gt;
&lt;html:form action=&quot;/langIndCorrection.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt; 
&lt;html:hidden property=&quot;actionInfo&quot; value=&quot;&quot;/&gt; 
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9EE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 263 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>263</LineStart>
<Snippet>	  ) {
  %&gt;
	&lt;form action=&quot;fallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=hidden name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D2BF34CBE29A7E27D78FCAAC50F1505B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeSheriffView.jsp line 196 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeSheriffView.jsp</FileName>
<FilePath>webapp/bbeSheriffView.jsp</FilePath>
<LineStart>196</LineStart>
<Snippet>				&lt;!-- To Show Content Type Starts --&gt;
				&lt;td valign=&quot;top&quot;&gt;
				&lt;html:form  action=&quot;/usageOrderSearch.do&quot; method=&quot;post&quot;&gt;
				&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
					&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA02826849710B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 616 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>616</LineStart>
<Snippet>                            &lt;!-- &lt;VDSI:1281:BTN_Hyperlink_Search:Z919003:29072008:START&gt; --&gt;
							&lt;td valign=&quot;top&quot;&gt;
							 &lt;form name=&quot;billingTelForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;billingTN&quot; value=&quot;&quot;/&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0386542CC9AEB1D4BA479FA74383ED24">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_disconnect1.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_disconnect1.jsp</FileName>
<FilePath>webapp/filter_disconnect1.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7AD8763AD5BC146AF682C48550C54860">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_manual_intervention.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_manual_intervention.jsp</FileName>
<FilePath>webapp/filter_manual_intervention.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1039559142A65F6E769E935372CA9237">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at account_only_change_view.jsp line 1261 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>account_only_change_view.jsp</FileName>
<FilePath>webapp/account_only_change_view.jsp</FilePath>
<LineStart>1261</LineStart>
<Snippet> &lt;!-- VISION5 - R4 - Renuka- Ends --&gt;
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 343 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>343</LineStart>
<Snippet>  else if(isMapPresentForRuleEngineProcessing){
  %&gt;
  &lt;form action=&quot;fallout_others.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;%}else {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="512E2F140C6C9C2C7983BB01B14D3BD6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at holdempty.jsp line 325 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>holdempty.jsp</FileName>
<FilePath>webapp/holdempty.jsp</FilePath>
<LineStart>325</LineStart>
<Snippet>&lt;/table&gt;

&lt;html:form action=&quot;/hold_release.do&quot; method=&quot;post&quot; &gt; 
&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt; 
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4F6877BC502C2AC0DE2619758A3CBDD5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at postCacheReloading.jsp line 29 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>postCacheReloading.jsp</FileName>
<FilePath>webapp/systemtools/ittools/postCacheReloading.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;PostCacheReloadingForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="799E1AC3CCBDD632868E35867B73DD22">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massProfileLookup.jsp line 31 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massProfileLookup.jsp</FileName>
<FilePath>webapp/businessTools/tools/massProfileLookup.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;tr&gt;&lt;td width=&quot;100%&quot;&gt;
&lt;s:form method = &quot;post&quot; action=&quot;MassProfileLookup&quot; enctype=&quot;multipart/form-data&quot;&gt;

&lt;span&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4EB36F2CAA8A65B217E76165682593B7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at equipmentProfile.jsp line 511 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>equipmentProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/equipmentProfile.jsp</FilePath>
<LineStart>511</LineStart>
<Snippet>		&lt;div class=&quot;table_body_whtie equipment_profile_search_update&quot;&gt;
			&lt;div class=&quot;inline_block&quot;&gt;
				&lt;form name=&quot;eqpDisplayForm&quot; id=&quot;eqpDisplayForm&quot; action=&quot;EquipmentProfileretreive.action&quot; method=&quot;post&quot;&gt;
					&lt;span class=&quot;search_param_label&quot;&gt;SEARCH PARAMETER*&amp;nbsp;&amp;nbsp;&amp;nbsp;:&lt;/span&gt;
					&lt;span class=&quot;search_value&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 330 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>330</LineStart>
<Snippet>  else if(mapId!=null&amp;&amp;((Constants.VNM_MAP_ID.equals(mapId))||(Constants.VOD_MAP_ID.equals(mapId))||(Constants.CMPSETTLEMENT_MAP_ID.equals(mapId))||(Constants.USAGESETTLEMENT_MAP_ID.equals(mapId)))||Constants.SHERIFF_MAP_ID.equals(mapId)){  
  %&gt;
  &lt;form action=&quot;fallout_sdmpmig.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;SUBMIT&quot;/&gt;
  &lt;!--SDMP Mig ends--&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5395193CEF98B650E2E28C989F8BBE23">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at erateDiscountAdd.jsp line 218 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>erateDiscountAdd.jsp</FileName>
<FilePath>webapp/businessTools/tools/erateDiscountAdd.jsp</FilePath>
<LineStart>218</LineStart>
<Snippet>&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
	 &lt;tr&gt;
	 &lt;s:form action=&quot;ERateDisc_addDiscount.action&quot; id=&quot;addForm&quot;&gt;
	 &lt;s:hidden name=&quot;erateAdd&quot; id=&quot;jsonString&quot;/&gt;
	 &lt;s:hidden name=&quot;visionId&quot; id=&quot;visionIdAdd&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="91F486523A9ECA0A7CB99B0BD96BD34E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at harmonyOrder.jsp line 129 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>harmonyOrder.jsp</FileName>
<FilePath>webapp/harmonyOrder.jsp</FilePath>
<LineStart>129</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/unityManagement.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9E7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 210 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>210</LineStart>
<Snippet>	  if( mapId != null &amp;&amp; (mapId.equals(Constants.OB_MAP_ID) || mapId.equals(Constants.LEC_MAP_ID) || mapId.equals(Constants.RAF_MAP_ID) )) {
	%&gt;
	&lt;form action=&quot;fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;obMessageType&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D8D57EBEEADA502D11C4236D5BCDF40B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_pp_hold.jsp line 90 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_pp_hold.jsp</FileName>
<FilePath>webapp/fallout_pp_hold.jsp</FilePath>
<LineStart>90</LineStart>
<Snippet>  
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
    &lt;html:form action=&quot;/fallout_pp_detail.do&quot; method=&quot;post&quot;&gt;
	&lt;!-- COA Look and Feel By Sanjay --&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="441134EB696911E9907A97E863B0AC4F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at visionRealTimeCTGCall.jsp line 102 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>visionRealTimeCTGCall.jsp</FileName>
<FilePath>webapp/businessTools/tools/visionRealTimeCTGCall.jsp</FilePath>
<LineStart>102</LineStart>
<Snippet>&lt;/head&gt;

&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E73883F3025017560665C960EB824539">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspheader.jsp line 249 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspheader.jsp</FileName>
<FilePath>webapp/sspheader.jsp</FilePath>
<LineStart>249</LineStart>
<Snippet>		return;
	}
  jQuery('&lt;form&gt;', {
        'action': 'headerSearch.do',
        'method': 'post'</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D9D8E860A76FF6612F55722089A48092">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspvnVisionDetails.jsp line 33 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspvnVisionDetails.jsp</FileName>
<FilePath>webapp/sspvision/sspvnVisionDetails.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>	&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;3&quot; bgcolor=&quot;#ffffff&quot;&gt;
	 &lt;tr&gt;
	  &lt;form name=&quot;SearchForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
	  &lt;td width=&quot;50%&quot;&gt;&lt;div&gt;&lt;strong&gt;Vision Customer ID:&lt;/strong&gt;&lt;/div&gt;&lt;/td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7FB4FCD7828F9B2134E571F15E7F1DC3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addbulletin.jsp line 124 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addbulletin.jsp</FileName>
<FilePath>webapp/addbulletin.jsp</FilePath>
<LineStart>124</LineStart>
<Snippet>                          &lt;/table&gt;
                         &lt;/form&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/bulletin.do&quot;&gt;
	 &lt;html:hidden property=&quot;startdate&quot;/&gt;
	 &lt;html:hidden property=&quot;expirydate&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C786321BE85CBBE7F951A04DE99D7153">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at add_correction.jsp line 1284 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>add_correction.jsp</FileName>
<FilePath>webapp/add_correction.jsp</FilePath>
<LineStart>1284</LineStart>
<Snippet>
&lt;/html:form&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/namecorrection.do&quot; onsubmit='return false;'&gt;

   &lt;div id=&quot;nameinfo&quot; style='position:absolute;visibility:hidden'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="31E75AFC5288117CBE9C547756F16A24">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppg_fallout_vis_hold.jsp line 62 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppg_fallout_vis_hold.jsp</FileName>
<FilePath>webapp/ssppg_fallout_vis_hold.jsp</FilePath>
<LineStart>62</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/ssppgFallout_vis_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C5D0D1CA8BCDAB512891D6D6F120094E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massuploadtrack.jsp line 26 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massuploadtrack.jsp</FileName>
<FilePath>webapp/massuploadtrack.jsp</FilePath>
<LineStart>26</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massuploadtrack.do&quot; target=&quot;displayMsg&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; style=&quot;border-collapse: collapse&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="00D0E4BC0ADF8773AC4215C0CB8CE8A7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVPPCorrection.jsp line 898 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVPPCorrection.jsp</FileName>
<FilePath>webapp/OVPPCorrection.jsp</FilePath>
<LineStart>898</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/ovduedatetncorrection.do&quot;&gt;

   &lt;div id=&quot;potsinfo&quot; style='position:absolute;visibility:hidden'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F43552341920F123DBBDB0DA7EF1F4F3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at searchtemplate.jsp line 1573 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>searchtemplate.jsp</FileName>
<FilePath>webapp/searchtemplate.jsp</FilePath>
<LineStart>1573</LineStart>
<Snippet>

&lt;html:form method=&quot;post&quot; action=&quot;/dynamicemailsearch.do&quot; target=&quot;searchbox&quot;&gt;

</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B749">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 1328 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>1328</LineStart>
<Snippet>
&lt;!-- Added by shraddha for due date history --&gt;
&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65404B9B78B669CD35EED40983F6C57F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_correct_billing.jsp line 69 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_correct_billing.jsp</FileName>
<FilePath>webapp/pop_correct_billing.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;form name=&quot;BillingCorrect&quot; &gt;
&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
                            </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="67DA93C266045A419C41AFB082EF1AC6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at add_report.jsp line 356 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>add_report.jsp</FileName>
<FilePath>webapp/add_report.jsp</FilePath>
<LineStart>356</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/queuecop.do&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="634A267041B4C7E5414403D33EC80514">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at adptStubMapping.jsp line 86 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>adptStubMapping.jsp</FileName>
<FilePath>webapp/businessTools/tools/adptStubMapping.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;adptStubMappingForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E4749E56A3D1CB40F5C19F937B2F92A6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_cashcard.jsp line 291 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_cashcard.jsp</FileName>
<FilePath>webapp/view_cashcard.jsp</FilePath>
<LineStart>291</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E354601C379ADB2D4AD7061CF5AB1039">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at icareNotes.jsp line 372 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>icareNotes.jsp</FileName>
<FilePath>webapp/icareNotes.jsp</FilePath>
<LineStart>372</LineStart>
<Snippet>

		&lt;html:form action=&quot;/sourceroute.do&quot; method=&quot;post&quot;&gt;
        &lt;/html:form&gt;
        &lt;html:form action=&quot;/IcareOrderUpdate.do&quot; method=&quot;post&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8AFAD100EDC04811DBE0D1AB33B9CF4C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_addRemoveaccess.jsp line 460 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_addRemoveaccess.jsp</FileName>
<FilePath>webapp/admin_addRemoveaccess.jsp</FilePath>
<LineStart>460</LineStart>
<Snippet>                        &lt;!------------------Remove Access Starts------------------&gt;
                        &lt;div id=&quot;div3&quot; class=&quot;tab&quot;&gt;
						&lt;form id=&quot;removeaccessform&quot; action=&quot;/sspflow/usermanagement.do&quot; method=&quot;post&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; id=&quot;requestType&quot; value=&quot;&quot; /&gt;
                        &lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;3&quot; style=&quot;background-color: #c8c8c8&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C928A17520A46FDFA9C145A68C08667">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_ribs.jsp line 397 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_ribs.jsp</FileName>
<FilePath>webapp/order_view_ribs.jsp</FilePath>
<LineStart>397</LineStart>
<Snippet>   &lt;tr&gt;
   &lt;td&gt;
   &lt;html:form action=&quot;/ribsfilter.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
    &lt;html:hidden property=&quot;mapId&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPID) %&gt;&quot;/&gt;
    &lt;html:hidden property=&quot;mapVersion&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_MAPVER) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3774D70B17FECE5A2C1CCD08C44EE1F1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgfallout_release_include.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgfallout_release_include.jsp</FileName>
<FilePath>webapp/ssppgfallout_release_include.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>        }
&lt;/script&gt;
&lt;html:form action=&quot;/ssppgReleaseOrReleaseAll.do&quot; method=&quot;post&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot;/&gt;
	&lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AE5186CA6BAAC8C69200C8A00CA39D3B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at detail_ChangeHistory.jsp line 33 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>detail_ChangeHistory.jsp</FileName>
<FilePath>webapp/detail_ChangeHistory.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>
 &lt;logic:present name=&quot;DISPLAY_CHANGE_DETAILS_RESULTS&quot;&gt;
 &lt;form name=&quot;SearchOrder&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
 &lt;input type=&quot;hidden&quot; name=&quot;orderId&quot; value=&quot;&quot; /&gt;
 &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FE39D527068A865327606993ACD95A19">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ivappreports.jsp line 221 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ivappreports.jsp</FileName>
<FilePath>webapp/ivappreports.jsp</FilePath>
<LineStart>221</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FF3143E0F337DD2C4C3359739C44F6DF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at VW_main_report.jsp line 96 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>VW_main_report.jsp</FileName>
<FilePath>webapp/VW_main_report.jsp</FilePath>
<LineStart>96</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form action=&quot;/vwreport.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="46FDD25702BEE54117E94ABCCE10DF31">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_icare.jsp line 485 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_icare.jsp</FileName>
<FilePath>webapp/view_icare.jsp</FilePath>
<LineStart>485</LineStart>
<Snippet>      &lt;/html:form&gt;
      &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B08234C50E91D2B55C8DC37EA1A5C480">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stn_reg_tool.jsp line 65 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stn_reg_tool.jsp</FileName>
<FilePath>webapp/stn_reg_tool.jsp</FilePath>
<LineStart>65</LineStart>
<Snippet>

&lt;form name=&quot;STNRegistrationForm&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;inputType&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;inputValue&quot; value=&quot;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4046BA0AA5905B713244D72294C14E8E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_FVRIBS.jsp line 278 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_FVRIBS.jsp</FileName>
<FilePath>webapp/view_FVRIBS.jsp</FilePath>
<LineStart>278</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/fvribsqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DE7B6811E929939E19DC5E00F988EFC1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_sdmp_hold.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_sdmp_hold.jsp</FileName>
<FilePath>webapp/fallout_sdmp_hold.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/fallout_sdmp_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="942CEC1670F97DD7884B3C823EB5CE72">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at genericsearch.jsp line 215 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>genericsearch.jsp</FileName>
<FilePath>webapp/genericsearch.jsp</FilePath>
<LineStart>215</LineStart>
<Snippet>

&lt;html:form method=&quot;post&quot; action=&quot;/osssearch&quot; target=&quot;searchbox&quot;&gt;
	&lt;tr&gt;
		&lt;td colspan=&quot;2&quot; width=&quot;20%&quot; bgcolor=&quot;#99EFFF&quot; class=&quot;background1&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C724A3BFBA262D3370AD9D006756E23A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at orderDiagnosisNew_searchList.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>orderDiagnosisNew_searchList.jsp</FileName>
<FilePath>webapp/orderDiagnosisNew_searchList.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>

&lt;html:form action=&quot;/orderDiagnosisNew.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;orderId&quot;/&gt;
&lt;html:errors/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="34E35C26C10C4F1A701DFAC965E22DD0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at releaseDateUpdate.jsp line 225 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>releaseDateUpdate.jsp</FileName>
<FilePath>webapp/releaseDateUpdate.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt; 
	&lt;html:form method=&quot;post&quot; action=&quot;/massRouteManualManagement.do&quot; target=&quot;searchbox&quot;&gt;    
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9F5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 324 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>324</LineStart>
<Snippet>  }else if (Constants.REALTOR_REWARD_MAP_ID.equals(mapId) || Constants.NETFLIX_MAP_ID.equals(mapId) ) {
  %&gt;
  &lt;form action=&quot;fallout_others.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
       &lt;input type=hidden name=&quot;requestType&quot; value=&quot;SUBMIT&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 241 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>241</LineStart>
<Snippet>	  ) {
  %&gt;
	&lt;form action=&quot;ssppgFallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot; &gt;
	&lt;input type=hidden name=&quot;requestType&quot; value=&quot;requestsubmited&quot;&gt;
  &lt;%  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A3AB1026F3A565433AFA14BE6A9EEC8D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ispDetail.jsp line 122 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ispDetail.jsp</FileName>
<FilePath>webapp/ispDetail.jsp</FilePath>
<LineStart>122</LineStart>
<Snippet>&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;

 &lt;html:form method=&quot;post&quot; action=&quot;/ispDetail.do&quot; target=&quot;_self&quot;&gt; 

  &lt;table width=&quot;75%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; class=&quot;workflow&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D2C03384669BEF43DB5B472D2131ECB9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeChangeOrders.jsp line 190 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeChangeOrders.jsp</FileName>
<FilePath>webapp/routeChangeOrders.jsp</FilePath>
<LineStart>190</LineStart>
<Snippet> &lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
   &lt;html:form method=&quot;post&quot; action=&quot;/routeChangeOrder.do&quot;
 target=&quot;searchbox&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="392194B7F96FD5DEDC1E45AEA706F860">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_billing.jsp line 350 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_billing.jsp</FileName>
<FilePath>webapp/fallout_billing.jsp</FilePath>
<LineStart>350</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/bill_correction.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F8BF6ABC235E0BEB9B4487653A51B4D1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_billing_ats_submit.jsp line 50 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_billing_ats_submit.jsp</FileName>
<FilePath>webapp/pop_billing_ats_submit.jsp</FilePath>
<LineStart>50</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;form name=&quot;SubmitForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;421&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B169B57C993235466018FA0E03A84486">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerAdminCreatezone.jsp line 200 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerAdminCreatezone.jsp</FileName>
<FilePath>webapp/analyzerAdminCreatezone.jsp</FilePath>
<LineStart>200</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9EA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 230 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>230</LineStart>
<Snippet>  else if ( mapId != null &amp;&amp; mapId.equals(&quot;11&quot;) ) {
  %&gt;
    &lt;form action=&quot;fallout_pp_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;input type=hidden name=&quot;requestType&quot; value=&quot;lqcsrrequestsubmited&quot;&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D36D6295F6AE3BFF42B82CA298601914">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzeraccounthistory.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzeraccounthistory.jsp</FileName>
<FilePath>webapp/analyzeraccounthistory.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>&lt;body&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/getAccountHistory.do&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; id=&quot;table1&quot; height=&quot;100%&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9A8F7EB93B8FF8C32F2FCA7B54793768">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at orderingUpdatesDetails.jsp line 63 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>orderingUpdatesDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/orderingUpdatesDetails.jsp</FilePath>
<LineStart>63</LineStart>
<Snippet>		                &lt;tr&gt;
		                  &lt;td valign=&quot;top&quot;&gt;
                         &lt;s:form id=&quot;OrderingUpdatesForm&quot; action=&quot;/orderingUpdates.action&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
                          &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; id=&quot;table114&quot;&gt;
		                    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B8135E134501F6DB6EF07576FBBACC7D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at onlineProfile.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>onlineProfile.jsp</FileName>
<FilePath>webapp/businessTools/tools/onlineProfile.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>		&lt;div class=&quot;table_body_whtie online_profile_search_update&quot;&gt;
			&lt;div class=&quot;inline_block&quot;&gt;
				&lt;form name=&quot;onlineprofileDisplayForm&quot; id=&quot;onlineprofileDisplayForm&quot; action=&quot;OnlineProfileRetrieve.action&quot; method=&quot;post&quot;&gt;
					&lt;span class=&quot;search_param_label&quot;&gt;SEARCH PARAMETER*&amp;nbsp;&amp;nbsp;&amp;nbsp;:&lt;/span&gt;
					&lt;span class=&quot;search_value&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AC69148E8221511D7469D93947927E04">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusupdate.jsp line 315 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusupdate.jsp</FileName>
<FilePath>webapp/statusupdate.jsp</FilePath>
<LineStart>315</LineStart>
<Snippet>

&lt;html:form method=&quot;post&quot; action=&quot;/osssearch&quot; target=&quot;searchbox&quot;&gt;
&lt;tr&gt;&lt;td&gt;
   &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1039559142A65F6E769E935372CA9233">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at account_only_change_view.jsp line 510 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>account_only_change_view.jsp</FileName>
<FilePath>webapp/account_only_change_view.jsp</FilePath>
<LineStart>510</LineStart>
<Snippet>                            &lt;!-- &lt;VDSI:1281:BTN_Hyperlink_Search:Z919003:29072008:START&gt; --&gt;
							&lt;td valign=&quot;top&quot;&gt;
							 &lt;form name=&quot;billingTelForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;billingTN&quot; value=&quot;&quot;/&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BBB9C4D480433D4E112E53EDF4917EF4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at eventLogs.jsp line 236 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>eventLogs.jsp</FileName>
<FilePath>webapp/businessTools/tools/eventLogs.jsp</FilePath>
<LineStart>236</LineStart>
<Snippet>%&gt;
	&lt;iframe id=&quot;iframeDetailMsg&quot; name=&quot;iframeDetailMsg&quot; src=&quot;iframeLoading.html&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; frameborder=&quot;0&quot; scrolling=&quot;auto&quot; roresize style=&quot;background-color:white; height:500px; border:1px solid #336699; width:800px; position:absolute; z-index=10000; display:none;&quot;&gt;&lt;/iframe&gt;
	&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
&lt;!-- hidden fields --&gt;
&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8583BBEB07D963BBEEC335C46D7890EB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stubStatus.jsp line 97 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stubStatus.jsp</FileName>
<FilePath>webapp/adapterTools/stubStatus.jsp</FilePath>
<LineStart>97</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;StatusDTO&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

 &lt;table border=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6E3B3565C78C2025AA2CF9AD6C04E4BA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_myApprovals.jsp line 395 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_myApprovals.jsp</FileName>
<FilePath>webapp/admin_myApprovals.jsp</FilePath>
<LineStart>395</LineStart>
<Snippet>

&lt;form id=&quot;myApprovalsform&quot; action=&quot;usermanagement.do&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestId&quot; value=&quot;&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;appVzId&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="59632350D6AA19E088E9103783D4B0E5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_arbor.jsp line 762 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_arbor.jsp</FileName>
<FilePath>webapp/order_view_arbor.jsp</FilePath>
<LineStart>762</LineStart>
<Snippet>   &lt;/html:form&gt;
   
   &lt;html:form action=&quot;/bill_correction.do&quot; method=&quot;post&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;onlySubmit&quot;/&gt;
      &lt;html:hidden property=&quot;pieIds&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A59C605A7DEAFFBEE5D9AC3410620955">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at LECADXErrorTool.jsp line 37 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LECADXErrorTool.jsp</FileName>
<FilePath>webapp/LECADXErrorTool.jsp</FilePath>
<LineStart>37</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;body&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/searchResult.do&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;table width=&quot;98%&quot; align=&quot;center&quot; bgcolor=&quot;#FFFFFF&quot; style=&quot;border:solid 1px #999999;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="417CC84010B44F7CD07E5D3B1D173386">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massFallout.jsp line 31 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massFallout.jsp</FileName>
<FilePath>webapp/businessTools/tools/massFallout.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;massFallout&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA0C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 816 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>816</LineStart>
<Snippet>%&gt; 
&lt;!-- Start - add for video address update --&gt; 
&lt;html:form action=&quot;/videoaddresscorrection.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt; 
&lt;html:hidden property=&quot;actionInfo&quot; value=&quot;&quot;/&gt; 
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3E9C095DC25837991F415742B2C14BEA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at thirdparty_email_content.jsp line 72 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>thirdparty_email_content.jsp</FileName>
<FilePath>webapp/thirdparty_email_content.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>&lt;logic:present name=&quot;CUSTOMERNOTIFICATION&quot;&gt;
&lt;logic:iterate id=&quot;email&quot; name=&quot;CUSTOMERNOTIFICATION&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/resendemail.do&quot;&gt;
&lt;!--  MR98.3 Provide Email Resend functionality to third party Added By Sanjay Strats --&gt;
&lt;input type=&quot;hidden&quot; name=&quot;HISTORYEMAIL_HISTORY_PIEID&quot; value=&quot;&lt;%=request.getParameter(&quot;HISTORYEMAIL_HISTORY_PIEID&quot;)%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2F5710EDBD0CDD262F42763090349D6E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusAdmin.jsp line 138 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusAdmin.jsp</FileName>
<FilePath>webapp/statusAdmin.jsp</FilePath>
<LineStart>138</LineStart>
<Snippet>        &lt;tr&gt; 
          &lt;td class=&quot;background4&quot;&gt; 
		&lt;html:form method=&quot;post&quot; action=&quot;/statusadmin.do&quot; target=&quot;searchbox&quot;&gt;                  
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;119&quot;&gt;
              &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="89810C4E322A9084AEF178E6DAF3C80D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at emailTool.jsp line 186 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>emailTool.jsp</FileName>
<FilePath>webapp/emailTool.jsp</FilePath>
<LineStart>186</LineStart>
<Snippet>
&lt;!-- Added by Shital START--&gt;	
 &lt;html:form method=&quot;post&quot; action=&quot;/emailTool.do&quot; onSubmit=&quot;javascript:submitForm()&quot; &gt;
&lt;!-- Added by Shital END--&gt;	
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="232113BD0EAA1E631E46104AFC0922E2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ValidationEngine.jsp line 137 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ValidationEngine.jsp</FileName>
<FilePath>webapp/ValidationEngine.jsp</FilePath>
<LineStart>137</LineStart>
<Snippet>  &lt;/div&gt;
  &lt;/div&gt;
  &lt;s:form method = &quot;post&quot; action=&quot;validationEngine&quot; enctype=&quot;multipart/form-data&quot;&gt;
  &lt;s:hidden name=&quot;triggerForm&quot;&gt;&lt;/s:hidden&gt;
  &lt;div class=&quot;row row-centered&quot; id=&quot;panel2&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BAE65187C537FCC275E8609D126E82A0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_westdsl.jsp line 18 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_westdsl.jsp</FileName>
<FilePath>webapp/filter_westdsl.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>&lt;!-- LOB filter- Ends here --&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4F0B0E8CDD153F407BA099A9048ECBE2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiNewOrder.jsp line 393 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiNewOrder.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiNewOrder.jsp</FilePath>
<LineStart>393</LineStart>
<Snippet>&lt;iframe id=&quot;iframeDetailMsg&quot; name=&quot;iframeDetailMsg&quot; src=&quot;iframeLoading.html&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; frameborder=&quot;0&quot; scrolling=&quot;auto&quot; roresize style=&quot;background-color: white;height:500px; border:1px solid #336699; width:700px; position:absolute; z-index=10000; display:none;&quot;&gt;&lt;/iframe&gt;

&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="36208EDB4E7A352DA2C2DA215DCDB660">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_notes_failure.jsp line 41 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_notes_failure.jsp</FileName>
<FilePath>webapp/fallout_notes_failure.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;changeImage();MM_preloadImages('images/buttons_submit_disabled.gif');&quot;&gt;
		&lt;%if(mapId != null &amp;&amp; ((mapId.equals(Constants.BAAIS_MAP_ID)) || (mapId.equals(Constants.UNITY_MAP_ID)) || (mapId.equals(Constants.VADIARBOR_MAP_ID)) )) { %&gt;
    &lt;form action=&quot;vadiwest_resubmit.do&quot; method=&quot;post&quot;&gt;
	&lt;/form&gt;
  &lt;%</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA84B594EC7EE65992CABB37034FBA11">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest.jsp line 901 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest.jsp</FileName>
<FilePath>webapp/fallout_volwest.jsp</FilePath>
<LineStart>901</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="59632350D6AA19E088E9103783D4B0E7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_arbor.jsp line 778 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_arbor.jsp</FileName>
<FilePath>webapp/order_view_arbor.jsp</FilePath>
<LineStart>778</LineStart>
<Snippet>  &lt;/body&gt;
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
                                        &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B6AF72F10A443E8BE393BC8F9FC312E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at NewBQTHistoryTool.jsp line 76 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>NewBQTHistoryTool.jsp</FileName>
<FilePath>webapp/tools/NewBQTHistoryTool.jsp</FilePath>
<LineStart>76</LineStart>
<Snippet>								&lt;td colspan=&quot;4&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; height=&quot;2&quot;&gt;&lt;/td&gt;
							&lt;/tr&gt;
							&lt;form name=&quot;NewBQTHistoryForm&quot; method=&quot;post&quot; target=&quot;bqt&quot;&gt;
							&lt;input type=&quot;hidden&quot; name=&quot;actionType&quot; value=&quot;&quot;/&gt;
							&lt;tr class=&quot;background1&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D300258FCF13C129F5A8F127DE60A796">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stnRegister.jsp line 90 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stnRegister.jsp</FileName>
<FilePath>webapp/stnRegister.jsp</FilePath>
<LineStart>90</LineStart>
<Snippet>&lt;body&gt;
&lt;jsp:include page=&quot;widgets_header.jsp&quot;&gt;&lt;/jsp:include&gt;
&lt;html:form name=&quot;stnForm&quot; action=&quot;/sharethenetwork&quot; type=&quot;com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.StnRegisterForm&quot;
	method=&quot;post&quot;&gt;
	&lt;div id=&quot;welcomeDiv&quot; &gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="21BDFF908B9629CB1BE77D771E0E97A8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bizsvcintf.jsp line 24 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bizsvcintf.jsp</FileName>
<FilePath>webapp/bizsvcintf.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>
&lt;html:errors/&gt;
&lt;html:form action=&quot;/bizsvcintf.do&quot; method=&quot;post&quot;&gt;
&lt;html:select property=&quot;requestKey&quot;&gt;
	&lt;html:options collection=&quot;ALL_KEYS&quot; property=&quot;value&quot; labelProperty=&quot;label&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="30DFC293-D2B8-463A-9952-257A44B5339C" iid="6FCCFB56BF151B916BCD218321F3CE06">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The HTTP request at searchtemplate.jsp line 174 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>searchtemplate.jsp</FileName>
<FilePath>webapp/searchtemplate.jsp</FilePath>
<LineStart>174</LineStart>
<Snippet>			var url = &quot;getEmailVersionsToCompare.jsp?refId=&quot;;
			url += eventId+'&amp;crap='+randomVal;
			http.open(&quot;GET&quot;, url, true);
			http.onreadystatechange = fetchEmailVersionValues;
			http.send(null);</Snippet>
<TargetFunction>FunctionPointerCall()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="79CFF574708518013EDC29BFCEF142C0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massLecCreateTool.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massLecCreateTool.jsp</FileName>
<FilePath>webapp/businessTools/tools/massLecCreateTool.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;s:form method = &quot;post&quot; action=&quot;massLECCreate&quot; enctype=&quot;multipart/form-data&quot;&gt;

&lt;span&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5E7AE32BE1166AF3C52DEDCB50C65D89">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at btnCorrection.jsp line 278 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>btnCorrection.jsp</FileName>
<FilePath>webapp/btnCorrection.jsp</FilePath>
<LineStart>278</LineStart>
<Snippet>	&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
	&lt;tr&gt;
		&lt;td&gt;&lt;FORM name=&quot;excelFrm&quot; ENCTYPE='multipart/form-data' method='POST'  action=&quot;&quot; target=&quot;displayMsg3&quot;&gt;
			  &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000099&quot;&gt;
                  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B7794ABFD2F7A710EA1E8D36F1C0C8B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at realTimeLQ.jsp line 88 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>realTimeLQ.jsp</FileName>
<FilePath>webapp/businessTools/tools/realTimeLQ.jsp</FilePath>
<LineStart>88</LineStart>
<Snippet>&lt;iframe id=&quot;iframeDetailMsg&quot; name=&quot;iframeDetailMsg&quot; src=&quot;iframeLoading.html&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; frameborder=&quot;0&quot; scrolling=&quot;auto&quot; roresize style=&quot;height:500px; border:1px solid #336699; width:700px; position:absolute; z-index=10000; display:none;&quot;&gt;&lt;/iframe&gt;

&lt;form id=&quot;theForm&quot; name=&quot;theForm&quot; method=&quot;post&quot; action=&quot;&quot; target=&quot;iframeDetailMsg&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;contentXML&quot; value=&quot;&quot;/&gt;
&lt;/form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4ACFC0A176E2BD79D39D7D7E69F1F2F7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at admin_removeagentdetails.jsp line 96 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>96</LineStart>
<Snippet>

&lt;form id=&quot;removeagentdetailsform&quot; action=&quot;/sspflow/usermanagement.do&quot; method=&quot;post&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;input type=&quot;hidden&quot; name=&quot;resourceIds&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B1D4518D3F0FE3524277342A499C9B2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at supervisor_usage_queue.jsp line 555 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>supervisor_usage_queue.jsp</FileName>
<FilePath>webapp/supervisor_usage_queue.jsp</FilePath>
<LineStart>555</LineStart>
<Snippet>
	&lt;!--VDSI - Sarvani - Release/Release All button in Supervisor Queue page for HBI, VW, POTS, Presale--&gt;
	&lt;html:form action=&quot;/queuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CAD2989FD612FFC18C0EEF337BE9DCBE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeCorrection.jsp line 52 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeCorrection.jsp</FileName>
<FilePath>webapp/bbeCorrection.jsp</FilePath>
<LineStart>52</LineStart>
<Snippet>//	var link = 'headerSearch.do?searchInput='+orderID;
//	window.location.href = link;
	  jQuery('&lt;form&gt;', {
        'action': 'headerSearch.do',
        'method': 'post'</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="51E6E77AD4E6C6C302B15539BF2EF469">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_parallelpots_speed.jsp line 8 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_parallelpots_speed.jsp</FileName>
<FilePath>webapp/filter_parallelpots_speed.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95119C449BCA3B39CACDB6C2B9F80A48">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_presale.jsp line 14 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_presale.jsp</FileName>
<FilePath>webapp/filter_presale.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>&lt;bean:define id='isProdFilterRequired' value='&lt;%= (ConfigParamsUtil.getValue(Constants.IS_PROD_FILTER_REQUIRED,&quot;0&quot;))%&gt;'/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4FD1E1CE218F540F9330C565C252B477">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppg_ovbridge.jsp line 558 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppg_ovbridge.jsp</FileName>
<FilePath>webapp/ssppg_ovbridge.jsp</FilePath>
<LineStart>558</LineStart>
<Snippet>&lt;/div&gt; &lt;!--restag1--&gt;

&lt;html:form action=&quot;/ssppgOVResult.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;

&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="08DC2230ED8E3AB8711377F18A456939">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerReportsMetrics.jsp line 486 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerReportsMetrics.jsp</FileName>
<FilePath>webapp/analyzerReportsMetrics.jsp</FilePath>
<LineStart>486</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FB243F2A80BB855F186B1EB6E7E06184">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_vtp_fallouts.jsp line 307 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_vtp_fallouts.jsp</FileName>
<FilePath>webapp/view_vtp_fallouts.jsp</FilePath>
<LineStart>307</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/visqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65BB0A95A9ACD889004CCDC3E5BA3385">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_description.jsp line 272 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_description.jsp</FileName>
<FilePath>webapp/fallout_description.jsp</FilePath>
<LineStart>272</LineStart>
<Snippet>                  &lt;/table&gt;
                  &lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
             &lt;html:form action=&quot;/bill_correction.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
	       &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
	       &lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1039559142A65F6E769E935372CA9235">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at account_only_change_view.jsp line 1231 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>account_only_change_view.jsp</FileName>
<FilePath>webapp/account_only_change_view.jsp</FilePath>
<LineStart>1231</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E80D48AD3C3F94CCD63CE1FEFC08E4CA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at cancelOrder.jsp line 46 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>cancelOrder.jsp</FileName>
<FilePath>webapp/cancelOrder.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>

&lt;form name = &quot;cancelForm&quot; action = &quot;/sspflow/workCancel.jsp&quot; method = &quot;post&quot;&gt;

&lt;table&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 231 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>231</LineStart>
<Snippet>  else if (mapId.equals(Constants.DLRETENTION_MAP_ID)) {
  %&gt;
        &lt;form action=&quot;sspfallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot; &gt;
        &lt;input type=hidden name=&quot;requestType&quot; value=&quot;dlDispCode&quot;&gt;
        &lt;input type=hidden name=&quot;requestAction&quot; value=&quot;dlDispCode:submit&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FD4CE8B4A67550496ADCE36FFEDB0D16">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusAgeSupervisor.jsp line 206 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusAgeSupervisor.jsp</FileName>
<FilePath>webapp/statusAgeSupervisor.jsp</FilePath>
<LineStart>206</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/statusagesupervisor.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6D8E307684438D4CE56077CE36300AD4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvProducts.jsp line 171 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvProducts.jsp</FileName>
<FilePath>webapp/ppvProducts.jsp</FilePath>
<LineStart>171</LineStart>
<Snippet>                        &lt;!--Basic Search Starts Here--&gt;
                       &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
					   &lt;html:form action=&quot;/ppvcatalog.do&quot; method=&quot;post&quot;&gt;
					   &lt;html:hidden property=&quot;requestLink&quot; value=&quot;hello&quot;/&gt;
					   &lt;html:hidden property=&quot;searchTypeInd&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E70D58E158A1388D10EE544F0CB5B5BC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at logExtractor.jsp line 335 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>logExtractor.jsp</FileName>
<FilePath>webapp/logExtractor.jsp</FilePath>
<LineStart>335</LineStart>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="958E35E04585A43FE5989512217ED4DF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppvCustomerPurchase.jsp line 120 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppvCustomerPurchase.jsp</FileName>
<FilePath>webapp/ppvCustomerPurchase.jsp</FilePath>
<LineStart>120</LineStart>
<Snippet>                      &lt;td&gt;
                        &lt;!--Basic Search Starts Here--&gt;
						&lt;html:form action=&quot;/ppvCustomerPurchases.do&quot;&gt;
                        &lt;div class=&quot;st_search_basic&quot; id=&quot;searching1&quot;&gt;
                          &lt;div class=&quot;st_searchcomp&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="07D54B00C20C67EDEBD5B684DC3684D1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVLoadHarmony.jsp line 23 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVLoadHarmony.jsp</FileName>
<FilePath>webapp/OVLoadHarmony.jsp</FilePath>
<LineStart>23</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; bgcolor=&quot;#C8C8C8&quot;&gt;

&lt;form name=&quot;OVHbiDetailForm&quot; action=&quot;ovfallout_hbi_detail.do?harmony&quot; method=&quot;post&quot; target=&quot;falloutbox1&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;table width=&quot;685&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot;align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1039559142A65F6E769E935372CA9236">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at account_only_change_view.jsp line 1245 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>account_only_change_view.jsp</FileName>
<FilePath>webapp/account_only_change_view.jsp</FilePath>
<LineStart>1245</LineStart>
<Snippet>
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BC99C2D97358E39731E58C63F89E045E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massIvappOrderStatusLookup.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massIvappOrderStatusLookup.jsp</FileName>
<FilePath>webapp/businessTools/tools/massIvappOrderStatusLookup.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;s:form method = &quot;post&quot; action=&quot;massIvappOrderStatus&quot; enctype=&quot;multipart/form-data&quot;&gt;

&lt;span&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7C2E54BD92BA7C8F8FCCF266A7BC174C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at loadharmony.jsp line 23 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>loadharmony.jsp</FileName>
<FilePath>webapp/loadharmony.jsp</FilePath>
<LineStart>23</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; bgcolor=&quot;#C8C8C8&quot;&gt;

&lt;form name=&quot;HbiDetailForm&quot; action=&quot;fallout_hbi_detail.do?harmony&quot; method=&quot;post&quot; target=&quot;falloutbox1&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A9AA1E608CF417D303BE5171018E7476">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at widget_stn_hcreport.jsp line 79 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>widget_stn_hcreport.jsp</FileName>
<FilePath>webapp/widget_stn_hcreport.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>&lt;BODY&gt;
&lt;jsp:include page=&quot;/widgets_admin_header.jsp&quot;&gt;&lt;/jsp:include&gt;
&lt;FORM method=&quot;post&quot; ACTION=&quot;healthCheckSTN.do&quot; name=&quot;WidgetHealthCheckSTNForm&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;operation&quot; value=&quot;&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;stb&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="35646279EDB45100F12EFECD510867BA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiAdminGeocode.jsp line 57 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiAdminGeocode.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiAdminGeocode.jsp</FilePath>
<LineStart>57</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;banGuiAdminGeocode&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

 &lt;table border=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="65404B9B78B669CD35EED40983F6C580">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_correct_billing.jsp line 179 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_correct_billing.jsp</FileName>
<FilePath>webapp/pop_correct_billing.jsp</FilePath>
<LineStart>179</LineStart>
<Snippet>&lt;/form&gt;
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F65E91192A02D314F3A5862176568827">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at lecroutemanagement.jsp line 102 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>lecroutemanagement.jsp</FileName>
<FilePath>webapp/lecroutemanagement.jsp</FilePath>
<LineStart>102</LineStart>
<Snippet>
&lt;!-- Added by FARID START--&gt;	
 &lt;html:form method=&quot;post&quot; action=&quot;/lecroutemanagement.do&quot;&gt;
&lt;!-- Added by FARID END--&gt;	
       &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4F6737F1A70CE8BC090F5DA5B80EF705">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at wmg_tool_investigate.jsp line 223 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>wmg_tool_investigate.jsp</FileName>
<FilePath>webapp/wmg_tool_investigate.jsp</FilePath>
<LineStart>223</LineStart>
<Snippet>&lt;div id=&quot;restag2&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;html:form action=&quot;/wmgResourceAction.do&quot; method=&quot;post&quot;&gt;
&lt;html:hidden property=&quot;requestType&quot;/&gt;
&lt;html:hidden property=&quot;year&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C9F5F5BF09F39EDF231CE813ACE8F5D5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeQueueAdmin.jsp line 214 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeQueueAdmin.jsp</FileName>
<FilePath>webapp/routeQueueAdmin.jsp</FilePath>
<LineStart>214</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/routemgmt.do&quot; target=&quot;searchbox&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B1E1C19F7E8F9D843AE39A4E76B468B7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caofferTemplate.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caofferTemplate.jsp</FileName>
<FilePath>webapp/caofferTemplate.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>								&lt;/logic:notPresent&gt;
								&lt;logic:present name=&quot;dependantList&quot;&gt;
								&lt;form name=&quot;SearchForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
								&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot;/&gt;
								&lt;bean:write name=&quot;errorString&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7DBDFE785346C3BFF56B1EB56A87338E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at email_evnt_id_status_update.jsp line 45 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>email_evnt_id_status_update.jsp</FileName>
<FilePath>webapp/email_evnt_id_status_update.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>

&lt;form name=&quot;emailEvntStsScrubForm&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;

&lt;input type=&quot;hidden&quot; name=&quot;eventIds&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0E3DAB400D3B905AE1DE6ABD10036BC4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspPerigonSearch.jsp line 255 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspPerigonSearch.jsp</FileName>
<FilePath>webapp/sspPerigonSearch.jsp</FilePath>
<LineStart>255</LineStart>
<Snippet>	&lt;tr&gt;
		&lt;td&gt;
			&lt;html:form focus=&quot;searchInput&quot; action=&quot;/ssppg_SSP360_Order.do&quot; method=&quot;post&quot;&gt;
			&lt;div class=&quot;searchbigbg&quot;&gt;
				&lt;div class=&quot;searchbigboxcont&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D2C25940141FEDB1B8B4A1B2DC8BD997">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nsop_status.jsp line 116 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nsop_status.jsp</FileName>
<FilePath>webapp/nsop_status.jsp</FilePath>
<LineStart>116</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt; 
    &lt;td width=&quot;100%&quot; &gt;
	&lt;html:form focus=&quot;orderIDs&quot; action=&quot;/nsop_status.do&quot; method=&quot;post&quot; onsubmit =&quot;return false;&quot;&gt;   
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F6D3F59DDC4E0C9A735919D13FAB9A8D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at loginnosso.jsp line 55 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>loginnosso.jsp</FileName>
<FilePath>webapp/loginnosso.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>	
&lt;body style=&quot;background:none; background-color:#E9F3FF;&quot;&gt;
&lt;html:form action=&quot;/logon.do&quot; method=&quot;post&quot; focus=&quot;userId&quot;&gt;
&lt;div id=&quot;coa_ssp_login&quot;&gt;
&lt;div class=&quot;coa_ssp_login_branding&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FED2CA41197217AAF141438D33395368">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_FVRIBS.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_FVRIBS.jsp</FileName>
<FilePath>webapp/filter_FVRIBS.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>}
&lt;/script&gt;
&lt;form name=&quot;filterForm&quot;&gt;

&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C928A17520A46FDFA9C145A68C08669">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_ribs.jsp line 719 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_ribs.jsp</FileName>
<FilePath>webapp/order_view_ribs.jsp</FilePath>
<LineStart>719</LineStart>
<Snippet>   &lt;/html:form&gt;
   
   &lt;html:form action=&quot;/ribs_correction.do&quot; method=&quot;post&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;onlySubmit&quot;/&gt;
      &lt;html:hidden property=&quot;pieIds&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="11DE6B1C7D1DB9DDE3D45370E8260D19">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_fallouts.jsp line 181 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_fallouts.jsp</FileName>
<FilePath>webapp/pop_fallouts.jsp</FilePath>
<LineStart>181</LineStart>
<Snippet>&lt;bean:define id=&quot;strElementIdBean&quot; value=&quot;&lt;%=strElementId%&gt;&quot;/&gt;
&lt;bean:define id=&quot;strProductTypeBean&quot; value=&quot;&lt;%=strProductType%&gt;&quot;/&gt;
&lt;form name=&quot;massAddrSubmitForm&quot; &gt;
&lt;input type=&quot;hidden&quot; name=&quot;MassAddrUpdate&quot; value=&quot;&lt;%=strMassAddrUpdate%&gt;&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;OrderId&quot; value=&quot;&lt;bean:write name=&quot;strOrderIdBean&quot;/&gt;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="214CFA5465F10B12894AAF8D69B0BC18">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at BBEhistorywrap.jsp line 250 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BBEhistorywrap.jsp</FileName>
<FilePath>webapp/BBEhistorywrap.jsp</FilePath>
<LineStart>250</LineStart>
<Snippet>        &lt;tr&gt;

        &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;HistoryDetails&quot;&gt;

          &lt;td class=&quot;background4&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B3A557056080AC1E0D1F4E6068864549">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribs_correction.jsp line 207 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribs_correction.jsp</FileName>
<FilePath>webapp/ribs_correction.jsp</FilePath>
<LineStart>207</LineStart>
<Snippet>&lt;tr&gt;
						&lt;td&gt;
							&lt;form name=&quot;SelectRadioButton&quot;&gt;
								&lt;table width=&quot;100%&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#999999&quot;&gt;
									&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9D8E4E5824CAF46C6DFEF840B8753922">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at viewNewOrderResponses.jsp line 36 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>viewNewOrderResponses.jsp</FileName>
<FilePath>webapp/systemtools/ittools/viewNewOrderResponses.jsp</FilePath>
<LineStart>36</LineStart>
<Snippet>&lt;/head&gt;
&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot;&gt;
	&lt;s:form method=&quot;post&quot; action=&quot;orderDiagnosisNew&quot;
		id=&quot;NewOrderDiagnosisForm&quot; theme=&quot;simple&quot;&gt;
		&lt;jsp:include page=&quot;/sspheader.jsp&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6D03F0316BD2CAA57A47C232D3B0640A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at MessageError.jsp line 237 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MessageError.jsp</FileName>
<FilePath>webapp/MessageError.jsp</FilePath>
<LineStart>237</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6141AC716E09D7D226D74B722B1BE9E8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at resubmit.jsp line 220 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>resubmit.jsp</FileName>
<FilePath>webapp/resubmit.jsp</FilePath>
<LineStart>220</LineStart>
<Snippet>    if( mapId != null &amp;&amp; mapId.equals(&quot;8&quot;) ) {
  %&gt;
    &lt;form action=&quot;hbi_resubmit.do&quot; method=&quot;post&quot;&gt;
  &lt;%
  }</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BFA67A15D8CE5E1556229904DD408BC7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_vis.jsp line 7 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_vis.jsp</FileName>
<FilePath>webapp/filter_vis.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>&lt;jsp:useBean id=&quot;userProfile&quot; scope=&quot;session&quot; class=&quot;com.verizon.ssp.flowclient.vaas.UserProfile&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot; class=&quot;background3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2E462DC449DF651E847B792F691FD5DE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVPopL2Accept.jsp line 270 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVPopL2Accept.jsp</FileName>
<FilePath>webapp/OVPopL2Accept.jsp</FilePath>
<LineStart>270</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2E5CD6898421D7E5491EA5487AEA42E2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_sdmpMigration.jsp line 237 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_sdmpMigration.jsp</FileName>
<FilePath>webapp/fallout_sdmpMigration.jsp</FilePath>
<LineStart>237</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/fallout_sdmpmig.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;falloutCode&quot; value=&quot;&lt;%=erCode%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="98E0FFC064949507AAF965F9BBFACB21">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at getpromoprice.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>getpromoprice.jsp</FileName>
<FilePath>webapp/getpromoprice.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>
&lt;html:errors/&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/promoprice&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;B&gt;Please upload your file:&amp;nbsp;&lt;/B&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="90E3E05D777C8A070CCA40B1CB74F341">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fileupload.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fileupload.jsp</FileName>
<FilePath>webapp/fileupload.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>
&lt;html:errors/&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/ppupload&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;B&gt;Please upload your file:&amp;nbsp;&lt;/B&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CEA548BED61E4E7CE80EAD3C165AB34A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at data_langInd.jsp line 174 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>data_langInd.jsp</FileName>
<FilePath>webapp/data_langInd.jsp</FilePath>
<LineStart>174</LineStart>
<Snippet>&lt;/logic:notPresent&gt;

&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; &gt;
      &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
      &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C72AD9B8E50DBA25D132968A6F330781">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at genericreportwrap.jsp line 151 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>genericreportwrap.jsp</FileName>
<FilePath>webapp/genericreportwrap.jsp</FilePath>
<LineStart>151</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
           &lt;html:form method=&quot;post&quot; action=&quot;/statuserrorcode.do&quot; target=&quot;searchbox&quot;&gt;             
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;100&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BCE617F1487F81062798120F9283EB23">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ribs_subservice_correction.jsp line 233 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ribs_subservice_correction.jsp</FileName>
<FilePath>webapp/ribs_subservice_correction.jsp</FilePath>
<LineStart>233</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/ribs_subservice.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FAA7E5BC2C7E7A74A8A32E9170F72BD8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_ob_lec.jsp line 22 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_ob_lec.jsp</FileName>
<FilePath>webapp/filter_ob_lec.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA02826849710D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 1538 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>1538</LineStart>
<Snippet>
&lt;!-- Added by shraddha for due date history --&gt;
&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F69B93424D5B040CBE656EA06D9BBDE0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at emailSuppress.jsp line 81 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>emailSuppress.jsp</FileName>
<FilePath>webapp/emailSuppress.jsp</FilePath>
<LineStart>81</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/promoTool.do?requestType=EMAIL&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot; /&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="910ACE5B46F30033900D614AE7543B78">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at orderprofile.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>orderprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/orderprofile.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>	&lt;div class=&quot;panel serif&quot;&gt;
		&lt;s:if test='%{#request.equipmentProfileInfo.OrderInfo != null &amp;&amp; #request.equipmentProfileInfo.OrderInfo.size()&gt;0}'&gt;
		&lt;s:form action=&quot;EPUpdateOrderInfo&quot; name=&quot;OrderInfoDisplayForm&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;OrderInfoMap&quot; id=&quot;OrderInfoMap&quot;/&gt;
			&lt;table&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8930F60311DAC7C09DD426E96452D0C0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at routeManualRibsQueue.jsp line 136 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>routeManualRibsQueue.jsp</FileName>
<FilePath>webapp/routeManualRibsQueue.jsp</FilePath>
<LineStart>136</LineStart>
<Snippet>    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt;
    
    &lt;html:form  method=&quot;post&quot; action=&quot;/ribsManualRoute.do&quot;&gt;   
      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#333333&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="66FF5D0C2319798CDBED1A42138C27E7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at stbupdateresult.jsp line 29 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>stbupdateresult.jsp</FileName>
<FilePath>webapp/stbupdateresult.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>&lt;/head&gt;
&lt;body&gt;
 &lt;html:form name=&quot;STBUpdateForm&quot; type=&quot;com.verizon.ssp.flowclient.tools.stbupdate.STBUpdateForm&quot; action=&quot;/stbUpdate.do&quot; method=&quot;post&quot;&gt;
 &lt;logic:notEmpty name=&quot;STBUpdateForm&quot; property=&quot;responseList&quot; &gt;
	&lt;p&gt;&lt;span style=&quot;color:green&quot;&gt;Transaction Successful.....&lt;/span&gt;&lt;/p&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D024BD4DAD0A0A99CDC74DC1CEB48FA4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pcanToolHome.jsp line 30 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pcanToolHome.jsp</FileName>
<FilePath>webapp/sspvision/pcanToolHome.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;PCANToolForm&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;white&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7A3606C25232847DF07570B70211ADFA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_volwest_processorder.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_volwest_processorder.jsp</FileName>
<FilePath>webapp/fallout_volwest_processorder.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>	String sMsgTyp = null;
%&gt;
&lt;html:form action=&quot;/fallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8C4384A08AAD71AFF48FE07333DA89D8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiCreateOrder.jsp line 43 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiCreateOrder.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiCreateOrder.jsp</FilePath>
<LineStart>43</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;banGuiCreateOrder&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0C79DD9E33699835A3054042C0A0E730">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at btnSearchHome.jsp line 74 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>btnSearchHome.jsp</FileName>
<FilePath>webapp/btnSearchHome.jsp</FilePath>
<LineStart>74</LineStart>
<Snippet>

	&lt;html:form action=&quot;/bundleDiscount.do&quot; method=&quot;post&quot; target=&quot;bundleDetails&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BCD67ECE8EE1100B16B8D9769C7DC39E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVfallout_billing.jsp line 292 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVfallout_billing.jsp</FileName>
<FilePath>webapp/OVfallout_billing.jsp</FilePath>
<LineStart>292</LineStart>
<Snippet>&lt;/table&gt;
&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
&lt;html:form action=&quot;/bill_correction.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
  &lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
  &lt;html:hidden property=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="52BEC61DFD9E305AAE46C959B542BE46">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogFileView.jsp line 71 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogFileView.jsp</FileName>
<FilePath>webapp/mogFileView.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>          &lt;tr&gt;
            &lt;td&gt;
              &lt;html:form action=&quot;/mogFileView.do&quot;&gt;
              &lt;!--Search Table Starts Here--&gt;
              &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="92CE82F88FDEB671CBF73174661C1AA3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVAddCorrection.jsp line 1284 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVAddCorrection.jsp</FileName>
<FilePath>webapp/OVAddCorrection.jsp</FilePath>
<LineStart>1284</LineStart>
<Snippet>
&lt;/html:form&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/ovnamecorrection.do&quot; onsubmit='return false;'&gt;

   &lt;div id=&quot;nameinfo&quot; style='position:absolute;visibility:hidden'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E3E0409B10D424F0C155EE1AD05E36F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at agent_search.jsp line 98 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>agent_search.jsp</FileName>
<FilePath>webapp/agent_search.jsp</FilePath>
<LineStart>98</LineStart>
<Snippet>                &lt;td&gt;
                    
                    &lt;html:form method=&quot;post&quot; action=&quot;/updateResources.do&quot; &gt;
                        
                    </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CF7621B692CB4E9FF725D6FB3301AA52">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nseTool.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nseTool.jsp</FileName>
<FilePath>webapp/nseTool.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot;&gt;

&lt;form name=&quot;form1&quot; method=&quot;post&quot; action= &quot;nseTool2.jsp&quot; onSubmit=&quot;return checkStr();&quot;&gt;
&lt;h2 class=&quot;headerlink&quot; align=&quot;center&quot;&gt; Notification Server Email Tool&lt;/h2&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="AEB2534DF3B31FC9A384E25377AD3B56">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at dmtRollbackPending.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>dmtRollbackPending.jsp</FileName>
<FilePath>webapp/dmtRollbackPending.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>&lt;!-- COA Look and Feel By Sanjay --&gt;

 &lt;html:form method=&quot;post&quot; action=&quot;/updateBOStatus.do&quot;&gt;
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B6AF72F10A443E8BE393BC8F9FC312D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at NewBQTHistoryTool.jsp line 89 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>NewBQTHistoryTool.jsp</FileName>
<FilePath>webapp/NewBQTHistoryTool.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>								&lt;td colspan=&quot;4&quot;&gt;&lt;img src=&quot;images/spacer.gif&quot; height=&quot;2&quot;&gt;&lt;/td&gt;
							&lt;/tr&gt;
							&lt;form name=&quot;NewBQTHistoryForm&quot; method=&quot;post&quot; target=&quot;bqt&quot;&gt;
							&lt;input type=&quot;hidden&quot; name=&quot;actionType&quot; value=&quot;&quot;/&gt;
							&lt;tr class=&quot;background1&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B89035E1A02FB5AF524730E20BEA1AF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutSdmpHold.jsp line 61 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutSdmpHold.jsp</FileName>
<FilePath>webapp/OVFalloutSdmpHold.jsp</FilePath>
<LineStart>61</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/ovfallout_sdmp_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5AA2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 1345 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>1345</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C1180ED7551E5509714B0189CCABA017">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addsystemretry.jsp line 220 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addsystemretry.jsp</FileName>
<FilePath>webapp/addsystemretry.jsp</FilePath>
<LineStart>220</LineStart>
<Snippet>&lt;/form&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/systemretry.do&quot;&gt;
	&lt;html:hidden property=&quot;mapId&quot;/&gt;
	&lt;html:hidden property=&quot;falloutCode&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7FB4FCD7828F9B2134E571F15E7F1DC2">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addbulletin.jsp line 69 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addbulletin.jsp</FileName>
<FilePath>webapp/addbulletin.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;AddForm&quot;&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="EA5BCE62FD05CD634487B82D1452381C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at master_service_view.jsp line 359 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>master_service_view.jsp</FileName>
<FilePath>webapp/master_service_view.jsp</FilePath>
<LineStart>359</LineStart>
<Snippet>							 &lt;td height=&quot;18&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;Billing Account No:&lt;/strong&gt;&lt;/td&gt;
			                 &lt;td valign=&quot;top&quot;&gt;
							 &lt;form name=&quot;AccountForm&quot; action=&quot;/sspflow/search.do&quot; method=&quot;post&quot; target = &quot;_parent&quot;&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;BAN&quot; value=&quot;&quot;/&gt;
							 &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2B9D632098BC24F7A4F0E4940DF6D153">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at nacr_info.jsp line 94 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>nacr_info.jsp</FileName>
<FilePath>webapp/nacr_info.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
&lt;html:form action=&quot;/nacrInfo.do&quot; method=&quot;post&quot; target=&quot;nacrInfo&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="563ABB15434B1A2DE64A5B161C08994B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at newServiceInformation.jsp line 60 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>newServiceInformation.jsp</FileName>
<FilePath>webapp/newServiceInformation.jsp</FilePath>
<LineStart>60</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="051963F47BCBD5DFB656287DBD840983">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at analyzerReportsCorrection.jsp line 530 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>analyzerReportsCorrection.jsp</FileName>
<FilePath>webapp/analyzerReportsCorrection.jsp</FilePath>
<LineStart>530</LineStart>
<Snippet>
 &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt;
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9A8F7EB93B8FF8C32F2FCA7B54793767">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at orderingUpdatesDetails.jsp line 71 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>orderingUpdatesDetails.jsp</FileName>
<FilePath>webapp/orderingUpdatesDetails.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>		                &lt;tr&gt;
		                  &lt;td valign=&quot;top&quot;&gt;
                          &lt;html:form id=&quot;OrderingUpdatesForm&quot; action=&quot;/orderingUpdates.do&quot; method=&quot;post&quot;&gt;
                          &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; id=&quot;table114&quot;&gt;
		                    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1AAA6575B52A2FFF6DB5E8D633FEF991">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at referralProgram.jsp line 42 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>referralProgram.jsp</FileName>
<FilePath>webapp/referralProgram.jsp</FilePath>
<LineStart>42</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;body&gt;
&lt;form name=&quot;RAFDetailForm&quot; method=&quot;post&quot; action=&quot;/sspflow/referralProgram.do&quot; target=&quot;searchbox&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;searchType&quot; value=&quot;&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;searchValue&quot; value=&quot;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9464ED6D23011D98640B75DE94FE27DC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspV5ProfileCorrectionAddNewService.jsp line 154 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspV5ProfileCorrectionAddNewService.jsp</FileName>
<FilePath>webapp/sspV5ProfileCorrectionAddNewService.jsp</FilePath>
<LineStart>154</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;SSPV5ProfileAddServiceForm&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E75E0E9604D0421C5F50BC8C068A8FA5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiUpdateBan.jsp line 101 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiUpdateBan.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiUpdateBan.jsp</FilePath>
<LineStart>101</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;banGuiUpdateBanForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;

 &lt;table border=&quot;0&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9CA0242BFD4A303F6A6D0D44CA7FA56F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massddupdate.jsp line 38 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massddupdate.jsp</FileName>
<FilePath>webapp/massddupdate.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>&lt;/logic:notPresent&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/massddupdate&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span class=&quot;ContentInput5&quot;&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="34B3C6807815DB99A040C34DD5C82850">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVFalloutHbiCoa.jsp line 110 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVFalloutHbiCoa.jsp</FileName>
<FilePath>webapp/OVFalloutHbiCoa.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>            &lt;tr&gt;
            &lt;td colspan=&quot;2&quot;&gt;
                &lt;html:form action=&quot;&lt;%=forwardPage%&gt;&quot; method=&quot;post&quot; &gt;
                &lt;div id=&quot;menu1&quot; style=&quot;display:none;&quot;&gt; 
                &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#000000&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="421E2B70B32CAA2F774C93AA9BB81ACB">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massTracking.jsp line 80 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massTracking.jsp</FileName>
<FilePath>webapp/massTracking.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>	
					     &lt;!-- Search form --&gt;
					     &lt;html:form action=&quot;/massTracking.do&quot; method=&quot;post&quot; id=&quot;search&quot;&gt;

			   &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="91D7BAA03EF028539E32E8F73C2636A8">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at bbeTemplate.jsp line 208 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>bbeTemplate.jsp</FileName>
<FilePath>webapp/bbeTemplate.jsp</FilePath>
<LineStart>208</LineStart>
<Snippet>								&lt;/logic:notPresent&gt;
								&lt;logic:present name=&quot;dependantList&quot;&gt;
								&lt;form name=&quot;SearchForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
								&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot;/&gt;
								&lt;bean:write name=&quot;errorString&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BEF8D6E82AA1C141C312E7E4F7BBC2B4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgResubmit.jsp line 217 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgResubmit.jsp</FileName>
<FilePath>webapp/ssppgResubmit.jsp</FilePath>
<LineStart>217</LineStart>
<Snippet>	  ) {
  %&gt;
	&lt;form action=&quot;sspfallout_volwest_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot; &gt;
	&lt;input type=hidden name=&quot;requestType&quot; value=&quot;updateCircuitID&quot;&gt;
	&lt;input type=hidden name=&quot;requestAction&quot; value=&quot;updateCircuitID:submit&quot;&gt;	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F735036ED4A11A8410E285D73DD6B74C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_view.jsp line 1379 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_view.jsp</FileName>
<FilePath>webapp/service_dial_view.jsp</FilePath>
<LineStart>1379</LineStart>
<Snippet>
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A0B242CF8483DC3672DC7F91613335EA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppg_view_allnotes.jsp line 101 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppg_view_allnotes.jsp</FileName>
<FilePath>webapp/ssppg_view_allnotes.jsp</FilePath>
<LineStart>101</LineStart>
<Snippet>&lt;/td&gt;&lt;/tr&gt;   &lt;/table&gt; &lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;html:form action=&quot;/ssppgOVResult.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt; 
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt; 
function close(){ </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1C3EA6B71DAD0C3D1121323912340B06">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogGUIReset.jsp line 207 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogGUIReset.jsp</FileName>
<FilePath>webapp/moggui/mogGUIReset.jsp</FilePath>
<LineStart>207</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/mogGUIHeader.jsp&quot;/&gt;
&lt;html:form action=&quot;/mogReset.do&quot; method=&quot;post&quot;&gt;

&lt;table width=&quot;98%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D322343980A993CCF7800F8457F89140">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_touchpoint.jsp line 391 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_touchpoint.jsp</FileName>
<FilePath>webapp/view_touchpoint.jsp</FilePath>
<LineStart>391</LineStart>
<Snippet>				  &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;
					&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
						&lt;td&gt;	
						&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6B6B0D16FB5E49FC5CBEC4929F7F3875">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_hbi_hold.jsp line 66 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_hbi_hold.jsp</FileName>
<FilePath>webapp/fallout_hbi_hold.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>  &lt;/head&gt;
  &lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;  onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
    &lt;html:form action=&quot;/fallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
&lt;!-- COA Look and Feel By Sanjay --&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3CBF6D3C75741AE240590756411000CA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at broadbandGuiSimulateFOC.jsp line 54 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>broadbandGuiSimulateFOC.jsp</FileName>
<FilePath>webapp/businessTools/tools/broadbandGuiSimulateFOC.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form name=&quot;BroadbandGuiSimualteOrderForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6B0D25580FA800BBB8E0309A2159D236">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspESMsgsView.jsp line 234 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspESMsgsView.jsp</FileName>
<FilePath>webapp/sspESMsgsView.jsp</FilePath>
<LineStart>234</LineStart>
<Snippet>                &lt;td class=&quot;st_head_bg2&quot;&gt;Search&lt;/td&gt;	
              &lt;/tr&gt;
				&lt;html:form action=&quot;/sspESMsgsView.do&quot; method=&quot;post&quot;  &gt;

	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E354601C379ADB2D4AD7061CF5AB103B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at icareNotes.jsp line 390 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>icareNotes.jsp</FileName>
<FilePath>webapp/icareNotes.jsp</FilePath>
<LineStart>390</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C3699681D58245D971D0DA6657D9EDF3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_change_reflow.jsp line 110 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_change_reflow.jsp</FileName>
<FilePath>webapp/fallout_change_reflow.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>    &lt;/script&gt;
	&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad= &quot;MM_preloadImages('images/buttons_submit_disabled.gif')&quot;&gt;
	&lt;html:form action=&quot;/fallout_change_detail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
		&lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
		  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050295">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2386 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2386</LineStart>
<Snippet>
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="392194B7F96FD5DEDC1E45AEA706F861">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_billing.jsp line 372 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_billing.jsp</FileName>
<FilePath>webapp/fallout_billing.jsp</FilePath>
<LineStart>372</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="39917DE99797C7F7299B7AE1D7E823CE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_ribs.jsp line 312 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_ribs.jsp</FileName>
<FilePath>webapp/fallout_ribs.jsp</FilePath>
<LineStart>312</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 07/29 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA028268497111">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 1606 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>1606</LineStart>
<Snippet>
&lt;!-- Radha August 2011 Release --&gt;
&lt;html:form action=&quot;/orderingUpdates.jsp&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
 &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;acctid&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="24263EBD665399AD0667AEAB9CAEB60C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at workgrpmgmt_forward.jsp line 24 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>workgrpmgmt_forward.jsp</FileName>
<FilePath>webapp/workgrpmgmt_forward.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>
&lt;body onLoad=&quot;javascipt:submitForm();&quot;&gt;
 &lt;html:form method=&quot;post&quot; action=&quot;/wrkgrpmgmt.do&quot;&gt;
   &lt;html:hidden property=&quot;isdetail&quot;/&gt;
 &lt;/html:form&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2962ABF8F04A459A2E904577CD3D3758">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at falloutSequenceView.jsp line 75 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>falloutSequenceView.jsp</FileName>
<FilePath>webapp/falloutSequenceView.jsp</FilePath>
<LineStart>75</LineStart>
<Snippet>                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay Starts--&gt;
					&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
                      &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;1&quot; bcgcolor=&quot;#dddddd&quot;&gt;
            		&lt;tr class=&quot;background2&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385261">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1443 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1443</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form action=&quot;/mapdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="44BCA073F9A25152FEC65753AE2865E9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusAdminData.jsp line 37 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusAdminData.jsp</FileName>
<FilePath>webapp/statusAdminData.jsp</FilePath>
<LineStart>37</LineStart>
<Snippet>
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;form name=&quot;form1&quot; method=&quot;post&quot; action=&quot;&quot;&gt;

  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E04A20617C8F1A69DE7D2E1B86743BF6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at DMT_Tab_Display.jsp line 35 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DMT_Tab_Display.jsp</FileName>
<FilePath>webapp/DMT_Tab_Display.jsp</FilePath>
<LineStart>35</LineStart>
<Snippet>
  &lt;body&gt;
	&lt;form name=&quot;dataManagement&quot; action=&quot;DMT_Tab.do&quot; target=&quot;_self&quot;&gt;
	&lt;iframe id=&quot;iframe_id&quot; name=&quot;dmt&quot; width=&quot;740&quot; frameborder=&quot;0&quot; height=&quot;290&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
	&lt;iframe name=&quot;dmt_output&quot; id =&quot;dmt_output&quot; onLoad=&quot;javascipt:submitForm();&quot; src=&quot;&quot; width=&quot;0&quot; height=&quot;0&quot;  frameborder=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6AD5337DD113CD2AE7FC40A2EF13B1F9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_dis_route_success.jsp line 19 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_dis_route_success.jsp</FileName>
<FilePath>webapp/pop_dis_route_success.jsp</FilePath>
<LineStart>19</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;windowRedirect()&quot;&gt;

&lt;html:form action=&quot;/queue.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;mapId&quot; value=&quot;&lt;bean:write name=&quot;mapId&quot;/&gt;&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;mapVersion&quot; value=&quot;&lt;bean:write name=&quot;mapVersion&quot;/&gt;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F441108D461F0D9C25F482DFFE1B78E4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at profiledOrderManagementTool.jsp line 102 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>profiledOrderManagementTool.jsp</FileName>
<FilePath>webapp/profiledOrderManagementTool.jsp</FilePath>
<LineStart>102</LineStart>
<Snippet>&lt;/head&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/profiledOrderManagementTool.do&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="48DDA580C78005218B6F5432720DBE5D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massUpdate.jsp line 224 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massUpdate.jsp</FileName>
<FilePath>webapp/massUpdate.jsp</FilePath>
<LineStart>224</LineStart>
<Snippet>	&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;
    &lt;td width=&quot;100%&quot; height=&quot;201&quot;&gt; 
	&lt;html:form method=&quot;post&quot; action=&quot;/massRouteManualManagement.do&quot; target=&quot;searchbox&quot;&gt;    
      &lt;table  border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;99%&quot; bgcolor=&quot;#A7A7A7&quot;; align=&quot;center&quot;&gt;
        &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7FB4FCD7828F9B2134E571F15E7F1DC4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at addbulletin.jsp line 133 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>addbulletin.jsp</FileName>
<FilePath>webapp/addbulletin.jsp</FilePath>
<LineStart>133</LineStart>
<Snippet>
&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5595EEF5812932650176A0DDDCEB9EFA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at JSpellIFrame.jsp line 294 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSpellIFrame.jsp</FileName>
<FilePath>webapp/jspellhtml2k4/JSpellIFrame.jsp</FilePath>
<LineStart>294</LineStart>
<Snippet>&lt;/head&gt;
&lt;body bgcolor=&quot;#dddddd&quot;&gt;
&lt;form name=results&gt;
&lt;table width=&quot;100%&quot; height=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt;
	&lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F12A604ED45E4FC1E51F791A01754932">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at queueCount.jsp line 58 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>queueCount.jsp</FileName>
<FilePath>webapp/queueCount.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
         &lt;html:form method=&quot;post&quot; action=&quot;/queuecount.do&quot; target=&quot;searchbox&quot;&gt;           
	        &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="74103052F0CBBFFE0E09B85A12C76860">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_iCredit.jsp line 293 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_iCredit.jsp</FileName>
<FilePath>webapp/view_iCredit.jsp</FilePath>
<LineStart>293</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/ppqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%=filterType%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4722B8DF6D51C697046AD6E4751DA384">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at caofferproduct_details.jsp line 34 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>caofferproduct_details.jsp</FileName>
<FilePath>webapp/caofferproduct_details.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	window.onload=resize_iframe;
&lt;/script&gt;
&lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;6&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="93F4111CDBF9A758A3094D611DD595F6">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ioccFalloutManagement.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ioccFalloutManagement.jsp</FileName>
<FilePath>webapp/businessTools/tools/ioccFalloutManagement.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;IspSearchForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;tabName&quot; /&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F236A559B5E6C6D15E8241DB344D9D40">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fcoNotesDetails.jsp line 203 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fcoNotesDetails.jsp</FileName>
<FilePath>webapp/fcoNotesDetails.jsp</FilePath>
<LineStart>203</LineStart>
<Snippet>	

		&lt;html:form action=&quot;/sourceroute.do&quot; method=&quot;post&quot;&gt;
        &lt;/html:form&gt;
        &lt;html:form action=&quot;/fcoUpdate.do&quot; method=&quot;post&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0B353E9E3AF5E2CF451EF6E305319A48">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vtp.jsp line 127 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vtp.jsp</FileName>
<FilePath>webapp/fallout_vtp.jsp</FilePath>
<LineStart>127</LineStart>
<Snippet>		
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
	&lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
	&lt;html:hidden property=&quot;requestType&quot; value=&quot;&quot;/&gt;
	&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1CF6B71271C37C4BCFA995AD4C1CF031">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at hold_order_report.jsp line 265 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>hold_order_report.jsp</FileName>
<FilePath>webapp/hold_order_report.jsp</FilePath>
<LineStart>265</LineStart>
<Snippet>&lt;/table&gt;
	&lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
	&lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
	&lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
	&lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="DCD60D52881858F35A4B5F116E1AEDBF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgPopFallouts.jsp line 181 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgPopFallouts.jsp</FileName>
<FilePath>webapp/ssppgPopFallouts.jsp</FilePath>
<LineStart>181</LineStart>
<Snippet>&lt;bean:define id=&quot;strElementIdBean&quot; value=&quot;&lt;%=strElementId%&gt;&quot;/&gt;
&lt;bean:define id=&quot;strProductTypeBean&quot; value=&quot;&lt;%=strProductType%&gt;&quot;/&gt;
&lt;form name=&quot;massAddrSubmitForm&quot; &gt;
&lt;input type=&quot;hidden&quot; name=&quot;MassAddrUpdate&quot; value=&quot;&lt;%=strMassAddrUpdate%&gt;&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;OrderId&quot; value=&quot;&lt;bean:write name=&quot;strOrderIdBean&quot;/&gt;&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6D03F0316BD2CAA57A47C232D3B06409">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at MessageError.jsp line 120 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MessageError.jsp</FileName>
<FilePath>webapp/MessageError.jsp</FilePath>
<LineStart>120</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/falloutStat.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CE7C3651B0D11410838A2D02EE08B838">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pp_correction.jsp line 922 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pp_correction.jsp</FileName>
<FilePath>webapp/pp_correction.jsp</FilePath>
<LineStart>922</LineStart>
<Snippet>&lt;/html:form&gt;

&lt;html:form method=&quot;post&quot; action=&quot;/duedatetncorrection.do&quot;&gt;

   &lt;div id=&quot;potsinfo&quot; style='position:absolute;visibility:hidden'&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="84AFB40416A6D90F0325F680F60A14C5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_dtv.jsp line 217 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_dtv.jsp</FileName>
<FilePath>webapp/view_dtv.jsp</FilePath>
<LineStart>217</LineStart>
<Snippet>                  &lt;jsp:include page=&quot;/filter_dtv.jsp&quot;/&gt;
                  &lt;tr&gt;
				   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="28107E77DDB419ED02D9B020B3CF5AA1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_dial_disconnect_view.jsp line 1326 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_dial_disconnect_view.jsp</FileName>
<FilePath>webapp/service_dial_disconnect_view.jsp</FilePath>
<LineStart>1326</LineStart>
<Snippet>
&lt;!-- VDSI - Janani - WR 23370 - 08/07 --&gt;
&lt;html:form action=&quot;/falloutSequencing.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7D643D5D857E1F31AB76626646B3CB6F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ssppgNotes.jsp line 69 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ssppgNotes.jsp</FileName>
<FilePath>webapp/ssppgNotes.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>    

&lt;html:form  action=&quot;/ssppgaddnotes.do&quot; method=&quot;post&quot; focus=&quot;textarea_note&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
    &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="E28665B52B78563C09384A11C68E3B25">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_sd.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_sd.jsp</FileName>
<FilePath>webapp/filter_sd.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="6150489C4D9958629954852BADC42BEA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ontprofile.jsp line 12 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ontprofile.jsp</FileName>
<FilePath>webapp/businessTools/tools/ontprofile.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>	&lt;div class=&quot;panel serif&quot;&gt;
	&lt;s:if test='%{#request.equipmentProfileInfo.ontInfo != null &amp;&amp; #request.equipmentProfileInfo.ontInfo.size()&gt;0}'&gt;
		&lt;s:form action=&quot;EPUpdateONTInfo&quot; name=&quot;ONTInfoDisplayForm&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;ONTInfoMap&quot; id=&quot;ONTInfoMap&quot;/&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;EquipmentHistoryInfoMap&quot; id=&quot;EquipmentHistoryInfoMap&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8EB9DDD6C04FD22FE00005D9A3E1400E">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at statusQueueReadOnlyUser.jsp line 126 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>statusQueueReadOnlyUser.jsp</FileName>
<FilePath>webapp/statusQueueReadOnlyUser.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>        &lt;tr&gt; 
          &lt;td class=&quot;background4&quot;&gt; 
           &lt;html:form method=&quot;post&quot; action=&quot;/statusqueuereadonly.do&quot; target=&quot;searchbox&quot;&gt;     
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;121&quot;&gt;
              &lt;tr&gt; </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0E2687F83F6D6FEF65A5C7A673307ADC">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at mogGUIMetrics.jsp line 51 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>mogGUIMetrics.jsp</FileName>
<FilePath>webapp/moggui/mogGUIMetrics.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
&lt;jsp:include page=&quot;/mogGUIHeader.jsp&quot;/&gt;
&lt;html:form action=&quot;/mogMetrics.do&quot; method=&quot;post&quot;&gt;
&lt;table width=&quot;98%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="9CDA4B167DAE503317C221305412A7F0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_trkroll.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_trkroll.jsp</FileName>
<FilePath>webapp/filter_trkroll.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="4F0B0E8CDD153F407BA099A9048ECBE3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at banGuiNewOrder.jsp line 397 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>banGuiNewOrder.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiNewOrder.jsp</FilePath>
<LineStart>397</LineStart>
<Snippet>&lt;/form&gt;

&lt;s:form name=&quot;banGuiNewOrderForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;s:hidden name=&quot;submitStatus&quot; id=&quot;submitStatus&quot;/&gt;
&lt;s:hidden name=&quot;postBack&quot; id=&quot;postBack&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="47FD4A7FF0A4A29817399F24A6DEC7BD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_bbe.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_bbe.jsp</FileName>
<FilePath>webapp/filter_bbe.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>&lt;bean:define id=&quot;filterOrder&quot; value=&quot;&lt;%= Util.null2empty(SessionStateManager.getState(request, Constants.TOPIC_FILTER, Constants.TOPICKEY_FILTER_ORDER)) %&gt;&quot;/&gt;

&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="87E13F1A21570F1AA124A3FDEF3077FA">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at andreiDSLHeaders.jsp line 42 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>andreiDSLHeaders.jsp</FileName>
<FilePath>webapp/businessTools/tools/andreiDSLHeaders.jsp</FilePath>
<LineStart>42</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onLoad=&quot;javascript:load();&quot;&gt;

&lt;s:form name=&quot;ruleGroupForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="3DA66E25B50C8A2CDB0B824B12FFA322">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at iconsole.jsp line 37 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>iconsole.jsp</FileName>
<FilePath>webapp/iconsole.jsp</FilePath>
<LineStart>37</LineStart>
<Snippet>&lt;/tr&gt;
&lt;/table&gt;
&lt;FORM name=&quot;form1&quot; METHOD=&quot;POST&quot; action=&quot;&lt;bean:write name=&quot;returnUnit&quot; property=&quot;returnUrl&quot;/&gt;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;my_CreatorVZID&quot; value=&quot;&lt;bean:write name=&quot;returnUnit&quot; property=&quot;creatorId&quot;/&gt;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;my_vzid&quot; value=&quot;&lt;bean:write name=&quot;returnUnit&quot; property=&quot;vzid&quot;/&gt;&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="FB6E638E4AF6A4C6BD018AA72F2EB69A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pop_route_failure.jsp line 111 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pop_route_failure.jsp</FileName>
<FilePath>webapp/pop_route_failure.jsp</FilePath>
<LineStart>111</LineStart>
<Snippet>&lt;iframe name=&quot;scriptbox&quot; id=&quot;scriptbox&quot; src=&quot;loadharmony.jsp&quot;  width=&quot;100%&quot; height=&quot;20&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;form name=&quot;HbiDetailForm&quot; action=&quot;fallout_hbi_detail.do?harmony&quot; method=&quot;post&quot; target=&quot;falloutbox1&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestType&quot; value=&quot;&quot;/&gt;
&lt;input type=&quot;hidden&quot; name=&quot;requestAction&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D9D8E860A76FF6612F55722089A48093">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at sspvnVisionDetails.jsp line 33 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>sspvnVisionDetails.jsp</FileName>
<FilePath>webapp/sspvnVisionDetails.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>	&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;3&quot; bgcolor=&quot;#ffffff&quot;&gt;
	 &lt;tr&gt;
	  &lt;form name=&quot;SearchForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
	  &lt;td width=&quot;50%&quot;&gt;&lt;div&gt;&lt;strong&gt;Vision Customer ID:&lt;/strong&gt;&lt;/div&gt;&lt;/td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0D6FCCE499B414A324D1015501C53363">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_hbi_cancel_confirm.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_hbi_cancel_confirm.jsp</FileName>
<FilePath>webapp/fallout_hbi_cancel_confirm.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/fallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;html:hidden property=&quot;requestType&quot; value=&quot;cancel&quot;/&gt;
    &lt;html:hidden property=&quot;requestAction&quot; value=&quot;cancel:confirm&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="728E5CECC62063E6AF0A35159BBBD0DF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at filter_vtp.jsp line 17 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>filter_vtp.jsp</FileName>
<FilePath>webapp/filter_vtp.jsp</FilePath>
<LineStart>17</LineStart>
<Snippet>&lt;%System.out.println(&quot;ProductMap&quot; + productMap);%&gt;
&lt;!-- Ver 1.1 End --&gt;
&lt;form name=&quot;filterForm&quot;&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
  function setDefaultValues() {</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C6BE6CED74F349A20EC28FD16E673BA5">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ppdManagement.jsp line 145 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ppdManagement.jsp</FileName>
<FilePath>webapp/ppdManagement.jsp</FilePath>
<LineStart>145</LineStart>
<Snippet>
					
				&lt;html:form action=&quot;/ppdManagement.jsp&quot; method=&quot;post&quot;  &gt;
		
			  	&lt;%if(request.getAttribute(&quot;COUNTS_LIST&quot;)!=null )</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D024BD4DAD0A0A99CDC74DC1CEB48FA3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at pcanToolHome.jsp line 30 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pcanToolHome.jsp</FileName>
<FilePath>webapp/pcanToolHome.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>
&lt;body&gt;
&lt;form name=&quot;PCANToolForm&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;white&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8553288DB485D383F5CC7B9ACEE5AFE7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at massUOW.jsp line 25 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>massUOW.jsp</FileName>
<FilePath>webapp/massUOW.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>	  &lt;/tr&gt;
&lt;tr&gt;&lt;td width=&quot;100%&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/massUOW&quot; enctype=&quot;multipart/form-data&quot;&gt;
&lt;span&gt;&lt;strong&gt;Please upload your file:&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
&lt;html:file property=&quot;uploadFile&quot;&gt;&lt;/html:file&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="C85BBA4FD2B7F6E19F6D14A324FFB9D1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at map_bottomFrame.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>map_bottomFrame.jsp</FileName>
<FilePath>webapp/map_bottomFrame.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>&lt;/script&gt;
&lt;/head&gt;
&lt;form name=&quot;FlowMapForm&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;MAPID&quot; value=&quot;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;isInnerMap&quot; value=&quot;Y&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="194439EDC4CA6F44DE035CD9AF3500DE">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at restoreHardDisconnect.jsp line 82 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>restoreHardDisconnect.jsp</FileName>
<FilePath>webapp/restoreHardDisconnect.jsp</FilePath>
<LineStart>82</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;html:form action=&quot;/restoreaccount.do&quot; method=&quot;post&quot; target=&quot;restoreharddisconnect&quot;&gt;
&lt;jsp:include page=&quot;/header.jsp&quot;/&gt;
    &lt;table width=&quot;740&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="95012314B05D0FD969AA02826849710C">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_standalone_product.jsp line 1515 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_standalone_product.jsp</FileName>
<FilePath>webapp/service_standalone_product.jsp</FilePath>
<LineStart>1515</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="30DFC293-D2B8-463A-9952-257A44B5339C" iid="6AAF3E7E408C1AD69B38F1677FA55154">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The HTTP request at pushMailManuallyNew.jsp line 123 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>pushMailManuallyNew.jsp</FileName>
<FilePath>webapp/pushMailManuallyNew.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>			url = &quot;getFormOrderIdsDetails.jsp?eventId=&quot;+evntId+&quot;&amp;prodCat=&quot;+prdCat+&quot;&amp;servcTyp=&quot;+srvcTyp+&quot;&amp;prodDlt=&quot;+prdDtl+&quot;&amp;refId=&quot;+randomVal;
		}
		http.open(&quot;GET&quot;, url, true);
		http.onreadystatechange = handleOrderDtlsResponse;
		http.send(null);</Snippet>
<TargetFunction>FunctionPointerCall()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="16188E0F01EA401E1690FC633B055665">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at HbiFalloutStatus.jsp line 50 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HbiFalloutStatus.jsp</FileName>
<FilePath>webapp/HbiFalloutStatus.jsp</FilePath>
<LineStart>50</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
			&lt;html:form method=&quot;post&quot; action=&quot;/HbiFalloutStat.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385265">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1514 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1514</LineStart>
<Snippet>
&lt;!-- VISION5 - R4 - Renuka- Starts --&gt;
&lt;html:form action=&quot;/vision.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;visionCustomerId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;visionAcctId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="50FDA9EABFC5088CB242736204BDAD0B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at executeQuery.jsp line 79 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>executeQuery.jsp</FileName>
<FilePath>webapp/executeQuery.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>				if(!&quot;PRODUCTION&quot;.equalsIgnoreCase(environment) &amp;&amp; &quot;present&quot;.equals(param)){
				%&gt;
				&lt;html:form action=&quot;/executeXXX.do&quot; method=&quot;post&quot;&gt;
					&lt;tr&gt;
						&lt;td width=&quot;100%&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D68792697F7E33297C16BEFDB13512A3">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_vis_fallouts.jsp line 283 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_vis_fallouts.jsp</FileName>
<FilePath>webapp/view_vis_fallouts.jsp</FilePath>
<LineStart>283</LineStart>
<Snippet>    &lt;/table&gt;
	&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
    &lt;html:form action=&quot;/visqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
      &lt;html:hidden property=&quot;requestType&quot;/&gt;
      &lt;html:hidden property=&quot;filterType&quot; value=&quot;&lt;%= ChainedStateManager.getState(request, Constants.TOPIC_QUEUE, Constants.TOPICKEY_QUEUE_FILTERTYPE) %&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="92CE82F88FDEB671CBF73174661C1AA4">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVAddCorrection.jsp line 1469 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVAddCorrection.jsp</FileName>
<FilePath>webapp/OVAddCorrection.jsp</FilePath>
<LineStart>1469</LineStart>
<Snippet>
   &lt;div id=&quot;calendar&quot; style=&quot;position:absolute; width:200px; height:115px; z-index:10; left: 440px; top: 99px; visibility: hidden;&quot;&gt; 
                                      &lt;form name=&quot;frmCalendarSample&quot; method=&quot;post&quot; action=&quot;&quot;&gt;
									    &lt;table cellpadding=1 cellspacing=0 bgcolor=&quot;#003366&quot; &gt;
                                          &lt;tr&gt;&lt;td&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="2E462DC449DF651E847B792F691FD5DD">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVPopL2Accept.jsp line 254 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVPopL2Accept.jsp</FileName>
<FilePath>webapp/OVPopL2Accept.jsp</FilePath>
<LineStart>254</LineStart>
<Snippet>&lt;/table&gt;
&lt;/form&gt;
&lt;html:form action=&quot;/OVIcareOrderUpdate.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
   &lt;html:hidden property=&quot;orderId&quot; value=&quot;&lt;%=orderId%&gt;&quot;/&gt;
   &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&lt;%=elementId%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="956F3BB517EC55483BD801627C050292">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_view.jsp line 2330 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_view.jsp</FileName>
<FilePath>webapp/service_view.jsp</FilePath>
<LineStart>2330</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D4F4F498647FEAAF4C7CE511EB794E23">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at updateProfileAddress.jsp line 197 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>updateProfileAddress.jsp</FileName>
<FilePath>webapp/systemtools/ostestpages/updateProfileAddress.jsp</FilePath>
<LineStart>197</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form  action=&quot;updateProfile&quot; name=&quot;UpdateProfileFM&quot; &gt;

&lt;body onload=&quot;toggleCheck(false)&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8D895CEE72321BDC4C05EF0594101C71">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallouttemplate.jsp line 225 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallouttemplate.jsp</FileName>
<FilePath>webapp/fallouttemplate.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>								&lt;/logic:notPresent&gt;
								&lt;logic:present name=&quot;dependantList&quot;&gt;
								&lt;form name=&quot;SearchForm&quot; method=&quot;post&quot; action = &quot;/sspflow/search.do&quot; target = &quot;_parent&quot;&gt;
								&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot;/&gt;
								&lt;bean:write name=&quot;errorString&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1CF6B71271C37C4BCFA995AD4C1CF030">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at hold_order_report.jsp line 114 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>hold_order_report.jsp</FileName>
<FilePath>webapp/hold_order_report.jsp</FilePath>
<LineStart>114</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	&lt;html:form method=&quot;post&quot; action=&quot;/hold_report.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="1039559142A65F6E769E935372CA9234">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at account_only_change_view.jsp line 1209 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>account_only_change_view.jsp</FileName>
<FilePath>webapp/account_only_change_view.jsp</FilePath>
<LineStart>1209</LineStart>
<Snippet>&lt;!--  Displaying ISP related stuffs with Details hyperlink in customer tab - starts --&gt;

&lt;html:form action=&quot;/ispdetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;ispID&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;ispName&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7821D422F9CCF110C81111903C1C7F7B">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at VadiFttpFalloutStatus.jsp line 46 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>VadiFttpFalloutStatus.jsp</FileName>
<FilePath>webapp/VadiFttpFalloutStatus.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
			&lt;html:form method=&quot;post&quot; action=&quot;/HbiFalloutStat.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="506B2373981399B427AF507A3EE947C1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fcoNo.jsp line 184 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fcoNo.jsp</FileName>
<FilePath>webapp/fcoNo.jsp</FilePath>
<LineStart>184</LineStart>
<Snippet>        &lt;/html:form&gt;

        &lt;html:form action=&quot;/fcoUpdate.do&quot; method=&quot;post&quot;&gt;
		   &lt;html:hidden property=&quot;orderId&quot; value=&quot;&lt;%=orderId%&gt;&quot;/&gt;
           &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&lt;%=elementId%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="05D954DAED30B2AD50ECC87FA3385267">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_onebill_view.jsp line 1555 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_onebill_view.jsp</FileName>
<FilePath>webapp/service_onebill_view.jsp</FilePath>
<LineStart>1555</LineStart>
<Snippet>
&lt;!-- Added by Neha for Estimated Fisrt Bill details starts --&gt;
&lt;html:form action=&quot;/firstBillDetail.do&quot; method=&quot;post&quot; target=&quot;_parent&quot;&gt;
&lt;html:hidden property=&quot;elementId&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;orderId&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="598B5A1877EBEF936DAEF1A2F59A5A73">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at equipmentCompare.jsp line 805 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>equipmentCompare.jsp</FileName>
<FilePath>webapp/equipmentCompare.jsp</FilePath>
<LineStart>805</LineStart>
<Snippet>	&lt;tr&gt;
	&lt;td width=&quot;33%&quot;&gt;&lt;/td&gt;
	&lt;s:form id=&quot;submitOrder&quot;&gt;
	&lt;s:hidden name=&quot;syncUpRequest&quot; id=&quot;syncUpRequest&quot;/&gt;
	&lt;s:hidden name=&quot;syncUpFNERequest&quot; id=&quot;syncUpFNERequest&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="8F54B5E20E7FD45653DD2EBFD0632E41">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at CloneUser.jsp line 30 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CloneUser.jsp</FileName>
<FilePath>webapp/systemtools/ittools/CloneUser.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>    &lt;/head&gt;
 &lt;body&gt;
&lt;s:form method=&quot;post&quot; action=&quot;CloneUser&quot; name=&quot;CloneUserForm&quot;&gt;
 
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="238CF4AF8245CD515BD78848E3CFEC5F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_vis_cancel_confirm.jsp line 87 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_vis_cancel_confirm.jsp</FileName>
<FilePath>webapp/fallout_vis_cancel_confirm.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;html:form action=&quot;/fallout_vis_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;html:hidden property=&quot;requestType&quot; value=&quot;cancel&quot;/&gt;
    &lt;html:hidden property=&quot;requestAction&quot; value=&quot;cancel:confirm&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="BCD67ECE8EE1100B16B8D9769C7DC3A0">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at OVfallout_billing.jsp line 332 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>OVfallout_billing.jsp</FileName>
<FilePath>webapp/OVfallout_billing.jsp</FilePath>
<LineStart>332</LineStart>
<Snippet>&lt;!-- VDSI - Janani - WR 23370 - 07/29 - Ends --&gt;

&lt;form name=&quot;RouteForm&quot; action=&quot;/sourceroute.do&quot; method=&quot;post&quot; target=&quot;falloutbox&quot;&gt;
&lt;/form&gt;
  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A3C1E8884A661C97357F0F8C501C500A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_truckroll.jsp line 546 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_truckroll.jsp</FileName>
<FilePath>webapp/view_truckroll.jsp</FilePath>
<LineStart>546</LineStart>
<Snippet>    &lt;/html:form&gt;
    
    &lt;html:form action=&quot;/elements.do&quot; method=&quot;post&quot;&gt;
        &lt;html:hidden property=&quot;FALLOUT_PIEID&quot;/&gt;
        &lt;html:hidden property=&quot;ELEMENT_ORDERID&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="7104A830A95B12830747A0E74C26914A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_parallelpots.jsp line 258 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_parallelpots.jsp</FileName>
<FilePath>webapp/view_parallelpots.jsp</FilePath>
<LineStart>258</LineStart>
<Snippet>                    &lt;jsp:include page=&quot;/filter_parallelpots.jsp&quot;/&gt;
                  &lt;tr&gt;
				  &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
                    &lt;td&gt;
					&lt;!-- COA Look and Feel By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F236A559B5E6C6D15E8241DB344D9D3F">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fcoNotesDetails.jsp line 120 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fcoNotesDetails.jsp</FileName>
<FilePath>webapp/fcoNotesDetails.jsp</FilePath>
<LineStart>120</LineStart>
<Snippet>    &lt;table width=&quot;738&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
     &lt;tr&gt;
       &lt;td&gt;&lt;form name=&quot;EditForm&quot; method=&quot;post&quot;&gt;
        &lt;table width=&quot;738&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
         &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0A64D5EDA819B57A62FD81F6D61C6CEF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at service_disconnect_view.jsp line 1721 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>service_disconnect_view.jsp</FileName>
<FilePath>webapp/service_disconnect_view.jsp</FilePath>
<LineStart>1721</LineStart>
<Snippet>
&lt;!-- Added by shraddha for due date history --&gt;
&lt;html:form action=&quot;/datedetail.do&quot; method=&quot;post&quot; target=&quot;details&quot;&gt;
&lt;html:hidden property=&quot;product&quot; value=&quot;&quot;/&gt;
&lt;html:hidden property=&quot;elementID&quot; value=&quot;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="0CB9FDCFC7BF00478B4BA964195A7C40">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at placeChangeOrder.jsp line 83 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>placeChangeOrder.jsp</FileName>
<FilePath>webapp/placeChangeOrder.jsp</FilePath>
<LineStart>83</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; onload=&quot;activateSubmitButton();&quot;&gt;

&lt;html:form action=&quot;/changeOrder.do&quot; method=&quot;post&quot; target=&quot;placeChangeOrder&quot;&gt;
&lt;jsp:include page=&quot;/sspheader.jsp&quot;/&gt;
    &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="D7A3C9A713557EC40E9C3CA44BC45F6D">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at broadbandGuiSimulatePCN.jsp line 47 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>broadbandGuiSimulatePCN.jsp</FileName>
<FilePath>webapp/businessTools/tools/broadbandGuiSimulatePCN.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;

&lt;s:form name=&quot;BroadbandGuiSimualteOrderForm&quot; method=&quot;post&quot; theme=&quot;simple&quot;&gt;
&lt;table width=&quot;100%&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;  
  &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="69CDD0DF8DCF12E0B399F9F29F3DBC9A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at displayNewMessages.jsp line 43 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>displayNewMessages.jsp</FileName>
<FilePath>webapp/systemtools/ittools/displayNewMessages.jsp</FilePath>
<LineStart>43</LineStart>
<Snippet>
&lt;/head&gt;
&lt;s:form method=&quot;post&quot; action=&quot;orderDiagnosisNew&quot;
	name=&quot;OrderDiagnosisNewForm&quot; theme=&quot;simple&quot;&gt;
	&lt;s:hidden name=&quot;msgId&quot; id=&quot;msgId&quot; /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="CDCBBE8857439FEF5F338D8C9F698E9A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at fallout_hbi_converttoharmony_faliure.jsp line 67 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>fallout_hbi_converttoharmony_faliure.jsp</FileName>
<FilePath>webapp/fallout_hbi_converttoharmony_faliure.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>&lt;/table&gt;

    &lt;html:form action=&quot;/fallout_hbi_detail.do&quot; method=&quot;post&quot;&gt;
    &lt;table width=&quot;712&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#33FFFF&quot;&gt;
      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5ED0E25E06F67B749EAD0B4B701158D1">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at cancelFileUpload.jsp line 80 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>cancelFileUpload.jsp</FileName>
<FilePath>webapp/cancelFileUpload.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>&lt;/table&gt;

 &lt;form name=&quot;frmPbl&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifrmXML&quot;&gt;
    &lt;strong&gt;Specify your File:&lt;/strong&gt;
      &amp;nbsp;&amp;nbsp;&lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt;&lt;br /&gt;&lt;br /&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="5C928A17520A46FDFA9C145A68C0866A">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at order_view_ribs.jsp line 724 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>order_view_ribs.jsp</FileName>
<FilePath>webapp/order_view_ribs.jsp</FilePath>
<LineStart>724</LineStart>
<Snippet>   &lt;/html:form&gt;
   
   &lt;html:form action=&quot;/sort.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
     &lt;html:hidden property=&quot;beanName&quot;/&gt;
     &lt;html:hidden property=&quot;listName&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="B80A79035FCF1535D30B308BFF7ED217">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at view_westQueuePage.jsp line 670 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>view_westQueuePage.jsp</FileName>
<FilePath>webapp/view_westQueuePage.jsp</FilePath>
<LineStart>670</LineStart>
<Snippet>		&lt;/table&gt;
		&lt;jsp:include page=&quot;/fallout_referto_include.jsp&quot;/&gt;
		&lt;html:form action=&quot;/westqueuedetail.do&quot; method=&quot;post&quot; target=&quot;searchbox&quot;&gt;
			&lt;html:hidden property=&quot;orderSpeed&quot;/&gt;
			&lt;html:hidden property=&quot;requestType&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="A9437034C8FECCED238CCF525481A3EF">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at editNotesCancel.jsp line 169 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>editNotesCancel.jsp</FileName>
<FilePath>webapp/editNotesCancel.jsp</FilePath>
<LineStart>169</LineStart>
<Snippet>        &lt;/form&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;html:form action=&quot;/trqueueedit.do&quot; method=&quot;post&quot;&gt;
        &lt;html:hidden property=&quot;orderId&quot; value=&quot;&lt;%=orderId%&gt;&quot;/&gt;
        &lt;html:hidden property=&quot;serviceElementId&quot; value=&quot;&lt;%=elementId%&gt;&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F1B1CEDBAC61EB9FD0C3DB8C629EEBE9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at csgwLookup.jsp line 57 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>csgwLookup.jsp</FileName>
<FilePath>webapp/sspvision/csgwLookup.jsp</FilePath>
<LineStart>57</LineStart>
<Snippet>            &lt;td&gt;
			&lt;!--Search Table Starts Here--&gt;
			&lt;html:form action=&quot;/csgwLookup.do&quot; method=&quot;post&quot; id=&quot;search&quot;&gt;
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="894C125951124A244C30F5F0819F24C7">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at vzWFalloutsReport.jsp line 84 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>vzWFalloutsReport.jsp</FileName>
<FilePath>webapp/vzWFalloutsReport.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>				&lt;td valign=&quot;top&quot;&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; width=&quot;100%&quot; cellpadding=&quot;4&quot; id=&quot;table3&quot; bgcolor=&quot;#bfbfbf&quot;&gt;
				  &lt;tr class=&quot;headbg8&quot;&gt;
				   &lt;html:form  action=&quot;/vzWITReport.do&quot; method=&quot;post&quot;&gt;
				   &lt;html:hidden property=&quot;requestType&quot; /&gt;
				    &lt;td valign=&quot;top&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="98F100A973A90E41EBD206373A5FBA38">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at alarm_list.jsp line 584 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>alarm_list.jsp</FileName>
<FilePath>webapp/alarm_list.jsp</FilePath>
<LineStart>584</LineStart>
<Snippet>
&lt;div style=&quot;float:left; margin-top:5px; width:100%;&quot;&gt;
&lt;html:form method=&quot;post&quot; action=&quot;/alarmbox.do&quot;&gt;
&lt;!--AlarmBox starts--&gt;
&lt;!-- COA Look and Feel (Modified Width) By Sanjay --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="78E0700E-56FE-45A2-A11B-6A560F730576" iid="F85DB8D6F698AE6CEC04BCEFF7B94DC9">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at falloutStatusRIBS.jsp line 103 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>falloutStatusRIBS.jsp</FileName>
<FilePath>webapp/falloutStatusRIBS.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>        &lt;tr&gt;
          &lt;td class=&quot;background4&quot;&gt;
	 &lt;html:form method=&quot;post&quot; action=&quot;/falloutStatRIBS.do&quot; target=&quot;searchbox&quot;&gt;                 
            &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; bgcolor=&quot;#FFFFFF&quot; height=&quot;114&quot;&gt;
              &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="146">
                        <groupTitle>Cross-Site Scripting: Poor Validation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method _jspService() in banGuiNewOrder.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The use of certain encoding constructs, such as the &lt;c:out/&gt; tag with the escapeXml=&quot;true&quot; attribute (the default behavior), will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and &quot; that are HTML-encoded and those beyond &lt;, &gt;, &amp;, &quot;, and ' that are XML-encoded may take on meta-meaning. Relying on such encoding constructs is equivalent to using a weak blacklist to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, Fortify Static Code Analyzer reports cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.

Cross-site scripting (XSS) vulnerabilities occur when:

1. Data enters a web application through an untrusted source. In the case of Reflected XSS, an untrusted source is most frequently a web request, and in the case of Persistent (a.k.a. Stored) XSS -- it is the results of a database query.


2. The data is included in dynamic content that is sent to a web user without being validated.

The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.


Example 1: The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user via the &lt;c:out/&gt; tag.


Employee ID: &lt;c:out value=&quot;${param.eid}&quot;/&gt;



The code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.

Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.


Example 2: The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the &lt;c:out/&gt; tag.


&lt;%...
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(&quot;select * from emp where id=&quot;+eid);
if (rs != null) {
   rs.next();
   String name = rs.getString(&quot;name&quot;);
}
%&gt;

Employee Name: &lt;c:out value=&quot;${name}&quot;/&gt;




As in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a &quot;guestbook&quot; to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.

Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 3: The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.


...
        WebView webview = (WebView) findViewById(R.id.webview);
        webview.getSettings().setJavaScriptEnabled(true);
        String url = this.getIntent().getExtras().getString(&quot;url&quot;);
        webview.loadUrl(URLEncoder.encode(url));
...


If the value of url starts with javascript:, JavaScript code that follows will execute within the context of the web page inside WebView.

As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:

- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.

- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.

- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.


A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties.

Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.

Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.

The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.

A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:

In the content of a block-level element (in the middle of a paragraph of text):

- &quot;&lt;&quot; is special because it introduces a tag.

- &quot;&amp;&quot; is special because it introduces a character entity.

- &quot;&gt;&quot; is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening &quot;&lt;&quot;, but omitted it in error.

The following principles apply to attribute values:

- In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value.

- In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value.

- In attribute values without any quotes, white-space characters, such as space and tab, are special.

- &quot;&amp;&quot; is special when used with certain attributes, because it introduces a character entity.

In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:

- Space, tab, and new line are special because they mark the end of the URL.

- &quot;&amp;&quot; is special because it either introduces a character entity or separates CGI parameters.

- Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.

- The &quot;%&quot; symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, &quot;%&quot; must be filtered if input such as &quot;%68%65%6C%6C%6F&quot; becomes &quot;hello&quot; when it appears on the web page in question.


Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:

- Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag.

Server-side scripts:

- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (&quot;) on output might require additional filtering.

Other possibilities:

- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).

Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display.

If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].

Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database.

2. Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities.

3. To differentiate between the data that are encoded and those that are not, use the Data Validation project template that groups the issues into folders based on the type of encoding applied to their source of input.

4. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>146</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173559">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>311</LineStart>
<Snippet>			// MR111 Added By Sanjay for SDMP Migration starts
			if (&quot;sdmpPcanSearch&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="DD159D2A5A19B39C4988022C68C29002">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getFormOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(ESAPI.encoder().encodeForHTMLAttribute(cleanResults));
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>try {
	 emailEventId = Utility.dataEncoder(request.getParameter(&quot;eventId&quot;));
	 prodCatVal = Utility.dataEncoder(request.getParameter(&quot;prodCat&quot;));
	 srvcTypeval = Utility.dataEncoder(request.getParameter(&quot;servcTyp&quot;));
	 prodCatDetail = Utility.dataEncoder(request.getParameter(&quot;prodDlt&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="21E1E79FAECDED906052BEBA4EA80BBC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>56</LineStart>
<Snippet>					.getBusinessObjectService(&quot;com.verizon.ssp.flowclient.searchorder.AndreiSearch&quot;);
			AndreiSearchForm bean = new AndreiSearchForm();
			bean.setOrderId(request.getParameter(&quot;orderId&quot;));
			bean.setElementId(request.getParameter(&quot;elementId&quot;));
			bean.setAdapterName(request.getParameter(&quot;adptName&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="3E9B11AF0096859B1331F8FB3F83F263">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>477</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleTVEPackageLookup Method&quot;);
		getWebserviceInfo(&quot;RetrieveTVEPackageInfo&quot;, info);
		String outputXML = invokeWebService(request, info);
		;
		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="B1ED22EB0D8C95A035BEC692CA6F361B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in readerXml.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>readerXml.jsp</FileName>
<FilePath>webapp/readerXml.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>&lt;%}
else{%&gt;
&lt;%@ page contentType=&quot;application/xml&quot; %&gt; &lt;%=ESAPI.encoder().encodeForHTML(strContentXML)%&gt;

&lt;%}%&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>readerXml.jsp</FileName>
<FilePath>webapp/readerXml.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>if (request.getParameter(&quot;contentXML&quot;) == null) pageContext.forward(&quot;error.jsp&quot;);

String strContentXML = (String)request.getParameter(&quot;contentXML&quot;);
strContentXML = strContentXML.replaceAll(&quot;&amp;apos;&quot;, &quot;'&quot;);
strContentXML = strContentXML.replaceAll(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="C8715B076DD9249D0CCE4ACA6D00F50F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in home_new.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>		}
		&lt;!-- Added By Sanjay Ends --&gt;
		if(&lt;%=ESAPI.encoder().encodeForHTML(visionId)%&gt;!=null)
		{
			var VISIONID = 'V:&lt;%= ESAPI.encoder().encodeForHTML(visionId)%&gt;' ;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LogonForwardAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/LogonForwardAction.java</FilePath>
<LineStart>65</LineStart>
<Snippet>		String ban = request.getParameter(&quot;coaBAN&quot;);
		String visionCustId = request.getParameter(&quot;coaVisionCustomerId&quot;);
		String visionAcctId = request.getParameter(&quot;coaVisionAccountId&quot;);
		String dtvBTN = request.getParameter(PropertyManager
				.getPropertyToggleValue(&quot;DTV_PUNCHOUT_BTN_REQUESTNAME&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="379522DDE7C6160EBEEF7DFB6FAC0989">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					{
					%&gt;
					if(opt[intLoop].value == &quot;&lt;%=ESAPI.encoder().encodeForHTML(toolNames[i].toString())%&gt;&quot;)
					{
					if(toolnames == &quot;&quot;)</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPGUIUserManagementDAOService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermgmt/SSPGUIUserManagementDAOService.java</FilePath>
<LineStart>1068</LineStart>
<Snippet>			reqDtlsPstmt.setString(++reqDtlsPstmtIdx, agentVzId.trim()
					.toUpperCase());
			reqDtlsRs = reqDtlsPstmt.executeQuery();
			if (reqDtlsRs != null) {
				remAgntDtl = new SSPGUIUserManagementDTO();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="55B2B5E2CEB3482BAEA253EF9CF077DA">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>293</LineStart>
<Snippet>				if (&quot;visionCustomerId&quot;.equalsIgnoreCase(keys)) {
					visionCustId = (String) request
							.getParameter(&quot;visionCustomerId&quot;);
					EasyLogger.info(&quot;visionCustomerId : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="6E9088B6A7723AB9AA50E0E0C47835F6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					toolnames = &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;
					else
					toolnames = toolnames+&quot;,&quot;+ &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;
					}
				 &lt;% } } %&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>if(resId!=null &amp;&amp; !(resId.equals(&quot;&quot;)) &amp;&amp; resId.contains(&quot;,&quot;))
{
resourceIds = removedataBean.getResourceIds().split(&quot;,&quot;);
}
if(toolnamevar!=null &amp;&amp; !(toolnamevar.equals(&quot;&quot;)) &amp;&amp; toolnamevar.contains(&quot;,&quot;))</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermgmt.SSPGUIUserManagementDTO.getResourceIds()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="CF8AC0B499388A55EA2D7112FD1A3F23">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getMapTrigPassDetailView.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getMapTrigPassDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigPassDetailView.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>	PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
	  String cleanResults = sanitizer.sanitize(displayTable);
	response.getWriter().write(cleanResults);
%&gt;
&lt;!--\getMapTrigPassDetailView.jsp--&gt;</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getMapTrigPassDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigPassDetailView.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>	String viewFlag = request.getParameter(&quot;flag&quot;);
	String testCaseId = request.getParameter(&quot;tstCaseId&quot;);
	String batchId = request.getParameter(&quot;ESAPI.encoder().encodeForHTML(batchId)&quot;);
	String dispInfo = request.getParameter(&quot;typeId&quot;);
	TestingToolService testToolSrvc = new TestingToolService();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="EE7F1FE71363F3F7488F216AD459A7D9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>152</LineStart>
<Snippet>										&lt;tr&gt;
											&lt;td width=&quot;20%&quot;&gt;Current Enrollment Status: &lt;/td&gt;
											&lt;td &gt;&lt;s:property value=&quot;autoForm.enrollmentStatus&quot;/&gt;&lt;/td&gt;
										&lt;/tr&gt;
										&lt;tr&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/form/AutopayDetailsForm.java</FilePath>
<LineStart>43</LineStart>
<Snippet>	}

	public void setEnrollmentStatus(String enrollmentStatus) {
		this.enrollmentStatus = enrollmentStatus;
	}</Snippet>
<TargetFunction>setEnrollmentStatus(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="B6DDCC447AC0564F1A1395602CE15EC9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>164</LineStart>
<Snippet>						%&gt;
						&lt;td align=&quot;left&quot;&gt;
						&lt;input type=&quot;checkbox&quot; name=&quot;toolname&quot; value=&quot;&lt;%=ESAPI.encoder().encodeForHTMLAttribute(toolarray[i].toString())%&gt;&quot;&gt; 
						&lt;%=ESAPI.encoder().encodeForHTML(toolarray[i].toString())%&gt;&lt;/input&gt;&lt;/td&gt;
						&lt;%</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPGUIUserManagementDAOService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermgmt/SSPGUIUserManagementDAOService.java</FilePath>
<LineStart>1068</LineStart>
<Snippet>			reqDtlsPstmt.setString(++reqDtlsPstmtIdx, agentVzId.trim()
					.toUpperCase());
			reqDtlsRs = reqDtlsPstmt.executeQuery();
			if (reqDtlsRs != null) {
				remAgntDtl = new SSPGUIUserManagementDTO();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173554">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>223</LineStart>
<Snippet>					|| &quot;monEmail&quot;.equalsIgnoreCase(keys)) {
				if (!isBanPresent) {
					tporderId = Utility.dataEncoder(request.getParameter(keys));
					search_type = keys;
					// Thirdparty page for displaying Email details in Coffee -</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="63E965A0ED1BD5806BB5DBC163A3A3AC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailAction.java</FilePath>
<LineStart>762</LineStart>
<Snippet>				PrintWriter writer = response.getWriter();
				responseXML=Utility.getValidContent(responseXML); 
				  writer.print(ESAPI.encoder().encodeForXML(responseXML));
			} catch (Exception e) {
				EasyLogger.info(&quot;Unable to write to printwriter&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailXMLHelper.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailXMLHelper.java</FilePath>
<LineStart>57</LineStart>
<Snippet>				parser.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
				parser.parse(new InputSource(new StringReader(xml)));
				requestDoc = parser.getDocument();
				requestDoc = (Document) jaxbUnmarshaller.unmarshal(requestDoc);
				EasyLogger.info(&quot;request Doc Loaded&quot;);</Snippet>
<TargetFunction>org.apache.xerces.parsers.AbstractDOMParser.getDocument()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="79E84BCF9F2A9FE92B52540A8EFB4EDA">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in JMSToolAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>JMSToolAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/jmstool/JMSToolAction.java</FilePath>
<LineStart>85</LineStart>
<Snippet>			EasyLogger.info(&quot;Final XMl1&quot; + responseXML);
			writer = response.getWriter(); 
			writer.print(ESAPI.encoder().encodeForXML(responseXML.toString()));
			EasyLogger.info(&quot;Exiting ActionClass for OrderReviewTool..&quot;);
</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XMLHelper.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/jmstool/XMLHelper.java</FilePath>
<LineStart>119</LineStart>
<Snippet>							jmsToolForm.getServerIP(), userId)) &gt; 0) {
						EasyLogger.info(&quot;Save Successful&quot;);
						displayMessage = jmsToolForm.getAddType()
								+ &quot; Saved Successfully!!!&quot;;
					} else {</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.jmstool.JMSToolForm.getAddType()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="3C0DF92C4787BAE1F3CF85A3CB89CA2C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in banGuiUpdateBan.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>banGuiUpdateBan.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiUpdateBan.jsp</FilePath>
<LineStart>98</LineStart>
<Snippet>	&lt;jsp:forward page=&quot;adapterTools/banGuiCreateOrder.jsp&quot;&gt;&lt;/jsp:forward&gt;	
&lt;% } %&gt;
&lt;s:set var=&quot;strBanBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(strBan)%&gt;&lt;/s:set&gt;
&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;
</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BanGuiSearchBanService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/adapterTools/service/BanGuiSearchBanService.java</FilePath>
<LineStart>274</LineStart>
<Snippet>    			stmt.setString(3,searchDTO.getBillingAcctNumber());
    			stmt.setString(4,searchDTO.getOrderId());
    			rs = stmt.executeQuery();

    			while (rs.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="09F0E4567C44CFACC567044B7072B4A6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>458</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside GetXREFGARLookUpDetails Method Got Info&quot;);

		String outputXML = invokeWebService(request, info);
		;
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002CA">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>258</LineStart>
<Snippet>					|| &quot;emailAddress&quot;.equalsIgnoreCase(keys)
					|| &quot;addressIdsmb&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="1F46B142FC4814EEA182BD5BC0151023">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in readerXml.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>readerXml.jsp</FileName>
<FilePath>webapp/readerXml.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>&lt;html&gt;
&lt;body&gt;
&lt;pre&gt;&lt;%=ESAPI.encoder().encodeForHTML((String)request.getParameter(&quot;contentXML&quot;))%&gt;&lt;/pre&gt;

&lt;/body&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>readerXml.jsp</FileName>
<FilePath>webapp/readerXml.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>&lt;html&gt;
&lt;body&gt;
&lt;pre&gt;&lt;%=ESAPI.encoder().encodeForHTML((String)request.getParameter(&quot;contentXML&quot;))%&gt;&lt;/pre&gt;

&lt;/body&gt;</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="66AED72CE9BC327F018C55289E70C6A4">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>93</LineStart>
<Snippet>			}
			try{
			userID = Utility.dataEncoder(request.getHeader(&quot;sm_user&quot;));
		} catch (Exception e1) {
			e1.printStackTrace();</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="CB6F56C0E7A9C4B74FD2EDF78F256820">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>565</LineStart>
<Snippet>			throws DAOException {
		getWebserviceInfo(&quot;AccountProductProfile&quot;, info);
		String outputXML = invokeWebService(request, info);
		return outputXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="87A847C5B8656CB84FC4068834071EEC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>538</LineStart>
<Snippet>		getWebserviceInfo(&quot;BTNBundleSearch&quot;, info); // TODO: Replace the key
													// with proper DS String
		String responseXML = invokeWebService(request, info);
		return responseXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="FAA8CD1FD77D08DC557102783F6D53EC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in pushToBill.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>pushToBill.jsp</FileName>
<FilePath>webapp/systemtools/ittools/pushToBill.jsp</FilePath>
<LineStart>267</LineStart>
<Snippet>                    &lt;/td&gt; 
                    &lt;td width=&quot;91&quot;&gt;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(orderID)&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;61&quot;&gt;&lt;s:property value=&quot;orderType&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;121&quot;&gt;&lt;s:property value=&quot;masterOrderID&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;83&quot;&gt;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(dslTN)&quot;/&gt;&lt;/td&gt; </Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushToBillAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/PushToBillAction.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	}

	public void setOrderType(String orderType) {
		this.orderType = orderType;
	}</Snippet>
<TargetFunction>setOrderType(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="3141793731B41C4D7059D8E44805640F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getFormOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(ESAPI.encoder().encodeForHTMLAttribute(cleanResults));
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushMailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/testingtool/PushMailService.java</FilePath>
<LineStart>188</LineStart>
<Snippet>				stmt.setInt(2, Integer.parseInt(prodCat));
				stmt.setString(3, srvcType);
				resultSet = stmt.executeQuery();
				while (resultSet != null &amp;&amp; resultSet.next()) {
					orderId = resultSet.getString(&quot;ORDER_ID&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="5DE9C776097C2279DCF4BD4668AD1037">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>301</LineStart>
<Snippet>				if (&quot;visionAccountId&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountId&quot;));
					EasyLogger.info(&quot;visionAccountId : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="D15BF08FF1D6C9EFA96AB6BAEB9E2B77">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in OrderReviewAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>OrderReviewAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/orderReviewTool/OrderReviewAction.java</FilePath>
<LineStart>262</LineStart>
<Snippet>				writer = response.getWriter();
				  
				writer.print(ESAPI.encoder().encodeForXML(responseXML.toString()));
				EasyLogger.info(&quot;Exiting ActionClass for OrderReviewTool..&quot;);
			} catch (Exception e) {</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AccountVO.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/AccountVO.java</FilePath>
<LineStart>469</LineStart>
<Snippet>	}

	public void setRetrievalDescription(String retrievalDescription) {
		this.retrievalDescription = retrievalDescription;
	}</Snippet>
<TargetFunction>setRetrievalDescription(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="D612EFF123BC5AB26548714D8BBCB867">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>56</LineStart>
<Snippet>					.getBusinessObjectService(&quot;com.verizon.ssp.flowclient.searchorder.AndreiSearch&quot;);
			AndreiSearchForm bean = new AndreiSearchForm();
			bean.setOrderId(request.getParameter(&quot;orderId&quot;));
			bean.setElementId(request.getParameter(&quot;elementId&quot;));
			bean.setAdapterName(request.getParameter(&quot;adptName&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="F6A8A35BF3F0942414307033A622A04B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>280</LineStart>
<Snippet>				if (&quot;visionAccountIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountIdEmail&quot;));
					EasyLogger.info(&quot;visionAccountIdEmail : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="DD7483AA25C20DFF5959C98CDF1A8FFB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>519</LineStart>
<Snippet>			WebServiceInfo info) throws DAOException {
		getWebserviceInfo(&quot;AddressValidation&quot;, info);
		String outputXML = invokeWebService(request, info);
		return outputXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="56E767A1A2DF804A789A379CF5A7C006">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailAction.java</FilePath>
<LineStart>762</LineStart>
<Snippet>				PrintWriter writer = response.getWriter();
				responseXML=Utility.getValidContent(responseXML); 
				  writer.print(ESAPI.encoder().encodeForXML(responseXML));
			} catch (Exception e) {
				EasyLogger.info(&quot;Unable to write to printwriter&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailToolService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailToolService.java</FilePath>
<LineStart>13421</LineStart>
<Snippet>			connection = getConnection();
			stmt = connection.createStatement();
			rs = stmt.executeQuery(query);

			while (rs.next()) {</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9B16125AAE8845BA34DC7AC60C19842C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>280</LineStart>
<Snippet>				if (&quot;visionAccountIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountIdEmail&quot;));
					EasyLogger.info(&quot;visionAccountIdEmail : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="C245D50D9646AC4418074529FCAEEBCB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;center&gt;
						&lt;s:if test=&quot;errorMessage!=null&quot;&gt;
							&lt;b&gt; &lt;font color='red'&gt;&lt;s:property value=&quot;errorMessage&quot; /&gt;&lt;/font&gt;&lt;/b&gt;
						&lt;/s:if&gt;
					&lt;/center&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/AutopayDetailsAction.java</FilePath>
<LineStart>54</LineStart>
<Snippet>	}

	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}</Snippet>
<TargetFunction>setErrorMessage(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="31A09CA8FF9A694ED3DC6320B75DD51A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>156</LineStart>
<Snippet>										&lt;tr&gt;
											&lt;td width=&quot;20%&quot;&gt;Autopay Method: &lt;/td&gt;
											&lt;td &gt;&lt;s:property value=&quot;autoForm.autopayMethod&quot;/&gt;&lt;/td&gt;
										&lt;/tr&gt;
										&lt;tr&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/form/AutopayDetailsForm.java</FilePath>
<LineStart>51</LineStart>
<Snippet>	}

	public void setAutopayMethod(String autopayMethod) {
		this.autopayMethod = autopayMethod;
	}</Snippet>
<TargetFunction>setAutopayMethod(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1D9DBF01813D8FE1797152C6F0B865F9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>293</LineStart>
<Snippet>				if (&quot;visionCustomerId&quot;.equalsIgnoreCase(keys)) {
					visionCustId = (String) request
							.getParameter(&quot;visionCustomerId&quot;);
					EasyLogger.info(&quot;visionCustomerId : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="F673E7FE90428A8634B4E636FDC10BA6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>557</LineStart>
<Snippet>			throws DAOException {
		getWebserviceInfo(&quot;PostFirmSaleService&quot;, info);
		String outputXML = invokeWebService(request, info);
		return outputXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9FC4096AC1CB38ADD45A057574604A93">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>301</LineStart>
<Snippet>				if (&quot;visionAccountId&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountId&quot;));
					EasyLogger.info(&quot;visionAccountId : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="111CD02F747087096B8CC1BA102096E9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>486</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleTVEAddEditCustProfile Method&quot;);
		getWebserviceInfo(&quot;TVEAddEditCustProfile&quot;, info);
		String outputXML = invokeWebService(request, info);
		;
		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="525F2CF991B98CA54FCB41274AB2A84F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in pushToBill.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>pushToBill.jsp</FileName>
<FilePath>webapp/systemtools/ittools/pushToBill.jsp</FilePath>
<LineStart>271</LineStart>
<Snippet>                    &lt;td width=&quot;83&quot;&gt;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(dslTN)&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;70&quot;&gt;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(queueName)&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;62&quot;&gt;&lt;s:property value=&quot;dueDate&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;74&quot;&gt;&lt;s:property value=&quot;assingedBy&quot;/&gt;&lt;/td&gt; 
                    &lt;td width=&quot;49&quot;&gt;&lt;s:property value=&quot;assingedTo&quot;/&gt;&lt;/td&gt; </Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushToBillAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/PushToBillAction.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	}

	public void setDueDate(Date inDueDate) {
		dueDate = inDueDate;
	}</Snippet>
<TargetFunction>setDueDate(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1721CDB6550225864A75CC6775C2BE41">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in erateDiscountDetailsTool.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>erateDiscountDetailsTool.jsp</FileName>
<FilePath>webapp/businessTools/tools/erateDiscountDetailsTool.jsp</FilePath>
<LineStart>204</LineStart>
<Snippet>						&lt;strong&gt;:&lt;/strong&gt;
					&lt;/td&gt;
					&lt;td class=&quot;coabigfont&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;edate&quot; value=&quot;&lt;s:property value=&quot;edate&quot; /&gt;&quot; readonly/&gt;&lt;%-- &lt;s:textfield name =&quot;edate&quot;   styleClass=&quot;input_text&quot; id=&quot;datepickerDueDate&quot;/&gt; --%&gt;&lt;/td&gt;
					&lt;td class=&quot;coabigfont&quot;&gt;&amp;nbsp;&lt;/td&gt;
				&lt;/tr&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ERateDiscAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ERateDiscAction.java</FilePath>
<LineStart>222</LineStart>
<Snippet>	}

	public void setEdate(Date edate) {
		this.edate = edate;
	}</Snippet>
<TargetFunction>setEdate(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="55B2B5E2CEB3482BAEA253EF9CF077D9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>293</LineStart>
<Snippet>				if (&quot;visionCustomerId&quot;.equalsIgnoreCase(keys)) {
					visionCustId = (String) request
							.getParameter(&quot;visionCustomerId&quot;);
					EasyLogger.info(&quot;visionCustomerId : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="62C90B6B16F35A835872E91EE1B34E35">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in banGuiNewOrder.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>banGuiNewOrder.jsp</FileName>
<FilePath>webapp/adapterTools/banGuiNewOrder.jsp</FilePath>
<LineStart>176</LineStart>
<Snippet>	}
}
var  responseXML=&quot;&lt;%=ESAPI.encoder().encodeForXML(escapeXml(responseXML))%&gt;&quot;;

$(function() {</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BanGuiSearchBanService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/adapterTools/service/BanGuiSearchBanService.java</FilePath>
<LineStart>274</LineStart>
<Snippet>    			stmt.setString(3,searchDTO.getBillingAcctNumber());
    			stmt.setString(4,searchDTO.getOrderId());
    			rs = stmt.executeQuery();

    			while (rs.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="00FBF3953B02AFF2C43F53BD7E224C3E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>emailtool.jsp</FileName>
<FilePath>webapp/emailtool/emailtool.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>					userId = request.getHeader(&quot;sm_user&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;vzid&quot;);

				authReason = request.getHeader(&quot;SM_AUTHREASON&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="F8693D2BD4D866C02F9F465E7FD79014">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in home_new.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>70</LineStart>
<Snippet>		}
		&lt;!-- Added By Sanjay starts --&gt;
		if(&lt;%=ESAPI.encoder().encodeForHTML(ban)%&gt;!=null)
		{
			var BAN = '&lt;%=ESAPI.encoder().encodeForHTML(ban)%&gt;' ;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LogonForwardAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/LogonForwardAction.java</FilePath>
<LineStart>63</LineStart>
<Snippet>				.info(&quot;From LogonForwardAction invoke Home.jsp - After Authentication &quot;);
		// Added By Sanjay Starts
		String ban = request.getParameter(&quot;coaBAN&quot;);
		String visionCustId = request.getParameter(&quot;coaVisionCustomerId&quot;);
		String visionAcctId = request.getParameter(&quot;coaVisionAccountId&quot;);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="D1903478CF7A7D41CA6DEE139A49FFBE">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getMapTrigFailDetailView.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getMapTrigFailDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigFailDetailView.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>	PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
	String cleanResults = sanitizer.sanitize(AllData);
	response.getWriter().write(cleanResults); 
%&gt;
&lt;!--\getMapTrigFailDetailView.jsp--&gt;</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getMapTrigFailDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigFailDetailView.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>&lt;%
	String viewFlag = request.getParameter(&quot;flag&quot;);
	String testCaseId = request.getParameter(&quot;ESAPI.encoder().encodeForHTML(tstCaseId)&quot;);
	String batchId = request.getParameter(&quot;batchId&quot;);
	String dispInfo = request.getParameter(&quot;typeId&quot;);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="4FE368A3A9CC7BD9F64BBDFF5A7E7613">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>				if (&quot;visionCustomerIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionCustId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionCustomerIdEmail&quot;));
					EasyLogger.info(&quot;visionCustomerIdEmail : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="5D0082B65831DCFA83D22CD1ABE83AE3">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailApprovalAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailApprovalAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>				EasyLogger.info(&quot;Final EmailApprovalAction XMl1&quot; + responseXML);
				PrintWriter writer = response.getWriter();
                writer.print(ESAPI.encoder().encodeForXML(responseXML));

</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailXMLHelper.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailXMLHelper.java</FilePath>
<LineStart>57</LineStart>
<Snippet>				parser.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
				parser.parse(new InputSource(new StringReader(xml)));
				requestDoc = parser.getDocument();
				requestDoc = (Document) jaxbUnmarshaller.unmarshal(requestDoc);
				EasyLogger.info(&quot;request Doc Loaded&quot;);</Snippet>
<TargetFunction>org.apache.xerces.parsers.AbstractDOMParser.getDocument()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="4894A159585955075AC38122D04F791A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in home_new.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>		}
		&lt;!-- Added By Sanjay Ends --&gt;
		if(&lt;%=ESAPI.encoder().encodeForHTML(visionId)%&gt;!=null)
		{
			var VISIONID = 'V:&lt;%= ESAPI.encoder().encodeForHTML(visionId)%&gt;' ;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LogonForwardAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/LogonForwardAction.java</FilePath>
<LineStart>64</LineStart>
<Snippet>		// Added By Sanjay Starts
		String ban = request.getParameter(&quot;coaBAN&quot;);
		String visionCustId = request.getParameter(&quot;coaVisionCustomerId&quot;);
		String visionAcctId = request.getParameter(&quot;coaVisionAccountId&quot;);
		String dtvBTN = request.getParameter(PropertyManager</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="05A837C7F44B63C9C942406D8502A212">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in ssppgOVPrdtTabPage.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>ssppgOVPrdtTabPage.jsp</FileName>
<FilePath>webapp/ssppgOVPrdtTabPage.jsp</FilePath>
<LineStart>97</LineStart>
<Snippet>%&gt;
&lt;bean:define id=&quot;svcTabBean&quot; value=&quot;&lt;%=svcTab%&gt;&quot;/&gt;
										&lt;li&gt;&lt;a href=&quot;#&lt;bean:write name=&quot;svcTabBean&quot;/&gt;SvcId&quot; class=&quot;active&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(tabPageName)%&gt;&lt;/a&gt;&lt;/li&gt;
&lt;%
		} else {</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OVSearchOrderDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/sspperigon/orderview/service/OVSearchOrderDetailsService.java</FilePath>
<LineStart>491</LineStart>
<Snippet>				OVSearchOrderForm srchOrdFrm = (OVSearchOrderForm) ordSvcLstItr
						.next();
				String service = srchOrdFrm.getService();
				if (ordSvcMap.containsKey(service)) {
					HashMap srvTypMap = (HashMap) ordSvcMap.get(service);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.sspperigon.orderview.form.OVSearchOrderForm.getService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="32ABFDA14F0544ACB9673CE344A173D6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in visionReaderXml.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>visionReaderXml.jsp</FileName>
<FilePath>webapp/businessTools/tools/visionReaderXml.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>%&gt;

&lt;%@ page contentType=&quot;application/xml&quot; %&gt; &lt;%=ESAPI.encoder().encodeForHTML(strContentXML)%&gt;

&lt;!--\visionReaderXml.jsp--&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionServicesLogsSearchService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/VisionServicesLogsSearchService.java</FilePath>
<LineStart>44</LineStart>
<Snippet>					+ query);

			rs = stmt.executeQuery();

			while (rs.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="11FB5B1CCACF46C69CB49BD437C0E224">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>468</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleTVECustProfile Method&quot;);
		getWebserviceInfo(&quot;RetrieveTVECustProfile&quot;, info);
		String outputXML = invokeWebService(request, info);
		;
		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="F178768F6069DE0BD2DD4674F83CB6F2">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			}
			try{
			userID = Utility.dataEncoder(request.getHeader(&quot;vzid&quot;));
		} catch (Exception e1) {
			e1.printStackTrace();</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="E84BD647BAECED9A700231C7A0D68DAC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					{
					%&gt;
					if(opt[intLoop].value == &quot;&lt;%=ESAPI.encoder().encodeForHTML(toolNames[i].toString())%&gt;&quot;)
					{
					if(toolnames == &quot;&quot;)</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>50</LineStart>
<Snippet>if(toolnamevar!=null &amp;&amp; !(toolnamevar.equals(&quot;&quot;)) &amp;&amp; toolnamevar.contains(&quot;,&quot;))
{
toolNames = removedataBean.getToolNames().split(&quot;,&quot;);
}
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermgmt.SSPGUIUserManagementDTO.getToolNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9C3C7A7E2F03C8387F191D443B0EBFE9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			if (eventBeans != null &amp;&amp; eventBeans.size() &gt; 0)
				request.setAttribute(&quot;EVENT_LIST&quot;, eventBeans);
			request.setAttribute(&quot;orderId&quot;, Utility.getValidString(bean.getOrderId()));
			request.setAttribute(&quot;adptName&quot;, Utility.getValidString(bean.getAdapterName()));
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.searchorder.AndreiSearchForm.getOrderId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="EFDBED345F16654DB31C380A1CE50D4A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ITOWirelessProfileAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ITOWirelessProfileAction.java</FilePath>
<LineStart>119</LineStart>
<Snippet>		try{
		in = new BufferedReader(new InputStreamReader(
				connection.getInputStream()));
		String inputLine;
		StringBuffer strSimOutputBuff = new StringBuffer();</Snippet>
<TargetFunction>java.net.URLConnection.getInputStream()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002CB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>258</LineStart>
<Snippet>					|| &quot;emailAddress&quot;.equalsIgnoreCase(keys)
					|| &quot;addressIdsmb&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="E3083EE4E2E71B9E96383DC493B2E95E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>397</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleAccountHistoryService Method Got Info&quot;);

		String outputXML = invokeWebService(request, info);

		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="53A0D21E7F3726CD350D02818F3E3C6E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1335</LineStart>
<Snippet>
		getWebserviceInfo(&quot;STBOrderCorrection&quot;, info);
		String outputXML = invokeWebService(request, info);
		System.out.println(&quot;After  invokeWebService&quot;);
		System.out.println(&quot;outputXML : &quot; + outputXML);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="10AE5B86D5AD72D657E823C6AFBFE19D">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getFormOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(ESAPI.encoder().encodeForHTMLAttribute(cleanResults));
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>	 emailEventId = Utility.dataEncoder(request.getParameter(&quot;eventId&quot;));
	 prodCatVal = Utility.dataEncoder(request.getParameter(&quot;prodCat&quot;));
	 srvcTypeval = Utility.dataEncoder(request.getParameter(&quot;servcTyp&quot;));
	 prodCatDetail = Utility.dataEncoder(request.getParameter(&quot;prodDlt&quot;));
} catch(Exception e) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="9CF5A5ADEF7A8EA51298F2001345FEAB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getSTNOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getSTNOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getSTNOrderIdsDetails.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(cleanResults);
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>RAFDetailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/RAF/RAFDetailService.java</FilePath>
<LineStart>73</LineStart>
<Snippet>				}
				if(stmt!=null){
				resultSet = stmt.executeQuery();
				while (resultSet != null &amp;&amp; resultSet.next()) {
					findBlob = true;</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="F1CFEA447B350C05BD2764B2366479D1">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Authentication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/vaas/Authentication.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
		if (loginName == null || loginName.equals(&quot;&quot;)) {
			loginName = request.getHeader(&quot;sm_user&quot;);
			if (loginName == null || loginName.equals(&quot;&quot;)) {
				loginName = (String) session.getAttribute(&quot;vzid&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="67805293A1D930A0430F962CB45C735F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailApprovalAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailApprovalAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>				EasyLogger.info(&quot;Final EmailApprovalAction XMl1&quot; + responseXML);
				PrintWriter writer = response.getWriter();
                writer.print(ESAPI.encoder().encodeForXML(responseXML));

</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailApprovalUnitService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalUnitService.java</FilePath>
<LineStart>4448</LineStart>
<Snippet>			prepareStatement.setInt(1, version_id);
			prepareStatement.setInt(2, ruleId);
			rs = prepareStatement.executeQuery();
			ruleMap = new java.util.HashMap();
			while (rs != null &amp;&amp; rs.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="8396671B734073109F78DADC7E88CB1B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>emailtool.jsp</FileName>
<FilePath>webapp/emailtool/emailtool.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>				userProfile = new UserProfile();
				header = &quot;N&quot;;
				userId = request.getHeader(&quot;VZID&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;sm_user&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="AC39B2D8FA598AD2A11F9A9BDA83E083">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailApprovalAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailApprovalAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>				EasyLogger.info(&quot;Final EmailApprovalAction XMl1&quot; + responseXML);
				PrintWriter writer = response.getWriter();
                writer.print(ESAPI.encoder().encodeForXML(responseXML));

</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailApprovalUnitService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalUnitService.java</FilePath>
<LineStart>5065</LineStart>
<Snippet>			prepareStatement.setInt(1, tempVerId);
			prepareStatement.setInt(2, tempId);
			rs = prepareStatement.executeQuery();

			if (rs != null &amp;&amp; rs.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="69D1EE551F25A59717D897981C5DFC54">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getFormEvntIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getFormEvntIdsDetails.jsp</FileName>
<FilePath>webapp/getFormEvntIdsDetails.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(result);
		response.getWriter().write(cleanResults);
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushMailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/testingtool/PushMailService.java</FilePath>
<LineStart>239</LineStart>
<Snippet>			stmt.setString(1, srvcType);
			stmt.setInt(2, Integer.parseInt(prodCat));
			resultSet = stmt.executeQuery();
			while (resultSet != null &amp;&amp; resultSet.next()) {
				emailEvntId = resultSet.getString(&quot;EMAIL_EVENT_ID&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="A827A8111194096685544DB100968A1A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getFormOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(ESAPI.encoder().encodeForHTMLAttribute(cleanResults));
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>	 prodCatVal = Utility.dataEncoder(request.getParameter(&quot;prodCat&quot;));
	 srvcTypeval = Utility.dataEncoder(request.getParameter(&quot;servcTyp&quot;));
	 prodCatDetail = Utility.dataEncoder(request.getParameter(&quot;prodDlt&quot;));
} catch(Exception e) {
	e.printStackTrace();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9C3C7A7E2F03C8387F191D443B0EBFEA">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			if (eventBeans != null &amp;&amp; eventBeans.size() &gt; 0)
				request.setAttribute(&quot;EVENT_LIST&quot;, eventBeans);
			request.setAttribute(&quot;orderId&quot;, Utility.getValidString(bean.getOrderId()));
			request.setAttribute(&quot;adptName&quot;, Utility.getValidString(bean.getAdapterName()));
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.searchorder.AndreiSearchForm.getOrderId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="4D071B4B18BA5FDD8BC22F54E2DDA823">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>165</LineStart>
<Snippet>						&lt;td align=&quot;left&quot;&gt;
						&lt;input type=&quot;checkbox&quot; name=&quot;toolname&quot; value=&quot;&lt;%=ESAPI.encoder().encodeForHTMLAttribute(toolarray[i].toString())%&gt;&quot;&gt; 
						&lt;%=ESAPI.encoder().encodeForHTML(toolarray[i].toString())%&gt;&lt;/input&gt;&lt;/td&gt;
						&lt;%
						int j =i+1;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPGUIUserManagementDAOService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermgmt/SSPGUIUserManagementDAOService.java</FilePath>
<LineStart>1068</LineStart>
<Snippet>			reqDtlsPstmt.setString(++reqDtlsPstmtIdx, agentVzId.trim()
					.toUpperCase());
			reqDtlsRs = reqDtlsPstmt.executeQuery();
			if (reqDtlsRs != null) {
				remAgntDtl = new SSPGUIUserManagementDTO();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="17870078F0D0DFE6E79D367B2AD44710">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in erateDiscountModify.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>erateDiscountModify.jsp</FileName>
<FilePath>webapp/businessTools/tools/erateDiscountModify.jsp</FilePath>
<LineStart>134</LineStart>
<Snippet>&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Begin Date:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;bdate&quot; value=&quot;&lt;s:property value=&quot;bdate&quot; /&gt;&quot; readonly/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ERateDiscAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ERateDiscAction.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	}

	public void setBdate(Date bdate) {
		this.bdate = bdate;
	}</Snippet>
<TargetFunction>setBdate(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="F8693D2BD4D866C02F9F465E7FD79015">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in home_new.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>		if(&lt;%=ESAPI.encoder().encodeForHTML(ban)%&gt;!=null)
		{
			var BAN = '&lt;%=ESAPI.encoder().encodeForHTML(ban)%&gt;' ;

			var link = 'headerSearch.do?searchInput='+BAN+'&amp;src=COFEEBAN';</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LogonForwardAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/LogonForwardAction.java</FilePath>
<LineStart>63</LineStart>
<Snippet>				.info(&quot;From LogonForwardAction invoke Home.jsp - After Authentication &quot;);
		// Added By Sanjay Starts
		String ban = request.getParameter(&quot;coaBAN&quot;);
		String visionCustId = request.getParameter(&quot;coaVisionCustomerId&quot;);
		String visionAcctId = request.getParameter(&quot;coaVisionAccountId&quot;);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="24AAC15E9111222915C3E657F0E71575">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>427</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleAccountIdSearchService Method Got Info&quot;);

		String outputXML = invokeWebService(request, info);

		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="A1794CC85A9F580969C104ACDDD8A3B9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1635</LineStart>
<Snippet>			throws DAOException {
		getWebserviceInfo(&quot;WIREPROFILE&quot;, info); //
		String response = invokeWebService(request, info);
		return response;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="4FE368A3A9CC7BD9F64BBDFF5A7E7614">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>				if (&quot;visionCustomerIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionCustId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionCustomerIdEmail&quot;));
					EasyLogger.info(&quot;visionCustomerIdEmail : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9D71A124D905CDD4FBD1A33B27286463">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>160</LineStart>
<Snippet>										&lt;tr&gt;
											&lt;td width=&quot;20%&quot;&gt;Trasaction Date: &lt;/td&gt;
											&lt;td &gt;&lt;s:property value=&quot;autoForm.enrollmentDate&quot;/&gt;&lt;/td&gt;
										&lt;/tr&gt;
									&lt;/table&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/form/AutopayDetailsForm.java</FilePath>
<LineStart>59</LineStart>
<Snippet>	}

	public void setEnrollmentDate(String enrollmentDate) {
		this.enrollmentDate = enrollmentDate;
	}</Snippet>
<TargetFunction>setEnrollmentDate(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="C93FEBC6F313CA8F2332A434F9FBB97C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>527</LineStart>
<Snippet>			WebServiceInfo info) throws DAOException {
		getWebserviceInfo(&quot;PartialAddressValidation&quot;, info);
		String outputXML = invokeWebService(request, info);
		return outputXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="FF7EC54E7A4DE293CE96A10CB4CB9777">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in reload.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>reload.jsp</FileName>
<FilePath>webapp/reload.jsp</FilePath>
<LineStart>83</LineStart>
<Snippet>	lookupFactory.refreshLookup(reloadTable);

	out.println(&quot;&lt;b&gt;&quot; + ESAPI.encoder().encodeForHTML(reloadTable) + &quot; is refreshed &lt;/b&gt;&lt;BR&gt;&quot;);

}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>reload.jsp</FileName>
<FilePath>webapp/reload.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>
try {
 reloadTable = Utility.dataEncoder(request.getParameter(&quot;refresh&quot;));
} catch(Exception e) {
	e.printStackTrace();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="A65295AD516E30BC783EC8894CD06713">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>				if (&quot;visionCustomerIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionCustId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionCustomerIdEmail&quot;));
					EasyLogger.info(&quot;visionCustomerIdEmail : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="6E9088B6A7723AB9AA50E0E0C47835F5">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>					{
					if(toolnames == &quot;&quot;)
					toolnames = &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;
					else
					toolnames = toolnames+&quot;,&quot;+ &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>if(resId!=null &amp;&amp; !(resId.equals(&quot;&quot;)) &amp;&amp; resId.contains(&quot;,&quot;))
{
resourceIds = removedataBean.getResourceIds().split(&quot;,&quot;);
}
if(toolnamevar!=null &amp;&amp; !(toolnamevar.equals(&quot;&quot;)) &amp;&amp; toolnamevar.contains(&quot;,&quot;))</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermgmt.SSPGUIUserManagementDTO.getResourceIds()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="5DE9C776097C2279DCF4BD4668AD1038">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>301</LineStart>
<Snippet>				if (&quot;visionAccountId&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountId&quot;));
					EasyLogger.info(&quot;visionAccountId : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="3266B17A34827450C096B7B05224E6D6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in erateDiscountDetailsTool.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>erateDiscountDetailsTool.jsp</FileName>
<FilePath>webapp/businessTools/tools/erateDiscountDetailsTool.jsp</FilePath>
<LineStart>190</LineStart>
<Snippet>						&lt;strong&gt;:&lt;/strong&gt;
					&lt;/td&gt;
					&lt;td class=&quot;coabigfont&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;bdate&quot; value=&quot;&lt;s:property value=&quot;bdate&quot; /&gt;&quot; readonly/&gt;
					&lt;%-- &lt;s:textfield name=&quot;bdate&quot; styleClass=&quot;input_text&quot; /&gt; --%&gt;&lt;/td&gt;
					</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ERateDiscAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ERateDiscAction.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	}

	public void setBdate(Date bdate) {
		this.bdate = bdate;
	}</Snippet>
<TargetFunction>setBdate(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="303819E9E580961170C16A2261F2A3D0">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailAction.java</FilePath>
<LineStart>762</LineStart>
<Snippet>				PrintWriter writer = response.getWriter();
				responseXML=Utility.getValidContent(responseXML); 
				  writer.print(ESAPI.encoder().encodeForXML(responseXML));
			} catch (Exception e) {
				EasyLogger.info(&quot;Unable to write to printwriter&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailToolAdditionalService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailToolAdditionalService.java</FilePath>
<LineStart>3219</LineStart>
<Snippet>				preparedStatement.setInt(1, paraId);
				preparedStatement.setInt(2, version);
				rsChkUnq = preparedStatement.executeQuery();
				if (rsChkUnq != null &amp;&amp; rsChkUnq.next())
					status = rsChkUnq.getString(&quot;STATUS&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173553">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>223</LineStart>
<Snippet>					|| &quot;monEmail&quot;.equalsIgnoreCase(keys)) {
				if (!isBanPresent) {
					tporderId = Utility.dataEncoder(request.getParameter(keys));
					search_type = keys;
					// Thirdparty page for displaying Email details in Coffee -</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="E7C07804077F0A59BB48AFDB8159AB11">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1345</LineStart>
<Snippet>
		getWebserviceInfo(&quot;STBUpdation&quot;, info);
		String outputXML = invokeWebService(request, info);
		System.out.println(&quot;After  invoking WebService&quot;);
		System.out.println(&quot;outputXML : &quot; + outputXML);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="9469F53CABF5F32335497AB0A7BB793E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailAction.java</FilePath>
<LineStart>762</LineStart>
<Snippet>				PrintWriter writer = response.getWriter();
				responseXML=Utility.getValidContent(responseXML); 
				  writer.print(ESAPI.encoder().encodeForXML(responseXML));
			} catch (Exception e) {
				EasyLogger.info(&quot;Unable to write to printwriter&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailToolService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailToolService.java</FilePath>
<LineStart>15113</LineStart>
<Snippet>			String status = &quot;&quot;;
			stmt = connection.createStatement();
			rs = stmt.executeQuery(query);

			if (rs.next()) {</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173556">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>243</LineStart>
<Snippet>					|| &quot;btnAdjEmail&quot;.equalsIgnoreCase(keys)
					|| &quot;ilectAcctAdjEmail&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
				if (tporderId != null) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="BD76C2FB0C43D9ABFCBBA30337446F8C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getDeletePage.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getDeletePage.jsp</FileName>
<FilePath>webapp/getDeletePage.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>		&lt;table cellspacing=&quot;1&quot; cellpadding=&quot;1&quot; align=&quot;center&quot;&gt;
			&lt;tr&gt;
			&lt;bean:define id=&quot;testCaseIdBean&quot; value=&quot;&lt;%=ESAPI.encoder().encodeForHTML(testCaseId)%&gt;&quot;/&gt;
				&lt;td class=&quot;inputtext&quot; width=&quot;150&quot;&gt;&lt;b&gt;Case Id :&lt;/b&gt;&lt;/td&gt;&lt;td width=&quot;100&quot;class=&quot;inputtext&quot;&gt;&lt;bean:write name=&quot;testCaseIdBean&quot;/&gt;&lt;/td&gt;
				&lt;td class=&quot;inputtext&quot; width=&quot;150&quot;&gt;&lt;b&gt;Group Id :&lt;/b&gt;&lt;/td&gt;&lt;td width=&quot;100&quot;class=&quot;inputtext&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;clngroupId&quot; value=&quot;&lt;%=grpId%&gt;&quot; size=&quot;30&quot; class=&quot;inputtext&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getDeletePage.jsp</FileName>
<FilePath>webapp/getDeletePage.jsp</FilePath>
<LineStart>5</LineStart>
<Snippet>&lt;%@ page import=&quot;com.verizon.ssp.flowclient.tools.testingtool.*,org.owasp.esapi.ESAPI&quot; %&gt;
&lt;%
	String testCaseId = request.getParameter(&quot;cloneId&quot;);
	TestingToolService testToolSrvc = new TestingToolService();
	List testCaseDetails = testToolSrvc.getCloneDtls(testCaseId);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="BB0D100D96D99BF13A8634CDFEBBDD7C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in JMSToolAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>JMSToolAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/jmstool/JMSToolAction.java</FilePath>
<LineStart>85</LineStart>
<Snippet>			EasyLogger.info(&quot;Final XMl1&quot; + responseXML);
			writer = response.getWriter(); 
			writer.print(ESAPI.encoder().encodeForXML(responseXML.toString()));
			EasyLogger.info(&quot;Exiting ActionClass for OrderReviewTool..&quot;);
</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XMLHelper.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/jmstool/XMLHelper.java</FilePath>
<LineStart>166</LineStart>
<Snippet>						displayMessage = actualMsgCount
								+ &quot; Messages Pushed Successfully out of &quot;
								+ jmsToolForm.getMsgLimit() + &quot; !!!&quot;
								+ &quot; The Pushed Messages are written to &quot;
								+ fileName;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.jmstool.JMSToolForm.getMsgLimit()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173555">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>243</LineStart>
<Snippet>					|| &quot;btnAdjEmail&quot;.equalsIgnoreCase(keys)
					|| &quot;ilectAcctAdjEmail&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
				if (tporderId != null) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="4E024149118293EA472939460568EECE">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					toolnames = &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;
					else
					toolnames = toolnames+&quot;,&quot;+ &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;
					}
				 &lt;% } } %&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPGUIUserManagementDAOService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermgmt/SSPGUIUserManagementDAOService.java</FilePath>
<LineStart>1068</LineStart>
<Snippet>			reqDtlsPstmt.setString(++reqDtlsPstmtIdx, agentVzId.trim()
					.toUpperCase());
			reqDtlsRs = reqDtlsPstmt.executeQuery();
			if (reqDtlsRs != null) {
				remAgntDtl = new SSPGUIUserManagementDTO();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="4B85D768D5F883FDA6DF7C48DDC0AD96">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>165</LineStart>
<Snippet>						&lt;td align=&quot;left&quot;&gt;
						&lt;input type=&quot;checkbox&quot; name=&quot;toolname&quot; value=&quot;&lt;%=ESAPI.encoder().encodeForHTMLAttribute(toolarray[i].toString())%&gt;&quot;&gt; 
						&lt;%=ESAPI.encoder().encodeForHTML(toolarray[i].toString())%&gt;&lt;/input&gt;&lt;/td&gt;
						&lt;%
						int j =i+1;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>157</LineStart>
<Snippet>						&lt;/tr&gt;
						&lt;tr&gt;
						&lt;% String toolarray[] = removedataBean.getToolNames().split(&quot;,&quot;);
						if(toolarray.length &gt;0)
						{</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermgmt.SSPGUIUserManagementDTO.getToolNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="21B9D8FA7B0F63018080C9D3F8F083D6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getManMailFormDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getManMailFormDetails.jsp</FileName>
<FilePath>webapp/getManMailFormDetails.jsp</FilePath>
<LineStart>32</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(result);
		response.getWriter().write(cleanResults);
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushMailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/testingtool/PushMailService.java</FilePath>
<LineStart>337</LineStart>
<Snippet>			stmt = connection.prepareStatement(getProdCatQry);
			stmt.setString(1, orderId);
			resultSet = stmt.executeQuery();
			while (resultSet != null &amp;&amp; resultSet.next()) {
				prodCat = resultSet.getString(&quot;PROD_CAT&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F17355A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>311</LineStart>
<Snippet>			// MR111 Added By Sanjay for SDMP Migration starts
			if (&quot;sdmpPcanSearch&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="F1A545E38C3E652418D0EE0F1D4149D8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailApprovalAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailApprovalAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>				EasyLogger.info(&quot;Final EmailApprovalAction XMl1&quot; + responseXML);
				PrintWriter writer = response.getWriter();
                writer.print(ESAPI.encoder().encodeForXML(responseXML));

</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailApprovalUnitService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalUnitService.java</FilePath>
<LineStart>5973</LineStart>
<Snippet>				preparedStatement = connection
						.prepareStatement(ESAPI.encoder().encodeForSQL( ORACLE_CODEC,getSectionNamesQuery).replaceAll(&quot;''&quot;,&quot;'&quot;));
				rset = preparedStatement.executeQuery();
				long end = System.currentTimeMillis();
				System.out.println(&quot;the time diff : &quot; + (end - start));</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="D2DAA063CE969E5B4865C00B6D099B6E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>117</LineStart>
<Snippet>					&lt;center&gt;
						&lt;s:if test=&quot;errorMessage!=null&quot;&gt;
							&lt;b&gt; &lt;font color='red'&gt;&lt;s:property value=&quot;errorMessage&quot; /&gt;&lt;/font&gt;&lt;/b&gt;
						&lt;/s:if&gt;
					&lt;/center&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/AutopayDetailsAction.java</FilePath>
<LineStart>54</LineStart>
<Snippet>	}

	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}</Snippet>
<TargetFunction>setErrorMessage(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="D15BF08FF1D6C9EFA96AB6BAEB9E2B78">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in OrderReviewAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>OrderReviewAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/orderReviewTool/OrderReviewAction.java</FilePath>
<LineStart>274</LineStart>
<Snippet>						.getResponseXMLWithException(message));
				writer = response.getWriter();   
				writer.print(ESAPI.encoder().encodeForXML(responseXML.toString()));
				EasyLogger.error(e);
			}</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AccountVO.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/AccountVO.java</FilePath>
<LineStart>469</LineStart>
<Snippet>	}

	public void setRetrievalDescription(String retrievalDescription) {
		this.retrievalDescription = retrievalDescription;
	}</Snippet>
<TargetFunction>setRetrievalDescription(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173558">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>258</LineStart>
<Snippet>					|| &quot;emailAddress&quot;.equalsIgnoreCase(keys)
					|| &quot;addressIdsmb&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="33B5B4B8C3751987A663D43A45E93375">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>emailtool.jsp</FileName>
<FilePath>webapp/emailtool/emailtool.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>				userId = request.getHeader(&quot;VZID&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;sm_user&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;vzid&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1AE3CF357CD1686607C2CCEE9699B011">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in adapterProvisioning.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>adapterProvisioning.jsp</FileName>
<FilePath>webapp/businessTools/tools/adapterProvisioning.jsp</FilePath>
<LineStart>159</LineStart>
<Snippet>				&lt;tr&gt;
					&lt;td height=&quot;30&quot; bordercolor=&quot;#CCCCCC&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(description)&quot;/&gt;&lt;/td&gt;
					&lt;td height=&quot;30&quot; bordercolor=&quot;#CCCCCC&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;s:property value=&quot;status&quot;/&gt;&lt;/td&gt;
					&lt;td height=&quot;30&quot; bordercolor=&quot;#CCCCCC&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;s:property value=&quot;startTime&quot;/&gt;&lt;/td&gt;
					&lt;/s:iterator&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGResetAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGResetAction.java</FilePath>
<LineStart>204</LineStart>
<Snippet>		else if (&quot;detail&quot;.equalsIgnoreCase(mogDetail)) {
			MOGResetForm detailDto = new MOGResetForm();
			String status = request.getParameter(&quot;status&quot;);
			String fileInfoId = request.getParameter(&quot;FileInfoId&quot;);
			detailDto.setStatus(status);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002C7">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>223</LineStart>
<Snippet>					|| &quot;monEmail&quot;.equalsIgnoreCase(keys)) {
				if (!isBanPresent) {
					tporderId = Utility.dataEncoder(request.getParameter(keys));
					search_type = keys;
					// Thirdparty page for displaying Email details in Coffee -</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="3E8410C9FFD4A8F5ED1DDE6F0088174E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_myApprovals.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_myApprovals.jsp</FileName>
<FilePath>webapp/admin_myApprovals.jsp</FilePath>
<LineStart>668</LineStart>
<Snippet>											{
											  %&gt;
											  &lt;option&gt;&lt;%=ESAPI.encoder().encodeForHTML((String)st.nextToken())%&gt;&lt;/option&gt;
											  &lt;%
											}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPGUIUserManagementDAOService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermgmt/SSPGUIUserManagementDAOService.java</FilePath>
<LineStart>789</LineStart>
<Snippet>				toolNamesQry = toolNamesQry + &quot;(&quot; + resourceIds + &quot;)&quot;;
				toolNamesPstmt = toolNamesCon.prepareStatement(ESAPI.encoder().encodeForSQL( ORACLE_CODEC,toolNamesQry).replaceAll(&quot;''&quot;,&quot;'&quot;));
				toolNamesRs = toolNamesPstmt.executeQuery();
				if (toolNamesRs != null) {
					while (toolNamesRs.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="FA33033CB6F44F5015817C05FE13A1C8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			if (eventBeans != null &amp;&amp; eventBeans.size() &gt; 0)
				request.setAttribute(&quot;EVENT_LIST&quot;, eventBeans);
			request.setAttribute(&quot;orderId&quot;, Utility.getValidString(bean.getOrderId()));
			request.setAttribute(&quot;adptName&quot;, Utility.getValidString(bean.getAdapterName()));
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.searchorder.AndreiSearchForm.getOrderId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="F6A8A35BF3F0942414307033A622A04C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>280</LineStart>
<Snippet>				if (&quot;visionAccountIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountIdEmail&quot;));
					EasyLogger.info(&quot;visionAccountIdEmail : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="C8715B076DD9249D0CCE4ACA6D00F510">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in home_new.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>		if(&lt;%=ESAPI.encoder().encodeForHTML(visionId)%&gt;!=null)
		{
			var VISIONID = 'V:&lt;%= ESAPI.encoder().encodeForHTML(visionId)%&gt;' ;

			var link = 'headerSearch.do?searchInput='+VISIONID+'&amp;src=COFEEVISION';</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LogonForwardAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/LogonForwardAction.java</FilePath>
<LineStart>65</LineStart>
<Snippet>		String ban = request.getParameter(&quot;coaBAN&quot;);
		String visionCustId = request.getParameter(&quot;coaVisionCustomerId&quot;);
		String visionAcctId = request.getParameter(&quot;coaVisionAccountId&quot;);
		String dtvBTN = request.getParameter(PropertyManager
				.getPropertyToggleValue(&quot;DTV_PUNCHOUT_BTN_REQUESTNAME&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002CD">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>311</LineStart>
<Snippet>			// MR111 Added By Sanjay for SDMP Migration starts
			if (&quot;sdmpPcanSearch&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8DBB71773D0956BB7334F389562A46A1">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1628</LineStart>
<Snippet>		getWebserviceInfo(&quot;UpdateOneBill&quot;, info); // TODO: Replace the key with
													// proper DS String
		String response = invokeWebService(request, info);
		return response;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002C6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>223</LineStart>
<Snippet>					|| &quot;monEmail&quot;.equalsIgnoreCase(keys)) {
				if (!isBanPresent) {
					tporderId = Utility.dataEncoder(request.getParameter(keys));
					search_type = keys;
					// Thirdparty page for displaying Email details in Coffee -</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="4E024149118293EA472939460568EECD">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>					{
					if(toolnames == &quot;&quot;)
					toolnames = &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;
					else
					toolnames = toolnames+&quot;,&quot;+ &quot;&lt;%=ESAPI.encoder().encodeForHTML(resourceIds[i].toString())%&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPGUIUserManagementDAOService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermgmt/SSPGUIUserManagementDAOService.java</FilePath>
<LineStart>1068</LineStart>
<Snippet>			reqDtlsPstmt.setString(++reqDtlsPstmtIdx, agentVzId.trim()
					.toUpperCase());
			reqDtlsRs = reqDtlsPstmt.executeQuery();
			if (reqDtlsRs != null) {
				remAgntDtl = new SSPGUIUserManagementDTO();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="788F3ECA883211B65A6005E97569DC3D">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>164</LineStart>
<Snippet>						%&gt;
						&lt;td align=&quot;left&quot;&gt;
						&lt;input type=&quot;checkbox&quot; name=&quot;toolname&quot; value=&quot;&lt;%=ESAPI.encoder().encodeForHTMLAttribute(toolarray[i].toString())%&gt;&quot;&gt; 
						&lt;%=ESAPI.encoder().encodeForHTML(toolarray[i].toString())%&gt;&lt;/input&gt;&lt;/td&gt;
						&lt;%</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>157</LineStart>
<Snippet>						&lt;/tr&gt;
						&lt;tr&gt;
						&lt;% String toolarray[] = removedataBean.getToolNames().split(&quot;,&quot;);
						if(toolarray.length &gt;0)
						{</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermgmt.SSPGUIUserManagementDTO.getToolNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="CA13D3CDF7E78AA28E8A472D668F5234">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>372</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleSearchService Method Got Info&quot;);

		String outputXML = invokeWebService(request, info);

		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="CB086471D1AA3802B966BD2C4C3FC406">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getMapTrigPassDetailView.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getMapTrigPassDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigPassDetailView.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>	PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
	  String cleanResults = sanitizer.sanitize(displayTable);
	response.getWriter().write(cleanResults);
%&gt;
&lt;!--\getMapTrigPassDetailView.jsp--&gt;</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getMapTrigPassDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigPassDetailView.jsp</FilePath>
<LineStart>6</LineStart>
<Snippet>&lt;%
	String viewFlag = request.getParameter(&quot;flag&quot;);
	String testCaseId = request.getParameter(&quot;tstCaseId&quot;);
	String batchId = request.getParameter(&quot;ESAPI.encoder().encodeForHTML(batchId)&quot;);
	String dispInfo = request.getParameter(&quot;typeId&quot;);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="33D49A2651051474C13A53C896D33867">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in ioccIspSearchRequest.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>ioccIspSearchRequest.jsp</FileName>
<FilePath>webapp/businessTools/tools/ioccIspSearchRequest.jsp</FilePath>
<LineStart>347</LineStart>
<Snippet>											&lt;td&gt;&lt;s:property value=&quot;rowCount&quot; /&gt;&lt;/td&gt;
											&lt;td&gt;&lt;s:property value=&quot;ispId&quot; /&gt;&lt;/td&gt;
											&lt;td&gt;&lt;a href='ioccFalloutHandle_getHeader.action?requestId=&lt;s:property value=&quot;requestId&quot; /&gt;&amp;TabName=CustomerInfo'  target = 'customIframe' onclick='popup(&quot;popUpDiv&quot;,&quot;&quot;)'&gt;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(requestId)&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
											&lt;td&gt;&lt;s:property value=&quot;rxOrderId&quot; /&gt;&lt;/td&gt;
											&lt;td&gt;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(serviceType)&quot; /&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>IOCCFalloutManagementAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/IOCCFalloutManagementAction.java</FilePath>
<LineStart>418</LineStart>
<Snippet>       	firstHeader = &quot;CustomerInfo&quot;;
       	request.setAttribute(&quot;firstHeader&quot;,firstHeader);
       	String requestId= (String) request.getParameter(&quot;requestId&quot;);
       	session.setAttribute(&quot;requestId&quot;, requestId);
       	return &quot;header&quot;;</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002C8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>243</LineStart>
<Snippet>					|| &quot;btnAdjEmail&quot;.equalsIgnoreCase(keys)
					|| &quot;ilectAcctAdjEmail&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
				if (tporderId != null) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="309A115410B7B0B7EBABDC5711279228">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailApprovalAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailApprovalAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>				EasyLogger.info(&quot;Final EmailApprovalAction XMl1&quot; + responseXML);
				PrintWriter writer = response.getWriter();
                writer.print(ESAPI.encoder().encodeForXML(responseXML));

</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailApprovalUnitService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalUnitService.java</FilePath>
<LineStart>5816</LineStart>
<Snippet>						.prepareStatement(SQLConstants.SELECT_TEMPLATE_MAPPER_VALUES);
				preparedStatement.setString(1, id);
				rset = preparedStatement.executeQuery();
				StringBuffer secMesg = new StringBuffer();
				while (rset != null &amp;&amp; rset.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="A65295AD516E30BC783EC8894CD06714">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>				if (&quot;visionCustomerIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionCustId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionCustomerIdEmail&quot;));
					EasyLogger.info(&quot;visionCustomerIdEmail : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="A6D724AFB98896B17A298262309575B1">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getMapTrigFailDetailView.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getMapTrigFailDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigFailDetailView.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>	PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
	String cleanResults = sanitizer.sanitize(AllData);
	response.getWriter().write(cleanResults); 
%&gt;
&lt;!--\getMapTrigFailDetailView.jsp--&gt;</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>getMapTrigFailDetailView.jsp</FileName>
<FilePath>webapp/getMapTrigFailDetailView.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	String viewFlag = request.getParameter(&quot;flag&quot;);
	String testCaseId = request.getParameter(&quot;ESAPI.encoder().encodeForHTML(tstCaseId)&quot;);
	String batchId = request.getParameter(&quot;batchId&quot;);
	String dispInfo = request.getParameter(&quot;typeId&quot;);
	TestingToolService testToolSrvc = new TestingToolService();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="F1B8A7DAB652CAC374D3F72EF36844D4">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>512</LineStart>
<Snippet>			WebServiceInfo info) throws DAOException {
		getWebserviceInfo(&quot;BTNValidation&quot;, info);
		String outputXML = invokeWebService(request, info);
		return outputXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1D9DBF01813D8FE1797152C6F0B865FA">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>293</LineStart>
<Snippet>				if (&quot;visionCustomerId&quot;.equalsIgnoreCase(keys)) {
					visionCustId = (String) request
							.getParameter(&quot;visionCustomerId&quot;);
					EasyLogger.info(&quot;visionCustomerId : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="0586478172FF5A1AE1D2E07ACFE422E5">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1646</LineStart>
<Snippet>		getWebserviceInfo(&quot;SubmitOrder&quot;, info); // TODO: Replace the key with
												// proper DS String
		String response = invokeWebService(request, info);
		return response;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="0B976C753893DE5AB5E4480DE8275AB6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in massBillingXlsUpload.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massBillingXlsUpload.jsp</FileName>
<FilePath>webapp/businessTools/tools/massBillingXlsUpload.jsp</FilePath>
<LineStart>62</LineStart>
<Snippet>	out.println(&quot;&lt;br&gt;&lt;strong&gt;&lt;font color='red'&gt;No records were inserted to the database.&lt;/font&gt;&lt;/strong&gt;&quot;);
	}	else{
	out.println(&quot;&lt;br&gt;&lt;strong&gt;&lt;font color='blue'&gt;The Request has been submitted. Batch Id for future reference : MBT&quot;+ESAPI.encoder().encodeForHTML(BATCHID)+&quot;&lt;/font&gt;&lt;/strong&gt;&quot;);
	}
	%&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BusinessObjectDatabaseService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/dao/BusinessObjectDatabaseService.java</FilePath>
<LineStart>153</LineStart>
<Snippet>		EasyLogger.debug(&quot;Executing query - &quot; + sqlStringValue);
		long startTime = System.currentTimeMillis();
		resultSet = preparedStatement.executeQuery();
		long endTime = System.currentTimeMillis();
		// logQueryPerformance(sqlStringValue,endTime-startTime);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="8804A0C434A06AFCE6EECEC11F173557">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>258</LineStart>
<Snippet>					|| &quot;emailAddress&quot;.equalsIgnoreCase(keys)
					|| &quot;addressIdsmb&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="79E84BCF9F2A9FE92B52540A8EFB4EDB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in JMSToolAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>JMSToolAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/jmstool/JMSToolAction.java</FilePath>
<LineStart>85</LineStart>
<Snippet>			EasyLogger.info(&quot;Final XMl1&quot; + responseXML);
			writer = response.getWriter(); 
			writer.print(ESAPI.encoder().encodeForXML(responseXML.toString()));
			EasyLogger.info(&quot;Exiting ActionClass for OrderReviewTool..&quot;);
</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XMLHelper.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/jmstool/XMLHelper.java</FilePath>
<LineStart>123</LineStart>
<Snippet>					} else {
						EasyLogger.info(&quot;Save Failed&quot;);
						displayMessage = jmsToolForm.getAddType()
								+ &quot; Save Failed...&quot;;
					}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.jmstool.JMSToolForm.getAddType()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="D203A48C69476218B1D6927BB137DA83">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>NCOGWebServicesSoapStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ncoguri/NCOGWebServicesSoapStub.java</FilePath>
<LineStart>8569</LineStart>
<Snippet>		try {
			java.lang.Object _resp = _call
					.invoke(new java.lang.Object[] { incomingRequest });

			if (_resp instanceof java.rmi.RemoteException) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002CC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>311</LineStart>
<Snippet>			// MR111 Added By Sanjay for SDMP Migration starts
			if (&quot;sdmpPcanSearch&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="953096F078A50D1164C6E9BB4E57BF4C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>412</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleOrderHistoryService Method Got Info&quot;);

		String outputXML = invokeWebService(request, info);

		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="4894A159585955075AC38122D04F791B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in home_new.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>home_new.jsp</FileName>
<FilePath>webapp/home_new.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>		if(&lt;%=ESAPI.encoder().encodeForHTML(visionId)%&gt;!=null)
		{
			var VISIONID = 'V:&lt;%= ESAPI.encoder().encodeForHTML(visionId)%&gt;' ;

			var link = 'headerSearch.do?searchInput='+VISIONID+'&amp;src=COFEEVISION';</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LogonForwardAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/LogonForwardAction.java</FilePath>
<LineStart>64</LineStart>
<Snippet>		// Added By Sanjay Starts
		String ban = request.getParameter(&quot;coaBAN&quot;);
		String visionCustId = request.getParameter(&quot;coaVisionCustomerId&quot;);
		String visionAcctId = request.getParameter(&quot;coaVisionAccountId&quot;);
		String dtvBTN = request.getParameter(PropertyManager</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="39AC99D2F128DB1684AAF76CE46C2B7A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailAction.java</FilePath>
<LineStart>762</LineStart>
<Snippet>				PrintWriter writer = response.getWriter();
				responseXML=Utility.getValidContent(responseXML); 
				  writer.print(ESAPI.encoder().encodeForXML(responseXML));
			} catch (Exception e) {
				EasyLogger.info(&quot;Unable to write to printwriter&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailToolService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailToolService.java</FilePath>
<LineStart>14578</LineStart>
<Snippet>			connection = getConnection();
			statement = connection.createStatement();
			rs = statement.executeQuery(fetchTableNamesQuery);
			while (rs.next()) {
				tableName = rs.getString(&quot;table_name&quot;);</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="05A837C7F44B63C9C942406D8502A213">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in ssppgOVPrdtTabPage.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>ssppgOVPrdtTabPage.jsp</FileName>
<FilePath>webapp/ssppgOVPrdtTabPage.jsp</FilePath>
<LineStart>102</LineStart>
<Snippet>%&gt;
&lt;bean:define id=&quot;svcTabBean&quot; value=&quot;&lt;%=svcTab%&gt;&quot;/&gt;
										&lt;li&gt;&lt;a href=&quot;#&lt;bean:write name=&quot;svcTabBean&quot;/&gt;SvcId&quot; &gt;&lt;%=ESAPI.encoder().encodeForHTML(tabPageName)%&gt;&lt;/a&gt;&lt;/li&gt;
&lt;%
		}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OVSearchOrderDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/sspperigon/orderview/service/OVSearchOrderDetailsService.java</FilePath>
<LineStart>491</LineStart>
<Snippet>				OVSearchOrderForm srchOrdFrm = (OVSearchOrderForm) ordSvcLstItr
						.next();
				String service = srchOrdFrm.getService();
				if (ordSvcMap.containsKey(service)) {
					HashMap srvTypMap = (HashMap) ordSvcMap.get(service);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.sspperigon.orderview.form.OVSearchOrderForm.getService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="F4DC4F63BB8DB89DBA94B8EE662D731F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>384</LineStart>
<Snippet>		EasyLogger.debug(&quot;Inside handleCPEMService Method Got Info&quot;);

		String outputXML = invokeWebService(request, info);

		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="494D900744F75929E1CEC94BF8DE3DF6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BQTWebserviceRetrievalService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/BQTWebserviceRetrievalService.java</FilePath>
<LineStart>218</LineStart>
<Snippet>						((org.apache.axis.client.Stub)ncogstub).setUsername(info.getUserName());
						((org.apache.axis.client.Stub)ncogstub).setPassword(info.getPassword());
						responseXml = ncogstub.getVzFullProfile(xml);
			 
						EasyLogger.info(&quot;responseXml  is : &quot; + responseXml);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.ncoguri.NCOGWebServicesSoapStub.getVzFullProfile()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="3141793731B41C4D7059D8E44805640E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getFormOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getFormOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getFormOrderIdsDetails.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(ESAPI.encoder().encodeForHTMLAttribute(cleanResults));
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushMailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/testingtool/PushMailService.java</FilePath>
<LineStart>159</LineStart>
<Snippet>				stmt.setInt(2, Integer.parseInt(prodCat));
				stmt.setString(3, srvcType);
				resultSet = stmt.executeQuery();
				while (resultSet != null &amp;&amp; resultSet.next()) {
					findBlob = true;</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1BC9F5DB330A352B05B17783A8C5BCDC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>505</LineStart>
<Snippet>			throws DAOException {
		getWebserviceInfo(&quot;CreditCardValidation&quot;, info);
		String outputXML = invokeWebService(request, info);
		return outputXML;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9B16125AAE8845BA34DC7AC60C19842D">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>280</LineStart>
<Snippet>				if (&quot;visionAccountIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountIdEmail&quot;));
					EasyLogger.info(&quot;visionAccountIdEmail : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="7549028B86EEB7FF01890B7E87DAF51E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in billCycleNoLEC.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>billCycleNoLEC.jsp</FileName>
<FilePath>webapp/businessTools/tools/billCycleNoLEC.jsp</FilePath>
<LineStart>216</LineStart>
<Snippet>			&lt;/tr&gt;
			&lt;input type=&quot;hidden&quot; name=&quot;sspAccountId&quot; value=&quot;&lt;s:property value='sspAccountId'/&gt;&quot; /&gt;
	  &lt;input type=&quot;hidden&quot; name=&quot;lecBillCycle&quot; value=&quot;&lt;s:property value='lecBillCycle'/&gt;&quot; /&gt;
	 &lt;input type=&quot;hidden&quot; name=&quot;state&quot; value=&quot;&lt;s:property value='ESAPI.encoder().encodeForHTML(state)'/&gt;&quot; /&gt;
	 &lt;input type=&quot;hidden&quot; name=&quot;pcan&quot; value=&quot;&lt;s:property value='ESAPI.encoder().encodeForHTML(pcan)'/&gt;&quot; /&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BillCycleNoLECAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/BillCycleNoLECAction.java</FilePath>
<LineStart>134</LineStart>
<Snippet>		}

		public void setLecBillCycle(String lecBillCycle) {
			this.lecBillCycle = lecBillCycle;
		}</Snippet>
<TargetFunction>setLecBillCycle(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="32091A2CE9A8592132E097B5622C2A20">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in itoWebServiceResult.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>itoWebServiceResult.jsp</FileName>
<FilePath>webapp/businessTools/tools/itoWebServiceResult.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>%&gt;
&lt;% if (responseXML!=null &amp;&amp; !responseXML.equals(&quot;&quot;)) { %&gt;
&lt;s:set var=&quot;responseXMLBean&quot;&gt;&lt;%=ESAPI.encoder().encodeForHTML(responseXML)%&gt;&lt;/s:set&gt;&lt;%} %&gt;

&lt;script language='javascript'&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1492</LineStart>
<Snippet>
		getWebserviceInfo(&quot;AccountProductProfile&quot;, info);
		String outputXML = invokeWebService(request, info);

		return outputXML;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="1F67065A006C40562C19F2DCD7C002C9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>243</LineStart>
<Snippet>					|| &quot;btnAdjEmail&quot;.equalsIgnoreCase(keys)
					|| &quot;ilectAcctAdjEmail&quot;.equalsIgnoreCase(keys)) {
				tporderId = Utility.dataEncoder(request.getParameter(keys));
				search_type = keys;
				if (tporderId != null) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="9CF5A5ADEF7A8EA51298F2001345FEAC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getSTNOrderIdsDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getSTNOrderIdsDetails.jsp</FileName>
<FilePath>webapp/getSTNOrderIdsDetails.jsp</FilePath>
<LineStart>30</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(displayString);
		response.getWriter().write(cleanResults);
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>RAFDetailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/RAF/RAFDetailService.java</FilePath>
<LineStart>120</LineStart>
<Snippet>					stmt.setString(1, inputValue);
				}
				resultSet = stmt.executeQuery();
				while (resultSet != null &amp;&amp; resultSet.next()) {
					dispVect = new Vector();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="D612EFF123BC5AB26548714D8BBCB866">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>202</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>56</LineStart>
<Snippet>					.getBusinessObjectService(&quot;com.verizon.ssp.flowclient.searchorder.AndreiSearch&quot;);
			AndreiSearchForm bean = new AndreiSearchForm();
			bean.setOrderId(request.getParameter(&quot;orderId&quot;));
			bean.setElementId(request.getParameter(&quot;elementId&quot;));
			bean.setAdapterName(request.getParameter(&quot;adptName&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="8642C278773A22091E8B84D25B1DF55E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_myApprovals.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_myApprovals.jsp</FileName>
<FilePath>webapp/admin_myApprovals.jsp</FilePath>
<LineStart>668</LineStart>
<Snippet>											{
											  %&gt;
											  &lt;option&gt;&lt;%=ESAPI.encoder().encodeForHTML((String)st.nextToken())%&gt;&lt;/option&gt;
											  &lt;%
											}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>admin_myApprovals.jsp</FileName>
<FilePath>webapp/admin_myApprovals.jsp</FilePath>
<LineStart>662</LineStart>
<Snippet>					if (requestDetailsBean!=null &amp;&amp; requestDetailsBean.getRequestId() != -1) { 
					
										String toolNames = requestDetailsBean.getToolNames();
										StringTokenizer st = new StringTokenizer(toolNames,&quot;,&quot;);
										if (st.hasMoreElements()) {											</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermgmt.SSPGUIUserManagementDTO.getToolNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="2C0FCE52D8FD2AF9CB0F104862E26DB8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in getManMailFormDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>getManMailFormDetails.jsp</FileName>
<FilePath>webapp/getManMailFormDetails.jsp</FilePath>
<LineStart>32</LineStart>
<Snippet>		PolicyFactory sanitizer = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS);
		String cleanResults = sanitizer.sanitize(result);
		response.getWriter().write(cleanResults);
	}else{
		response.getWriter().write(&quot;Data not available&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PushMailService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/testingtool/PushMailService.java</FilePath>
<LineStart>288</LineStart>
<Snippet>			stmt = connection.prepareStatement(getSrvcQry);
			stmt.setString(1, orderId);
			resultSet = stmt.executeQuery();
			while (resultSet != null &amp;&amp; resultSet.next()) {
				srvcType = resultSet.getString(&quot;SERVICE_TYPE&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="21E1E79FAECDED906052BEBA4EA80BBB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>85</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyForm&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>56</LineStart>
<Snippet>					.getBusinessObjectService(&quot;com.verizon.ssp.flowclient.searchorder.AndreiSearch&quot;);
			AndreiSearchForm bean = new AndreiSearchForm();
			bean.setOrderId(request.getParameter(&quot;orderId&quot;));
			bean.setElementId(request.getParameter(&quot;elementId&quot;));
			bean.setAdapterName(request.getParameter(&quot;adptName&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="9FC4096AC1CB38ADD45A057574604A94">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayDetails.jsp</FilePath>
<LineStart>227</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>301</LineStart>
<Snippet>				if (&quot;visionAccountId&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountId&quot;));
					EasyLogger.info(&quot;visionAccountId : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="FA33033CB6F44F5015817C05FE13A1C9">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in autopayHistoryDetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>autopayHistoryDetails.jsp</FileName>
<FilePath>webapp/systemtools/ittools/autopayHistoryDetails.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>				&lt;s:iterator value=&quot;autoForm.historyFormRev&quot; &gt;
				&lt;tr class=&quot;background6&quot;&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{orderId}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{enrollmentStatus}&quot;/&gt;&lt;/td&gt;
					&lt;td nowrap style=&quot;text-align:center;&quot;&gt;&lt;s:property value=&quot;%{pfbIndicator}&quot;/&gt;&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AndreiSearchAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/searchorder/AndreiSearchAction.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			if (eventBeans != null &amp;&amp; eventBeans.size() &gt; 0)
				request.setAttribute(&quot;EVENT_LIST&quot;, eventBeans);
			request.setAttribute(&quot;orderId&quot;, Utility.getValidString(bean.getOrderId()));
			request.setAttribute(&quot;adptName&quot;, Utility.getValidString(bean.getAdapterName()));
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.searchorder.AndreiSearchForm.getOrderId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="DCC710A6A934A934BD1E9C5314BDA6B3">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailApprovalAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailApprovalAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>				EasyLogger.info(&quot;Final EmailApprovalAction XMl1&quot; + responseXML);
				PrintWriter writer = response.getWriter();
                writer.print(ESAPI.encoder().encodeForXML(responseXML));

</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailApprovalUnitService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailApprovalUnitService.java</FilePath>
<LineStart>6150</LineStart>
<Snippet>				preparedStatement = connection
						.prepareStatement(ESAPI.encoder().encodeForSQL( ORACLE_CODEC,getSectionNamesQuery).replaceAll(&quot;''&quot;,&quot;'&quot;));
				rset = preparedStatement.executeQuery();
				while (rset != null &amp;&amp; rset.next()) {
					paraMesg.append(rset.getString(2)).append(&quot;,&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="25B00DD0-3038-4FB8-9C82-3E84EC2C3B58" iid="204D341350240BA535EF1F65419CAB17">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in adapterProvisioning.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>adapterProvisioning.jsp</FileName>
<FilePath>webapp/businessTools/tools/adapterProvisioning.jsp</FilePath>
<LineStart>159</LineStart>
<Snippet>				&lt;tr&gt;
					&lt;td height=&quot;30&quot; bordercolor=&quot;#CCCCCC&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;s:property value=&quot;ESAPI.encoder().encodeForHTML(description)&quot;/&gt;&lt;/td&gt;
					&lt;td height=&quot;30&quot; bordercolor=&quot;#CCCCCC&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;s:property value=&quot;status&quot;/&gt;&lt;/td&gt;
					&lt;td height=&quot;30&quot; bordercolor=&quot;#CCCCCC&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;s:property value=&quot;startTime&quot;/&gt;&lt;/td&gt;
					&lt;/s:iterator&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DisplayServiceUnitService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/displayservice/DisplayServiceUnitService.java</FilePath>
<LineStart>8394</LineStart>
<Snippet>					+ &quot; (&quot; + orderIds + &quot;) &quot;;
			preStatement_service = connection.prepareStatement(ESAPI.encoder().encodeForSQL( new OracleCodec(),sql).replaceAll(&quot;''&quot;,&quot;'&quot;));
			resultSet = preStatement_service.executeQuery();
			stmt = connection
					.prepareStatement(SQLConstants.WEB_SERVICE_DETAILS);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="7433F23D41B2E7EA42A0B2E85B3665D8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Authentication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/vaas/Authentication.java</FilePath>
<LineStart>63</LineStart>
<Snippet>		// if(userProfile == null) throw new
		// AuthenticationException(&quot;User is not authenticated&quot;);
		String loginName = request.getHeader(&quot;VZID&quot;);
		String authReasion = request.getHeader(&quot;SM_AUTHREASON&quot;);
		EasyLogger.info(&quot;Auth Reason : &quot; + authReasion);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="0F8932BE3B0FF471A985953FC827B229">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in EmailAction.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailAction.java</FilePath>
<LineStart>762</LineStart>
<Snippet>				PrintWriter writer = response.getWriter();
				responseXML=Utility.getValidContent(responseXML); 
				  writer.print(ESAPI.encoder().encodeForXML(responseXML));
			} catch (Exception e) {
				EasyLogger.info(&quot;Unable to write to printwriter&quot;);</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EmailToolService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/EmailToolService.java</FilePath>
<LineStart>6998</LineStart>
<Snippet>					.prepareStatement(SQLConstants.EMAILTOOL_TRIGGER_SELECT_MAX_VERSION);
			preparedStatement.setInt(1, id);
			rs = preparedStatement.executeQuery();
			if (rs.next()) {
				currentStatus = rs.getString(&quot;ACTIVE&quot;);</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="C2CBBC7FAFA79A47920450909DB1ECE2">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method _jspService() in admin_removeagentdetails.jsp uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>admin_removeagentdetails.jsp</FileName>
<FilePath>webapp/admin_removeagentdetails.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].status.value = &quot;&lt;%=Constants.USR_MGMT_REQ_STATUS_REM_REQ%&gt;&quot;;
document.forms['removeagentdetailsform'].reqVzId.value =&quot;&lt;%=ESAPI.encoder().encodeForHTML(vzId)%&gt;&quot;;
document.forms['removeagentdetailsform'].resourceIds.value= toolnames;
document.forms['removeagentdetailsform'].agentVzId.value=  &quot;&lt;bean:write name=&quot;removedataFormBean&quot; property=&quot;agentVzId&quot;/&gt;&quot;;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>85</LineStart>
<Snippet>		// MR113 Header display for all thirdparty links Added By Sanjay Ends
		
			String	 userID = Utility.dataEncoder(request.getHeader(&quot;VZID&quot;));
			
		</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="119">
                        <groupTitle>Server-Side Request Forgery</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function println() on line 115 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>A Server-Side Request Forgery occurs when an attacker may influence a network connection made by the application server. The network connection will originate from the application server internal IP and an attacker will be able to use this connection to bypass network controls and scan or attack internal resources that are not otherwise exposed.



Example: In the following example, an attacker will be able to control the URL the server is connecting to.


String url = request.getParameter(&quot;url&quot;);
CloseableHttpClient httpclient = HttpClients.createDefault();
HttpGet httpGet = new HttpGet(url);
CloseableHttpResponse response1 = httpclient.execute(httpGet);


The ability of the attacker to hijack the network connection will depend on the specific part of the URI that he can control and on libraries used to stablish the connection. For example, controlling the URI scheme will let the attacker use protocols different from http or https like:

- up://
- ldap://
- jar://
- gopher://
- mailto://
- ssh2://
- telnet://
- expect://

An attacker will be able to leverage this hijacked network connection to perform the following attacks:

- Port Scanning of intranet resources.
- Bypass firewalls.
- Attack vulnerable programs running on the application server or on the Intranet.
- Attack internal/external web applications using Injection attacks or CSRF.
- Access local files using file:// scheme.
- On Windows systems, file:// scheme and UNC paths can allow an attacker to scan and access internal shares.
- Perform a DNS cache poisoning attack.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Do not establish network connections based on user-controlled data and ensure that the request is being sent to the expected destination. If user data is necessary to build the destination URI, use a level of indirection: create a list of legitimate resource names that a user is allowed to specify, and only allow the user to select from the list. With this approach the input provided by the user is never used directly to specify the resource name.

In some situations this approach is impractical because the set of legitimate resource names is too large or too hard to keep track of. Programmers often resort to blacklisting in these situations. Blacklisting selectively rejects or escapes potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a whitelist of characters that are allowed to appear in the resource name and accept input composed exclusively of characters in the approved set.

Also, if required, make sure that the user input is only used to specify a resource on the target system but that the URI scheme, host, and port is controlled by the application. This way the damage that an attacker is able to do will be significantly reduced.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>119</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="60EF8CF2EB9EAF0EC9C8209DAE013A60">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPV5ProfileAddServiceAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/sspv5profilecorrection/SSPV5ProfileAddServiceAction.java</FilePath>
<LineStart>87</LineStart>
<Snippet>						.getVisionCustId().trim().replaceAll(&quot;-&quot;, &quot;&quot;);
				String visionAcctId = sspV5ProfileAddServiceForm
						.getVisionAcctId().trim().replaceAll(&quot;-&quot;, &quot;&quot;);

				try {</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.visiontools.sspv5profilecorrection.SSPV5ProfileAddServiceForm.getVisionAcctId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="0E41FB9F617BBAC17F0C457C016EEC3B">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SspNacrVisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/SspNacrVisionProfileMergeAction.java</FilePath>
<LineStart>336</LineStart>
<Snippet>								StringBuffer leftRequestXml = getRequestXmlSsp(
										visionProfileMergeForm
												.getSspaccountId2(),
										userId);
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getSspaccountId2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="CFCADAE9DB8E9215271720B21C9FD9DA">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1718</LineStart>
<Snippet>				+ &quot;&lt;UpdateOneBill&gt;&quot; + &quot;&lt;accountId&gt;&quot; + orderRule.getAcctId()
				+ &quot;&lt;/accountId&gt;&quot; + &quot;&lt;btn&gt;&quot; + obCriteria.getBtn() + &quot;&lt;/btn&gt;&quot;
				+ &quot;&lt;mTN&gt;&quot; + obCriteria.getMtn() + &quot;&lt;/mTN&gt;&quot;
				+ &quot;&lt;nameValidationStatus&gt;O&lt;/nameValidationStatus&gt;&quot;
				+ &quot;&lt;/UpdateOneBill&gt;&quot;;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getMtn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="A0EE995F3986C141D0B93906B4B908D3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));

			String inputLine;</Snippet>
<TargetFunction>java.net.URLConnection.getInputStream()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="565D81D797B77D8AA1ABC447E4466306">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSTNController.java</FilePath>
<LineStart>238</LineStart>
<Snippet>						stnDetailsVO = widgetTestPageModel.createReferral(
								Utility.getValidString(stnRegisterForm.getReferralEmail()),
								Utility.getValidString(stnRegisterForm.getReferralfName()),
								Utility.getValidString(stnRegisterForm.getReferrallName()),
								stnDetailsVO);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.StnRegisterForm.getReferralfName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="B4CC0FE2BC36E2435C71E547C595FCB0">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>emailtool.jsp</FileName>
<FilePath>webapp/emailtool/emailtool.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>					userId = request.getHeader(&quot;sm_user&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;vzid&quot;);

				authReason = request.getHeader(&quot;SM_AUTHREASON&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E8629D584214616BC9082239DDF0EA5F">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1766</LineStart>
<Snippet>		if (obBean.getIlecAccountNumber() != &quot;&quot;)
			requestXML = requestXML.concat(&quot;&lt;ilecAccountNumber&gt;&quot;
					+ obBean.getIlecAccountNumber() + &quot;&lt;/ilecAccountNumber&gt;&quot;);
		if (obBean.getRAO() != &quot;&quot;)
			requestXML = requestXML</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getIlecAccountNumber()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E33877D031C2711C0A52A44AC436FA81">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SspNacrVisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/SspNacrVisionProfileMergeAction.java</FilePath>
<LineStart>163</LineStart>
<Snippet>									outputXML, visionProfileMergeForm, request);
							VisionCustomerId1 = visionProfileMergeForm
									.getVisionCustomerId1();
							VisionAccountId1 = visionProfileMergeForm
									.getVisionAccountId1();</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getVisionCustomerId1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="FFB0C437947A018BC510F19F9CE476E9">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>225</LineStart>
<Snippet>							visionProfileMergeForm = getLookUpDetails2(outputXML,visionProfileMergeForm,request);
							 VisionCustomerId2=visionProfileMergeForm.getVisionCustomerId2();
							 VisionAccountId2=visionProfileMergeForm.getVisionAccountId2();
						//}
					</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getVisionAccountId2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="BAB8E449B7A5CDE64183694F016C6F35">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BQTReportAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/BQTReportAction.java</FilePath>
<LineStart>54</LineStart>
<Snippet>		BQTReportVO bQTReportVO = new BQTReportVO();

		bQTReportVO.setInput(bQTReportForm.getInput());
		bQTReportVO.setInputType(bQTReportForm.getInputType());
		bQTReportVO.setFirstName(bQTReportForm.getFirstName());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getInput()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="836E0F0E48CE6D4A3894BC9E22D7B7E3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Authentication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/vaas/Authentication.java</FilePath>
<LineStart>63</LineStart>
<Snippet>		// if(userProfile == null) throw new
		// AuthenticationException(&quot;User is not authenticated&quot;);
		String loginName = request.getHeader(&quot;VZID&quot;);
		String authReasion = request.getHeader(&quot;SM_AUTHREASON&quot;);
		EasyLogger.info(&quot;Auth Reason : &quot; + authReasion);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F85889ECB77D306692140277BA779ADA">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>206</LineStart>
<Snippet>					
					//if(!&quot;VisionId&quot;.equalsIgnoreCase(visionProfileMergeForm.getInputType2())){
						outputXML = getResponse(visionProfileMergeForm.getInputValue2(),visionProfileMergeForm.getInputType2());
					//}
				</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getInputValue2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="B43098FA-638A-45C6-886C-576BA961F41C" iid="598EC0D71DF534A3859B3A6CF16FF4B7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function setTargetEndpointAddress() on line 726 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>726</LineStart>
<Snippet>					+ strEndPointAddress);
			
			 call.setTargetEndpointAddress(strEndPointAddress);
			
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>656</LineStart>
<Snippet>
	// Added by Janani for NSOP status tool-- ends
	public String invokeWebService(String requestXML, WebServiceInfo svcInfo) {

		try {</Snippet>
<TargetFunction>invokeWebService(1)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="CC97E53A6FE05AC1710CFA3DDDAB5CB1">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UCSRParentChildLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/UCSRParentChildLookupAction.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	}

	public void setInputValue(String inputValue) {
		this.inputValue = inputValue;
	}</Snippet>
<TargetFunction>setInputValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="B43098FA-638A-45C6-886C-576BA961F41C" iid="8D955E5835690E59FFC543447BF19507">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function setTargetEndpointAddress() on line 115 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RepostFirmsaleService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/RepostFirmsaleService.java</FilePath>
<LineStart>115</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);			
			call.setTargetEndpointAddress(Utility.dataEncoder(strEndPointAddress));
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>RepostFirmsaleService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/RepostFirmsaleService.java</FilePath>
<LineStart>46</LineStart>
<Snippet>	}
	
	public String invokeWebService(String requestXML, WebServiceInfo svcInfo) {

		try {</Snippet>
<TargetFunction>invokeWebService(1)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="694E7ACD7DE8A603ACB95AE2AFDEE78F">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserMangmtForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/admintools/form/AddUserMangmtForm.java</FilePath>
<LineStart>121</LineStart>
<Snippet>	}

	public void setVzid(String vzid) {
		this.vzid = vzid;
	}</Snippet>
<TargetFunction>setVzid(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="ADEE3D7102091980D73EABC8F5C2B2B4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSearchController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSearchController.java</FilePath>
<LineStart>340</LineStart>
<Snippet>								|| request.getAttribute(&quot;cpe_stb&quot;) != null) {
							if (request.getParameter(&quot;cpe_stb&quot;) != null)
								widgetSearchForm.setInputValue(Utility.dataEncoder(request.getParameter(&quot;cpe_stb&quot;)));
							else
								widgetSearchForm.setInputValue((String) request</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="3D691A023534C53EC8407F13295C4D6A">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>301</LineStart>
<Snippet>				if (&quot;visionAccountId&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountId&quot;));
					EasyLogger.info(&quot;visionAccountId : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F422D3D7F98E97AA3B2D0693EDAF8493">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>106</LineStart>
<Snippet>						
						//if(!&quot;VisionId&quot;.equalsIgnoreCase(visionProfileMergeForm.getInputType1())){
							outputXML = getResponse(visionProfileMergeForm.getInputValue1(),visionProfileMergeForm.getInputType1());
						//}
					</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getInputType1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F72068933ECF5CB04E79D67A468FD7A5">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DetailedLookupForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/form/DetailedLookupForm.java</FilePath>
<LineStart>50</LineStart>
<Snippet>	}

	public void setVisionAccountId(String visionAccountId) {
		this.visionAccountId = visionAccountId;
	}</Snippet>
<TargetFunction>setVisionAccountId(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="78AF3DB9BD8A0261949DC39C9BD8CAC4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Authentication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/vaas/Authentication.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
		if (loginName == null || loginName.equals(&quot;&quot;)) {
			loginName = request.getHeader(&quot;sm_user&quot;);
			if (loginName == null || loginName.equals(&quot;&quot;)) {
				loginName = (String) session.getAttribute(&quot;vzid&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="4511DFC39612891E75B8B56206152230">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function println() on line 115 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ITOWirelessProfileAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ITOWirelessProfileAction.java</FilePath>
<LineStart>115</LineStart>
<Snippet>		connection.setDoOutput(true);
		PrintWriter out = new PrintWriter(connection.getOutputStream());
        out.println(ESAPI.encoder().encodeForXPath(requestXML));
		BufferedReader in = null;
		try{</Snippet>
<TargetFunction>java.io.PrintWriter.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F35D18D479E1BE713884BBB7FE9A9D08">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>106</LineStart>
<Snippet>						
						//if(!&quot;VisionId&quot;.equalsIgnoreCase(visionProfileMergeForm.getInputType1())){
							outputXML = getResponse(visionProfileMergeForm.getInputValue1(),visionProfileMergeForm.getInputType1());
						//}
					</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getInputValue1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="4B19A67879374457F5D00A3424022239">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PlaceChangeOrderAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/changeorder/PlaceChangeOrderAction.java</FilePath>
<LineStart>49</LineStart>
<Snippet>		BQTReportVO bQTReportVO = new BQTReportVO();

		bQTReportVO.setInput(Utility.getValidString(bQTReportForm.getInput()));
		String inputType = Utility.getValidString(bQTReportForm.getInputType());
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getInput()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="2FD031F9CC456575001515EB1A33E634">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>125</LineStart>
<Snippet>							visionProfileMergeForm = getLookUpDetails1(outputXML,visionProfileMergeForm,request);
							 VisionCustomerId1=visionProfileMergeForm.getVisionCustomerId1();
							 VisionAccountId1=visionProfileMergeForm.getVisionAccountId1();
						//}
					EasyLogger.info(&quot;Vision Id and BTn - &quot;+VisionCustomerId1 + VisionAccountId1+&quot;,&quot;+rightbtn);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getVisionAccountId1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="22ACD5E3108521B1E35666DB7D6BE525">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>38</LineStart>
<Snippet>				String refEmail = Utility.dataEncoder(request.getParameter(&quot;refEmail&quot;));
				String custType = Utility.dataEncoder(request.getParameter(&quot;custType&quot;));
				String viewType = Utility.dataEncoder(request.getParameter(&quot;viewType&quot;));
				String refStatus = Utility.dataEncoder(request.getParameter(&quot;refStatus&quot;));
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="7A7F22340A1D580FB89050B88B168DA3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			}
			try{
			userID = Utility.dataEncoder(request.getHeader(&quot;vzid&quot;));
		} catch (Exception e1) {
			e1.printStackTrace();</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="56A3F802-145C-49C7-A828-177ABDAEED0A" iid="AA7C05715D84AD03DC91B5091DF9D5DD">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function post() on line 374 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVAnywhereManagePackagesService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/TVAnywhereManagePackagesService.java</FilePath>
<LineStart>374</LineStart>
<Snippet>		addService.header(&quot;ITWB_APP_PASSWORD&quot;, Utility.getValidContent(pwv));
		ClientResponse isocsResponse = addService.type(&quot;application/xml&quot;).post(
				ClientResponse.class, ESAPI.encoder().encodeForXPath(insertRequest));
		response = isocsResponse.getEntity(String.class);
		code = isocsResponse.getStatus();</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.Builder.post()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>TVAnywhereManagePackagesAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/TVAnywhereManagePackagesAction.java</FilePath>
<LineStart>300</LineStart>
<Snippet>	}

	public void setPackagesToUpdate(String packagesToUpdate) {
		this.packagesToUpdate = packagesToUpdate;
	}</Snippet>
<TargetFunction>setPackagesToUpdate(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="945B4644414542C7D0C4DB8669E7E5B4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPV5ProfileCorrectionForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/form/SSPV5ProfileCorrectionForm.java</FilePath>
<LineStart>1282</LineStart>
<Snippet>	}

	public void setInputValue(String inputValue) {
		this.inputValue = inputValue;
	}</Snippet>
<TargetFunction>setInputValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="B5C62ACCC655DE1117108F053EF61C9F">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/AddUserAction.java</FilePath>
<LineStart>313</LineStart>
<Snippet>
			if (requestFrom != null &amp;&amp; requestFrom.equals(&quot;fromUpdate&quot;)) {
				String id = request.getParameter(&quot;id&quot;);
				String role = request.getParameter(&quot;RoleName&quot;);
				addUserForm.setVzid(id);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="CA2ABB629F63E7C5F54B5C05B03B3F71">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/admintools/action/AddUserAction.java</FilePath>
<LineStart>528</LineStart>
<Snippet>			if (requestFrom != null &amp;&amp; requestFrom.equals(&quot;fromUpdate&quot;)) {
				
				String id = Utility.dataEncoder(request.getParameter(&quot;id&quot;));
				String role = Utility.dataEncoder(request.getParameter(&quot;RoleName&quot;));				
				addUserForm.setVzid(id);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E1CCC1A46CBD059D869725B45F829629">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AccountVO.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/AccountVO.java</FilePath>
<LineStart>187</LineStart>
<Snippet>	}

	public void setCustomerID(String customerID) {
		this.customerID = customerID;
	}</Snippet>
<TargetFunction>setCustomerID(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="CE2ABB38CE423F7B18148946DC8DD6B3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/AddUserAction.java</FilePath>
<LineStart>340</LineStart>
<Snippet>					reqXml = adduserManagementService
							.getXmlLookUp(&quot;ADDUSER_REQUEST_XML&quot;);
					reqXml = parseXMLCredentials(reqXml, Utility.getValidString(addUserForm.getVzid()));
					// EasyLogger.info(reqXml);
					// Fetch the URL from DB for SSo.</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermanagement.AddUserMangmtForm.getVzid()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="5A78171C4F0BC1FEC6E5B48C655660C4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DetailedLookupForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/form/DetailedLookupForm.java</FilePath>
<LineStart>117</LineStart>
<Snippet>	}

	public void setInput(String input) {
		this.input = input;
	}</Snippet>
<TargetFunction>setInput(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="757C1A824C508DB48A55D348BEFDB25A">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>293</LineStart>
<Snippet>				if (&quot;visionCustomerId&quot;.equalsIgnoreCase(keys)) {
					visionCustId = (String) request
							.getParameter(&quot;visionCustomerId&quot;);
					EasyLogger.info(&quot;visionCustomerId : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="F171B4D94BF7B05234D08B0E03ADB4D7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>36</LineStart>
<Snippet>				String fName = Utility.dataEncoder(request.getParameter(&quot;fName&quot;));
				String lName = Utility.dataEncoder(request.getParameter(&quot;lName&quot;));
				String refEmail = Utility.dataEncoder(request.getParameter(&quot;refEmail&quot;));
				String custType = Utility.dataEncoder(request.getParameter(&quot;custType&quot;));
				String viewType = Utility.dataEncoder(request.getParameter(&quot;viewType&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1EDBAEA6-42C7-42D1-B658-882684402CDB" iid="A4BDE77C296D5F1229DAF5944B0E7FD4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function createService() on line 153 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>BTASWebServiceThread.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/BTASWebServiceThread.java</FilePath>
<LineStart>153</LineStart>
<Snippet>		URL wsdlLocation = new URL(providerURL);
		
		Service service = (Service) factory.createService(wsdlLocation,
				serviceName);
		Call call = service.createCall(portName, operationName);</Snippet>
<TargetFunction>org.apache.axis.client.ServiceFactory.createService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="762D6B05EC3F553D618F6EA2A0E5FFD5">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetOptInController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetOptInController.java</FilePath>
<LineStart>56</LineStart>
<Snippet>			String optInResult = &quot;&quot;;
			optInResult = widgetTestPageModel.getOptInDetails(
					customerDetailsVO, Utility.dataEncoder(request.getParameter(&quot;dotComUserId&quot;)),
					Utility.dataEncoder(request.getParameter(&quot;dotCompassword&quot;)));
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="0CF9970A17012E08E474B82E9D96FAED">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WMGResourcesAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/search/WMGResourcesAction.java</FilePath>
<LineStart>682</LineStart>
<Snippet>			EasyLogger.info(&quot;Individual Investigation Tool Search&quot;);
			String inputType = resourceForm.getInputtype();
			String inputValue = resourceForm.getInputvalue();
			EasyLogger.info(&quot;Input Type :&quot; + inputType + &quot;  &quot; + &quot;Input Value :&quot;
					+ inputValue);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.wmg.search.WMGResourcesForm.getInputvalue()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="54CB11BACFCC7F883C9572F829EB4334">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>39</LineStart>
<Snippet>				String custType = Utility.dataEncoder(request.getParameter(&quot;custType&quot;));
				String viewType = Utility.dataEncoder(request.getParameter(&quot;viewType&quot;));
				String refStatus = Utility.dataEncoder(request.getParameter(&quot;refStatus&quot;));

				HealthCheckToolModel healthCheckToolModel = new HealthCheckToolModel();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="56A3F802-145C-49C7-A828-177ABDAEED0A" iid="FF810EE3EDDAFD0FCF9F7E933B857C25">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function post() on line 111 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EquipmentProfileServiceImpl.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/EquipmentProfileServiceImpl.java</FilePath>
<LineStart>111</LineStart>
<Snippet>		mapper = new ObjectMapper();
		//EquipmentProfileInfo finalJSON = mapper.readValue(equipmentProfileInfo, EquipmentProfileInfo.class);
		response = webResource.type(&quot;application/json&quot;).post(ClientResponse.class, equipmentProfileInfo);
		jsonOutput = response.getEntity(String.class);
		</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.Builder.post()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EquipmentProfileAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/EquipmentProfileAction.java</FilePath>
<LineStart>269</LineStart>
<Snippet>				//service.clone(updateReq);
			}*/
			String profile = Utility.dataEncoder(request.getParameter(&quot;updEqpData&quot;));
			String status = &quot;true&quot;;
			if(null != profile){</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="BF5D1337EE473C53FEF510E536B1B4B3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>30</LineStart>
<Snippet>		String returnString = &quot;&quot;;
		try {
			String setTopBoxId = Utility.dataEncoder(request.getParameter(&quot;stbId&quot;));
			System.out.println(&quot;inside HealthCheckSTNController&quot;);
			if (setTopBoxId != null) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="28730FC9AB9619C795FB99FC67372B91">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1758</LineStart>
<Snippet>		String requestXML = &quot;&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt; &quot;
				+ &quot;&lt;UpdateOneBill&gt;&quot; + &quot;&lt;accountId&gt;&quot; + orderRule.getAcctId()
				+ &quot;&lt;/accountId&gt;&quot; + &quot;&lt;btn&gt;&quot; + obBean.getBtn() + &quot;&lt;/btn&gt;&quot;
				+ &quot;&lt;mTN&gt;&quot; + obBean.getMtn() + &quot;&lt;/mTN&gt;&quot;;
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getBtn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E57D39C2FF0F29A183B5BAAD90377DF2">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParamStateManager.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/state/ParamStateManager.java</FilePath>
<LineStart>38</LineStart>
<Snippet>	public static String getState(HttpServletRequest request, String topic,
			String key) throws StateManagerException {
		return request.getParameter(topic + &quot;_&quot; + key);
	}
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="3EEF807F642BCD4272E66BAE2E64D879">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>124</LineStart>
<Snippet>						//else{
							visionProfileMergeForm = getLookUpDetails1(outputXML,visionProfileMergeForm,request);
							 VisionCustomerId1=visionProfileMergeForm.getVisionCustomerId1();
							 VisionAccountId1=visionProfileMergeForm.getVisionAccountId1();
						//}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getVisionCustomerId1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E05ED761B793013428A9BEDD91B7D289">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DetailedLookupForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/form/DetailedLookupForm.java</FilePath>
<LineStart>42</LineStart>
<Snippet>	}

	public void setVisionCustomerId(String visionCustomerId) {
		this.visionCustomerId = visionCustomerId;
	}</Snippet>
<TargetFunction>setVisionCustomerId(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="38679A49-461A-4BE9-AC0D-5845B7DD031E" iid="5947A7EB782985DB40364F4EEA6B83BB">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function resource() on line 65 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVEPackageLookupService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEPackageLookupService.java</FilePath>
<LineStart>65</LineStart>
<Snippet>
			WebResource service1 = client
					.resource(GetChannelNamesForIsocRespURL);
			ClientResponse response = service1.get(ClientResponse.class);
			System.out.println(&quot;URL RESPONSE : &quot; + response.getStatus());</Snippet>
<TargetFunction>com.sun.jersey.api.client.Client.resource()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>TVEPackageLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEPackageLookupAction.java</FilePath>
<LineStart>35</LineStart>
<Snippet>		try {

			packageID = Utility.getValidString(tveForm.getPackageId());

			if (packageID == null)</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.tveverywheretools.TVEPackageLookupForm.getPackageId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="A789C2FABAF278501F3EA4AAF2B3EB01">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>				if (&quot;visionCustomerIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionCustId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionCustomerIdEmail&quot;));
					EasyLogger.info(&quot;visionCustomerIdEmail : &quot; + visionCustId);
					if (visionCustId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="56A3F802-145C-49C7-A828-177ABDAEED0A" iid="979E39007B6891019CD85E1DC6D496B0">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function post() on line 100 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVEAddEditCustProfileService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEAddEditCustProfileService.java</FilePath>
<LineStart>100</LineStart>
<Snippet>			WebResource subService = client.resource(webserviceURL);
			ClientResponse response1 = subService.type(&quot;application/xml&quot;).post(
					ClientResponse.class, ESAPI.encoder().encodeForXPath(requestXML));
			responseXML = response1.getEntity(String.class);
			tveForm.setRespStatus(response1.getClientResponseStatus()</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.Builder.post()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>TVEAddEditCustProfileAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEAddEditCustProfileAction.java</FilePath>
<LineStart>36</LineStart>
<Snippet>
			userID = Utility.getValidString(tveForm.getUserID());
			channelName = Utility.getValidString(tveForm.getChannelName());

			if (userID == null || channelName == null) {</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.tveverywheretools.TVEAddEditCustProfileForm.getChannelName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="15FDEC9A2639BEAAF873B42074A17489">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 56 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>56</LineStart>
<Snippet>            if (mtr.find()) {
			URL HttpsURL = new URL(null, strURL, urlHandler);		
			HTTPConn = (HttpsURLConnection) HttpsURL.openConnection();
			setProperty(HTTPConn);
</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="4F721ABCC2041EB55E8454B109CC5D1A">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1774</LineStart>
<Snippet>					+ &quot;&lt;/custCode&gt;&quot;);
		if (obBean.getBroadBandCAN() != &quot;&quot;)
			requestXML = requestXML.concat(&quot;&lt;BBCAN&gt;&quot; + obBean.getBroadBandCAN()
					+ &quot;&lt;/BBCAN&gt;&quot;);
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getBroadBandCAN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="56A3F802-145C-49C7-A828-177ABDAEED0A" iid="6521A1A86C73B8860798232037D7F179">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function post() on line 374 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVAnywhereManagePackagesService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/TVAnywhereManagePackagesService.java</FilePath>
<LineStart>374</LineStart>
<Snippet>		addService.header(&quot;ITWB_APP_PASSWORD&quot;, Utility.getValidContent(pwv));
		ClientResponse isocsResponse = addService.type(&quot;application/xml&quot;).post(
				ClientResponse.class, ESAPI.encoder().encodeForXPath(insertRequest));
		response = isocsResponse.getEntity(String.class);
		code = isocsResponse.getStatus();</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.Builder.post()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="DA6CDD3C0BF18B115BF955CF19A23780">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ProvisioningAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/sspperigon/provisioning/action/ProvisioningAction.java</FilePath>
<LineStart>38</LineStart>
<Snippet>
		// Get it from request
		String acctId = request.getParameter(&quot;sspAccId&quot;);
		EasyLogger.info(&quot;==========acctId=====prov===&quot; + acctId);
		BusinessObjectServiceFactory factory = BusinessObjectServiceFactoryImpl</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="0A6A5C9ABDA5C7D9EE08E56D7A547ADC">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1759</LineStart>
<Snippet>				+ &quot;&lt;UpdateOneBill&gt;&quot; + &quot;&lt;accountId&gt;&quot; + orderRule.getAcctId()
				+ &quot;&lt;/accountId&gt;&quot; + &quot;&lt;btn&gt;&quot; + obBean.getBtn() + &quot;&lt;/btn&gt;&quot;
				+ &quot;&lt;mTN&gt;&quot; + obBean.getMtn() + &quot;&lt;/mTN&gt;&quot;;

		if (obBean.getExpressId() != &quot;&quot;)</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getMtn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="5C2EDB794D99E33AA7507EE39A5A90D7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1717</LineStart>
<Snippet>		String requestXML = &quot;&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt; &quot;
				+ &quot;&lt;UpdateOneBill&gt;&quot; + &quot;&lt;accountId&gt;&quot; + orderRule.getAcctId()
				+ &quot;&lt;/accountId&gt;&quot; + &quot;&lt;btn&gt;&quot; + obCriteria.getBtn() + &quot;&lt;/btn&gt;&quot;
				+ &quot;&lt;mTN&gt;&quot; + obCriteria.getMtn() + &quot;&lt;/mTN&gt;&quot;
				+ &quot;&lt;nameValidationStatus&gt;O&lt;/nameValidationStatus&gt;&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getBtn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F7B1BE9584D14AFD225EDC1D533FC2B7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>					.concat(&quot;&lt;rAO&gt;&quot; + obBean.getRAO() + &quot;&lt;/rAO&gt;&quot;);
		if (obBean.getCustCode() != &quot;&quot;)
			requestXML = requestXML.concat(&quot;&lt;custCode&gt;&quot; + obBean.getCustCode()
					+ &quot;&lt;/custCode&gt;&quot;);
		if (obBean.getBroadBandCAN() != &quot;&quot;)</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getCustCode()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="1C1B5673EAF2601D23AA91813F4CE904">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>85</LineStart>
<Snippet>		// MR113 Header display for all thirdparty links Added By Sanjay Ends
		
			String	 userID = Utility.dataEncoder(request.getHeader(&quot;VZID&quot;));
			
		</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="9A7009CC8488FE433196880DB389333C">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WMGResourcesAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/search/WMGResourcesAction.java</FilePath>
<LineStart>699</LineStart>
<Snippet>			resourceUnit.setLastName(resourceForm.getLastName());
			// resourceUnit.setRegion(resourceForm.getRegion());
			resourceUnit.setState(resourceForm.getState());

			if (!&quot;sspAcctId&quot;.equals(inputType) &amp;&amp; !&quot;name&quot;.equals(inputType)) {</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.wmg.search.WMGResourcesForm.getState()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="5007C8CA0822E965C5F5C61CF50539EA">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DetailedLookupForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/form/DetailedLookupForm.java</FilePath>
<LineStart>109</LineStart>
<Snippet>	}

	public void setInputType(String inputType) {
		this.inputType = inputType;
	}</Snippet>
<TargetFunction>setInputType(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F163E73B4680854511F87A33984D5A97">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>280</LineStart>
<Snippet>				if (&quot;visionAccountIdEmail&quot;.equalsIgnoreCase(keys)) {
					visionAcctId = Utility.dataEncoder((String) request
							.getParameter(&quot;visionAccountIdEmail&quot;));
					EasyLogger.info(&quot;visionAccountIdEmail : &quot; + visionAcctId);
					if (visionAcctId == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="7B5AD80D12EF3850F370C73B84366619">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>34</LineStart>
<Snippet>			if (setTopBoxId != null) {
				String eMail = Utility.dataEncoder(request.getParameter(&quot;eMail&quot;));
				String fName = Utility.dataEncoder(request.getParameter(&quot;fName&quot;));
				String lName = Utility.dataEncoder(request.getParameter(&quot;lName&quot;));
				String refEmail = Utility.dataEncoder(request.getParameter(&quot;refEmail&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E7DE6F40E6FB93954D37458119FB618C">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPV5ProfileCorrectionForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/form/SSPV5ProfileCorrectionForm.java</FilePath>
<LineStart>1266</LineStart>
<Snippet>	}

	public void setInputType(String inputType) {
		this.inputType = inputType;
	}</Snippet>
<TargetFunction>setInputType(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="FA37E278A6899044BD01D011B8A13DAE">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSurveyController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSurveyController.java</FilePath>
<LineStart>79</LineStart>
<Snippet>				String param = &quot;&quot;;
				if (request.getParameter(&quot;surveyChoiceDetails&quot;) != null) {
					param = Utility.dataEncoder(request.getParameter(&quot;surveyChoiceDetails&quot;).trim());
				}
				if (request.getSession().getAttribute(&quot;CUSTDETAILS&quot;) != null</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="CE2ABB38CE423F7B18148946DC8DD6B2">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/AddUserAction.java</FilePath>
<LineStart>248</LineStart>
<Snippet>				reqXml = adduserManagementService
						.getXmlLookUp(&quot;ADDUSER_SSOREQUEST_XML&quot;);
				reqXml = parseXMLCredentials(reqXml, Utility.getValidString(addUserForm.getVzid()));

				responseXml = HTTPSRequester.postHTTPSData(reqXml, ssoURL);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermanagement.AddUserMangmtForm.getVzid()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="AA13471563B28247C05132A62C80C106">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SspNacrVisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/SspNacrVisionProfileMergeAction.java</FilePath>
<LineStart>165</LineStart>
<Snippet>									.getVisionCustomerId1();
							VisionAccountId1 = visionProfileMergeForm
									.getVisionAccountId1();
							// }
							EasyLogger.info(&quot;Vision Id and BTn - &quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getVisionAccountId1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="9027D1497A952E5FCD0CCF9B14EFACC7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WMGResourcesAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/search/WMGResourcesAction.java</FilePath>
<LineStart>686</LineStart>
<Snippet>					+ inputValue);
			String seltype = resourceForm.getSelType();
			String selvalue = resourceForm.getSelValue();
			if (seltype != null &amp;&amp; !&quot;&quot;.equalsIgnoreCase(seltype)) {
				inputType = seltype;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.wmg.search.WMGResourcesForm.getSelValue()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="95DE64127884C9E93D254123C57FE56F">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSTNController.java</FilePath>
<LineStart>70</LineStart>
<Snippet>						.getParameter(&quot;selectedReferral&quot;);
				String referralId = Utility.dataEncoder(request.getParameter(&quot;referralId&quot;));
				String referralStatus = Utility.dataEncoder(request.getParameter(&quot;referralStatus&quot;));
				StnRegisterForm stnRegisterForm = (StnRegisterForm) form;
				/*</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="F077885D27892DF5ED83BAD1DB6BC6CF">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSTNController.java</FilePath>
<LineStart>237</LineStart>
<Snippet>							&amp;&amp; stnController.equalsIgnoreCase(&quot;referFriend&quot;)) {
						stnDetailsVO = widgetTestPageModel.createReferral(
								Utility.getValidString(stnRegisterForm.getReferralEmail()),
								Utility.getValidString(stnRegisterForm.getReferralfName()),
								Utility.getValidString(stnRegisterForm.getReferrallName()),</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.StnRegisterForm.getReferralEmail()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="56A3F802-145C-49C7-A828-177ABDAEED0A" iid="395E71D65ACC4FAEEF0CF2FFD2A3E7CB">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function post() on line 100 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVEAddEditCustProfileService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEAddEditCustProfileService.java</FilePath>
<LineStart>100</LineStart>
<Snippet>			WebResource subService = client.resource(webserviceURL);
			ClientResponse response1 = subService.type(&quot;application/xml&quot;).post(
					ClientResponse.class, ESAPI.encoder().encodeForXPath(requestXML));
			responseXML = response1.getEntity(String.class);
			tveForm.setRespStatus(response1.getClientResponseStatus()</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.Builder.post()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>TVEAddEditCustProfileAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEAddEditCustProfileAction.java</FilePath>
<LineStart>35</LineStart>
<Snippet>		try {

			userID = Utility.getValidString(tveForm.getUserID());
			channelName = Utility.getValidString(tveForm.getChannelName());
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.tveverywheretools.TVEAddEditCustProfileForm.getUserID()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="A2B334BB6FF563D7FBCB2A556218C078">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetOptInController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetOptInController.java</FilePath>
<LineStart>57</LineStart>
<Snippet>			optInResult = widgetTestPageModel.getOptInDetails(
					customerDetailsVO, Utility.dataEncoder(request.getParameter(&quot;dotComUserId&quot;)),
					Utility.dataEncoder(request.getParameter(&quot;dotCompassword&quot;)));

			if (optInResult == null || &quot;&quot;.equals(optInResult)) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="08F8FB45A760C2651189645AEF4C6C76">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>GARLookUpAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/garlookup/GARLookUpAction.java</FilePath>
<LineStart>72</LineStart>
<Snippet>					EasyLogger.info(&quot;inside vid**&quot; + vid);
				}
				String outputXML = getResponse(garLookUpForm.getInputValue(),
						garLookUpForm.getInputType());
				if (null == outputXML) {</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.visiontools.garlookup.GARLookUpForm.getInputValue()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="966D8FF6E5C644C358D1CAAC0BA433FF">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSearchController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSearchController.java</FilePath>
<LineStart>63</LineStart>
<Snippet>					} else {
						widgetSearchForm.setInputValue(Utility.dataEncoder(request
								.getParameter(&quot;accountid&quot;)));
					}
					widgetSearchForm.setInputtypevalue(&quot;ACCID&quot;);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="6ACA530FA44D3127FA530FC910394240">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BundleNPromoAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/sspperigon/bundnpromo/action/BundleNPromoAction.java</FilePath>
<LineStart>38</LineStart>
<Snippet>
		// Get it from request
		String acctId = request.getParameter(&quot;sspAccId&quot;);

		BusinessObjectServiceFactory factory = BusinessObjectServiceFactoryImpl</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="209A0E19FF8C78A51B408F5938293CED">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSTNController.java</FilePath>
<LineStart>69</LineStart>
<Snippet>				String selectedReferral = request
						.getParameter(&quot;selectedReferral&quot;);
				String referralId = Utility.dataEncoder(request.getParameter(&quot;referralId&quot;));
				String referralStatus = Utility.dataEncoder(request.getParameter(&quot;referralStatus&quot;));
				StnRegisterForm stnRegisterForm = (StnRegisterForm) form;</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="A8E86E89FDFFFE89AD96AC1576075593">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MulitpleBroadbandToLECLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MulitpleBroadbandToLECLookupAction.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	}

	public void setInputValue(String inputValue) {
		this.inputValue = inputValue;
	}</Snippet>
<TargetFunction>setInputValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="4BE9EB39-FF85-4E90-82B4-F019867FB203" iid="4B3829866E5DFAA75304E53AB6E18D9C">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function GetMethod() on line 33 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ImageProxyAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/ImageProxyAction.java</FilePath>
<LineStart>33</LineStart>
<Snippet>			HttpClient client = new HttpClient();

			HttpMethod method = new GetMethod(url);

			PrintWriter out = response.getWriter();</Snippet>
<TargetFunction>org.apache.commons.httpclient.methods.GetMethod.GetMethod()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ImageProxyAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/emailtool/ImageProxyAction.java</FilePath>
<LineStart>26</LineStart>
<Snippet>			throws Exception {
		try {
			String url = request.getParameter(&quot;url&quot;);
            java.util.regex.Pattern ptn = java.util.regex.Pattern.compile(&quot;^(http|https:\\/\\/)?(www.)?([a-zA-Z0-9]+).[a-zA-Z0-9]*.[a-z]{3}.?([a-z]+)?&quot;);
            java.util.regex.Matcher mtr = ptn.matcher(url);                          </Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="E8B2CD9313ADC407FCE0CC5DAC5FA6B1">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSearchController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSearchController.java</FilePath>
<LineStart>357</LineStart>
<Snippet>							STNDetailsVO stnDetailsVO = widgetTestPageModel
									.getSTNDetails(
											Utility.getValidString(widgetSearchForm.getInputValue()),
											userId);
							if (stnDetailsVO.getErrorCode() != null</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.WidgetSearchForm.getInputValue()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="3441DD6B4B593074A3FB857E8A8C6DFD">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BQTReportAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/BQTReportAction.java</FilePath>
<LineStart>56</LineStart>
<Snippet>		bQTReportVO.setInput(bQTReportForm.getInput());
		bQTReportVO.setInputType(bQTReportForm.getInputType());
		bQTReportVO.setFirstName(bQTReportForm.getFirstName());
		bQTReportVO.setLastName(bQTReportForm.getLastName());
		bQTReportVO.setRegion(bQTReportForm.getRegion());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getFirstName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="DEE0A45FF58C6A07AE91D06C43092CB3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BillingAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/sspperigon/billing/action/BillingAction.java</FilePath>
<LineStart>37</LineStart>
<Snippet>				.getBusinessObjectService(&quot;com.verizon.ssp.flowclient.sspperigon.billing.service.Billing&quot;);

		String acctId = request.getParameter(&quot;sspAccId&quot;);
		AccountVO accVO = new AccountVO();
		accVO.setAccountId(acctId);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="24555202C785A60C812F0D59E22FF1BB">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1763</LineStart>
<Snippet>		if (obBean.getExpressId() != &quot;&quot;)
			requestXML = requestXML.concat(&quot;&lt;expressId&gt;&quot;
					+ obBean.getExpressId() + &quot;&lt;/expressId&gt;&quot;);
		if (obBean.getIlecAccountNumber() != &quot;&quot;)
			requestXML = requestXML.concat(&quot;&lt;ilecAccountNumber&gt;&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getExpressId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="26B2DB6A0A5068BF39C4A35E5C7AD732">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSTNController.java</FilePath>
<LineStart>217</LineStart>
<Snippet>					if (stnController != null
							&amp;&amp; stnController.equalsIgnoreCase(&quot;stnRegister&quot;)) {
						String email = Utility.getValidString(stnRegisterForm.geteMail());
						stnDetailsVO = widgetTestPageModel.registerSTN(email,
								stnDetailsVO);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.StnRegisterForm.geteMail()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="48798DA3191090DA55585D083DE21688">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>224</LineStart>
<Snippet>						//else{
							visionProfileMergeForm = getLookUpDetails2(outputXML,visionProfileMergeForm,request);
							 VisionCustomerId2=visionProfileMergeForm.getVisionCustomerId2();
							 VisionAccountId2=visionProfileMergeForm.getVisionAccountId2();
						//}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getVisionCustomerId2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="4BE9EB39-FF85-4E90-82B4-F019867FB203" iid="96009206F78718370C3F271D2EA027D6">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function PostMethod() on line 47 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DataShareInvoker.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/search/DataShareInvoker.java</FilePath>
<LineStart>47</LineStart>
<Snippet>			}

		PostMethod method = new PostMethod(url);

		method.addRequestHeader(&quot;VZID&quot;, vzId);</Snippet>
<TargetFunction>org.apache.commons.httpclient.methods.PostMethod.PostMethod()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="9FEC7145675512A5CDF84D57F78DD6D4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PlaceAccountFinalizeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/accountfinalize/PlaceAccountFinalizeAction.java</FilePath>
<LineStart>54</LineStart>
<Snippet>		if (bQTReportForm.getInputType() != null
				&amp;&amp; !bQTReportForm.getInputType().equals(&quot;&quot;)) {
			String visionid = Utility.getValidString(bQTReportForm.getInputType());
			bQTReportVO.setCustomerID(visionid.substring(0, 9));
			bQTReportVO.setAccountID(visionid.substring(9, 13));</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getInputType()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="F5AB989B3EBE888468E63ACA521D291D">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>1769</LineStart>
<Snippet>		if (obBean.getRAO() != &quot;&quot;)
			requestXML = requestXML
					.concat(&quot;&lt;rAO&gt;&quot; + obBean.getRAO() + &quot;&lt;/rAO&gt;&quot;);
		if (obBean.getCustCode() != &quot;&quot;)
			requestXML = requestXML.concat(&quot;&lt;custCode&gt;&quot; + obBean.getCustCode()</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getRAO()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="C7289611B71ACD43B617D1FA5DC3F1C7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>35</LineStart>
<Snippet>				String eMail = Utility.dataEncoder(request.getParameter(&quot;eMail&quot;));
				String fName = Utility.dataEncoder(request.getParameter(&quot;fName&quot;));
				String lName = Utility.dataEncoder(request.getParameter(&quot;lName&quot;));
				String refEmail = Utility.dataEncoder(request.getParameter(&quot;refEmail&quot;));
				String custType = Utility.dataEncoder(request.getParameter(&quot;custType&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="8D595193644D93F15D8F87FBED7BF19E">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SspNacrVisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/SspNacrVisionProfileMergeAction.java</FilePath>
<LineStart>136</LineStart>
<Snippet>						outputXML = getResponse(
								visionProfileMergeForm.getInputValue1(),
								visionProfileMergeForm.getInputType1());
						// }
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getInputType1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="80BE33EB6764CD92DEAFF678132BCDB1">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>206</LineStart>
<Snippet>					
					//if(!&quot;VisionId&quot;.equalsIgnoreCase(visionProfileMergeForm.getInputType2())){
						outputXML = getResponse(visionProfileMergeForm.getInputValue2(),visionProfileMergeForm.getInputType2());
					//}
				</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getInputType2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="AAD6146C3D823F1A76AC34B614037AC9">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="BC5A064B84B22EBA8DE885235B828D2A">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetTestPageModel.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/model/WidgetTestPageModel.java</FilePath>
<LineStart>46</LineStart>
<Snippet>			// get the search input and searchtype
			searchParam = Utility.getValidString(widgetSearchForm.getInputtypevalue());
			searchInput = Utility.getValidString(widgetSearchForm.getInputValue());
			widgetTestPagesDAO = new WidgetTestPagesDAO();
			String seqId = Long.toString(widgetTestPagesDAO.getSeqValue());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.WidgetSearchForm.getInputValue()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="BE179AAD9A10FEEA62570C6D1395E458">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>TVECustProfileLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVECustProfileLookupAction.java</FilePath>
<LineStart>38</LineStart>
<Snippet>		try {

			vzID = Utility.getValidString(tveForm.getVzID());

			if (vzID == null) {</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.tveverywheretools.TVECustProfileLookupForm.getVzID()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="088DF59EBC3C7D1A171E1139A59099E8">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="9ACD5A7D40D2794F80AAF0900CB98014">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>emailtool.jsp</FileName>
<FilePath>webapp/emailtool/emailtool.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>				userProfile = new UserProfile();
				header = &quot;N&quot;;
				userId = request.getHeader(&quot;VZID&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;sm_user&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="DE8446A1C43040E4C3353E5CF42F8E85">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/AddUserAction.java</FilePath>
<LineStart>226</LineStart>
<Snippet>					.getAttribute(&quot;addUser_session&quot;);
			wgMap = (HashMap) session.getAttribute(&quot;wgMap&quot;);
			addUserForm.setVzid(Utility.getValidString(addUserdetails.getVzid()));
			addUserForm.setUpdatedBy(userProfile_userId.getLoginName());
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermanagement.AddUserMangmtForm.getVzid()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="729E453B6C24EB3CF711EEE58C5AF851">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AccountVO.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/AccountVO.java</FilePath>
<LineStart>552</LineStart>
<Snippet>	}

	public void setAccountId(String accountId) {
		this.accountId = accountId;
	}</Snippet>
<TargetFunction>setAccountId(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="93B2A58EE173CA52D28BB97B01EE52C0">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BQTReportAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/BQTReportAction.java</FilePath>
<LineStart>59</LineStart>
<Snippet>		bQTReportVO.setLastName(bQTReportForm.getLastName());
		bQTReportVO.setRegion(bQTReportForm.getRegion());
		bQTReportVO.setState(bQTReportForm.getState());

		EasyLogger.info(&quot;bQTReportForm.getInput()&quot; + bQTReportForm.getInput());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getState()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="08F8FB45A760C2651189645AEF4C6C75">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>GARLookUpAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/garlookup/GARLookUpAction.java</FilePath>
<LineStart>62</LineStart>
<Snippet>						+ garLookUpForm.getInputValue());
				if (&quot;VisionId&quot;.equals(garLookUpForm.getInputType())) {
					String vid = garLookUpForm.getInputValue();
					if (vid != null &amp;&amp; vid.contains(&quot;-&quot;)) {
						vid = vid.replaceAll(&quot;-&quot;, &quot;&quot;);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.visiontools.garlookup.GARLookUpForm.getInputValue()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="A076C5001C3D323F0499BF375F590EE4">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThirdPartyLogonAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/logon/ThirdPartyLogonAction.java</FilePath>
<LineStart>93</LineStart>
<Snippet>			}
			try{
			userID = Utility.dataEncoder(request.getHeader(&quot;sm_user&quot;));
		} catch (Exception e1) {
			e1.printStackTrace();</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="6F54B3E945243F8FDBC628482B767FDA">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BQTReportAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/BQTReportAction.java</FilePath>
<LineStart>58</LineStart>
<Snippet>		bQTReportVO.setFirstName(bQTReportForm.getFirstName());
		bQTReportVO.setLastName(bQTReportForm.getLastName());
		bQTReportVO.setRegion(bQTReportForm.getRegion());
		bQTReportVO.setState(bQTReportForm.getState());
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getRegion()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="FDFEA2CB862B3F9C9CA3FFDE94A491E2">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WMGResourcesAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/search/WMGResourcesAction.java</FilePath>
<LineStart>696</LineStart>
<Snippet>			resourceUnit.setInputvalue(inputValue);
			resourceUnit.setInputtype(inputType);
			resourceUnit.setFirstName(resourceForm.getFirstName());
			resourceUnit.setLastName(resourceForm.getLastName());
			// resourceUnit.setRegion(resourceForm.getRegion());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.wmg.search.WMGResourcesForm.getFirstName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="DE8446A1C43040E4C3353E5CF42F8E86">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/AddUserAction.java</FilePath>
<LineStart>425</LineStart>
<Snippet>				reqXml = adduserManagementService
						.getXmlLookUp(&quot;ADDUSER_SSOREQUEST_XML&quot;);
				reqXml = parseXMLCredentials(reqXml, Utility.getValidString(addUserdetails.getVzid()));
				responseXml = HTTPSRequester.postHTTPSData(reqXml, ssoURL);
				EasyLogger.debug(&quot;&lt;&lt;Response XML SUCCESS&gt;&gt;&quot;);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermanagement.AddUserMangmtForm.getVzid()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="D04BEBDB7657D912ADE5ED7FC77A5985">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPV5ProfileAddServiceAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/sspv5profilecorrection/SSPV5ProfileAddServiceAction.java</FilePath>
<LineStart>85</LineStart>
<Snippet>				session.removeAttribute(&quot;sspAddRemoveService&quot;);
				String visionCustId = sspV5ProfileAddServiceForm
						.getVisionCustId().trim().replaceAll(&quot;-&quot;, &quot;&quot;);
				String visionAcctId = sspV5ProfileAddServiceForm
						.getVisionAcctId().trim().replaceAll(&quot;-&quot;, &quot;&quot;);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.visiontools.sspv5profilecorrection.SSPV5ProfileAddServiceForm.getVisionCustId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="6650026D08C4F54BA8B8EB5C051A9025">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ssppgProfileOrderHistory.jsp</FileName>
<FilePath>webapp/ssppgProfileOrderHistory.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>&lt;/head&gt;
&lt;%
{	String sspAccId= request.getParameter(&quot;sspAccId&quot;);
try{
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="027EBA69083E95D419446CE80B804775">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WMGResourcesAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/search/WMGResourcesAction.java</FilePath>
<LineStart>697</LineStart>
<Snippet>			resourceUnit.setInputtype(inputType);
			resourceUnit.setFirstName(resourceForm.getFirstName());
			resourceUnit.setLastName(resourceForm.getLastName());
			// resourceUnit.setRegion(resourceForm.getRegion());
			resourceUnit.setState(resourceForm.getState());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.wmg.search.WMGResourcesForm.getLastName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="8B16B67F26D701C5B1A1CB2158AE3BD7">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BQTReportAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bqtreport/BQTReportAction.java</FilePath>
<LineStart>57</LineStart>
<Snippet>		bQTReportVO.setInputType(bQTReportForm.getInputType());
		bQTReportVO.setFirstName(bQTReportForm.getFirstName());
		bQTReportVO.setLastName(bQTReportForm.getLastName());
		bQTReportVO.setRegion(bQTReportForm.getRegion());
		bQTReportVO.setState(bQTReportForm.getState());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getLastName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="988000D4CB65E350D7BB8E192EC4B7AA">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>RestoreAccountAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/restoretools/RestoreAccountAction.java</FilePath>
<LineStart>48</LineStart>
<Snippet>		BQTReportVO bQTReportVO = new BQTReportVO();

		bQTReportVO.setInput(bQTReportForm.getInput());
		String inputType = bQTReportForm.getInputType();
</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getInput()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="35CDF35A2AD01E845F5E29A2382E5C3B">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/controller/HealthCheckSTNController.java</FilePath>
<LineStart>33</LineStart>
<Snippet>			System.out.println(&quot;inside HealthCheckSTNController&quot;);
			if (setTopBoxId != null) {
				String eMail = Utility.dataEncoder(request.getParameter(&quot;eMail&quot;));
				String fName = Utility.dataEncoder(request.getParameter(&quot;fName&quot;));
				String lName = Utility.dataEncoder(request.getParameter(&quot;lName&quot;));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="E59B555477C16D01C4EA7552CEC857A9">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SspNacrVisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/SspNacrVisionProfileMergeAction.java</FilePath>
<LineStart>135</LineStart>
<Snippet>						// if(!&quot;VisionId&quot;.equalsIgnoreCase(visionProfileMergeForm.getInputType1())){
						outputXML = getResponse(
								visionProfileMergeForm.getInputValue1(),
								visionProfileMergeForm.getInputType1());
						// }</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.profilemerge.VisionProfileMergeForm.getInputValue1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="0B92336B494AB237AFAE1DFCEF35A094">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>GARLookUpAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/garlookup/GARLookUpAction.java</FilePath>
<LineStart>73</LineStart>
<Snippet>				}
				String outputXML = getResponse(garLookUpForm.getInputValue(),
						garLookUpForm.getInputType());
				if (null == outputXML) {
					PropertyUtils</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.visiontools.garlookup.GARLookUpForm.getInputType()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="C2B3FF40C17EB054CD233A34AD5A6F77">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>emailtool.jsp</FileName>
<FilePath>webapp/emailtool/emailtool.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>				userId = request.getHeader(&quot;VZID&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;sm_user&quot;);
				if(userId == null || userId.equals(&quot;&quot;))
					userId = request.getHeader(&quot;vzid&quot;);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="D39BB7E288CDC29C8441CF507301327F">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>379</LineStart>
<Snippet>						+ &quot;  &lt;ClientSystemId&gt;SSPWF&lt;/ClientSystemId&gt;    &quot;
						+ &quot;   &lt;ClientRequestId&gt;&quot;
						+ obCriteria.getMtn()
						+ &quot;FG&quot;
						+ date</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getMtn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="9FEC7145675512A5CDF84D57F78DD6D3">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PlaceAccountFinalizeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/accountfinalize/PlaceAccountFinalizeAction.java</FilePath>
<LineStart>49</LineStart>
<Snippet>		if (bQTReportForm.getInputType() != null
				&amp;&amp; bQTReportForm.getInputType().contains(&quot;-&quot;)) {
			bQTReportForm.setInputType(Utility.getValidString(bQTReportForm.getInputType().replaceAll(
					&quot;-&quot;, &quot;&quot;)));
		}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.bqtreport.BQTReportForm.getInputType()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="A314457754E290D614A8207866B2321D">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 254 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetHealthCheckUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/utils/WidgetHealthCheckUtil.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	            if (mtr.find()) {
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HealthCheckToolModel.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/hctool/model/HealthCheckToolModel.java</FilePath>
<LineStart>81</LineStart>
<Snippet>						widgetHCReportVO.setSeqId(masterSeq);
						widgetHCReportVO.setStbId(Utility.dataEncoder(request
								.getParameter(masterSeq + &quot;_STBID&quot;)));
						widgetHCReportVO.setCustomerType(widgetHCToolVO
								.getCustomerType());</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="3C7BB24AD3D35AA8988C1F3A0695E6E5">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetSTNController.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/controller/WidgetSTNController.java</FilePath>
<LineStart>239</LineStart>
<Snippet>								Utility.getValidString(stnRegisterForm.getReferralEmail()),
								Utility.getValidString(stnRegisterForm.getReferralfName()),
								Utility.getValidString(stnRegisterForm.getReferrallName()),
								stnDetailsVO);
						request.getSession().removeAttribute(&quot;STNDETAILS&quot;);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.widgetTool.widget.testpage.forms.StnRegisterForm.getReferrallName()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="D39BB7E288CDC29C8441CF5073013280">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>OBFalloutService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/workunit/OBFalloutService.java</FilePath>
<LineStart>396</LineStart>
<Snippet>				wirelessReqXML = wirelessReqXML.replace(&quot;%PASSWORD%&quot;, ordWSPwd);
				wirelessReqXML = wirelessReqXML.replace(&quot;%MTN%&quot;,
						obCriteria.getMtn());
				vzw.setOrderId(orderRule.getOrderId());
				vzw.setRequestXML(wirelessReqXML);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.workunit.OBFalloutBean.getMtn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="4BF582AC07F884CB844DC2B6CA40E1C2">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 77 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>77</LineStart>
<Snippet>					HTTPConn.getOutputStream());

			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			EasyLogger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ProfileAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/sspperigon/profile/action/ProfileAction.java</FilePath>
<LineStart>522</LineStart>
<Snippet>			String sspAcctId =null;
			 try {
			 sspAcctId = ESAPI.encoder().encodeForURL(request.getParameter(&quot;sspAccId&quot;)); 
            java.net.URLDecoder.decode(sspAcctId,&quot;UTF-8&quot;);   
			 } catch (Exception e1) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="56A3F802-145C-49C7-A828-177ABDAEED0A" iid="0E7EFB8F44461D98E37D9C8D43F62040">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function post() on line 100 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVEAddEditCustProfileService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/tveverywheretools/TVEAddEditCustProfileService.java</FilePath>
<LineStart>100</LineStart>
<Snippet>			WebResource subService = client.resource(webserviceURL);
			ClientResponse response1 = subService.type(&quot;application/xml&quot;).post(
					ClientResponse.class, ESAPI.encoder().encodeForXPath(requestXML));
			responseXML = response1.getEntity(String.class);
			tveForm.setRespStatus(response1.getClientResponseStatus()</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.Builder.post()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XmlUrlLookup.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/misc/XmlUrlLookup.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	}

	public void setLookupValue(String lookupValue) {
		this.lookupValue = lookupValue;
	}</Snippet>
<TargetFunction>setLookupValue(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F694CA24-F4B8-4B2B-A501-A8A7E8B2FDD2" iid="CE2ABB38CE423F7B18148946DC8DD6B1">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function writeBytes() on line 66 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HTTPSRequester.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/HTTPSRequester.java</FilePath>
<LineStart>66</LineStart>
<Snippet>				dout = new DataOutputStream(
					HTTPConn.getOutputStream());
			dout.writeBytes(ESAPI.encoder().encodeForXML((strXML)));

			logger.info(&quot;Posted Successfully...&quot;);</Snippet>
<TargetFunction>java.io.DataOutputStream.writeBytes()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AddUserAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/usermanagement/AddUserAction.java</FilePath>
<LineStart>235</LineStart>
<Snippet>				reqXml = adduserManagementService
						.getXmlLookUp(&quot;DELETEUSER_SSOREQUEST_XML&quot;);
				reqXml = parseXMLCredentials(reqXml, Utility.getValidString(addUserForm.getVzid()));

				// EasyLogger.info(reqXml);</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.tools.usermanagement.AddUserMangmtForm.getVzid()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="33DDCCB9-248C-46E8-BF4E-0A8DFA006946" iid="FBA825CE4FDF2A38E94903277919853B">
                            <Category>Server-Side Request Forgery</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function openConnection() on line 400 initiates a network connection to a third-party system using user-controlled data for resource URI. An attacker may leverage this vulnerability to send a request on behalf of the application server since the request will originate from the application server internal IP.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>400</LineStart>
<Snippet>
			URL url = new URL(sspWidgetURL);
			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));</Snippet>
<TargetFunction>java.net.URL.openConnection()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WidgetTestPageUtil.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/widgetTool/widget/testpage/utils/WidgetTestPageUtil.java</FilePath>
<LineStart>402</LineStart>
<Snippet>			urlc = url.openConnection();
			in = new BufferedReader(
					new InputStreamReader(urlc.getInputStream()));

			String inputLine;</Snippet>
<TargetFunction>java.net.URLConnection.getInputStream()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="59">
                        <groupTitle>Often Misused: File Upload</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Regardless of the language in which a program is written, the most devastating attacks often involve remote code execution, whereby an attacker succeeds in executing malicious code in the program's context. If attackers are allowed to upload files to a directory that is accessible from the Web and cause these files to be passed to a code interpreter (e.g. JSP/ASPX/PHP), then they can cause malicious code contained in these files to execute on the server.
Even if a program stores uploaded files under a directory that isn't accessible from the Web, attackers might still be able to leverage the ability to introduce malicious content into the server environment to mount other attacks. If the program is susceptible to path manipulation, command injection, or dangerous file inclusion vulnerabilities, then an attacker might upload a file with malicious content and cause the program to read or execute it by exploiting another vulnerability.

An &lt;input&gt; tag of type file indicates the program accepts file uploads.
Example:

&lt;input type=&quot;file&quot;&gt;
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Do not allow file uploads if they can be avoided. If a program must accept file uploads, then restrict the ability of an attacker to supply malicious content by only accepting the specific types of content the program expects. Most attacks that rely on uploaded content require that attackers be able to supply content of their choosing. Placing restrictions on the content the program will accept will greatly limit the range of possible attacks. Check file names, extensions, and file content to make sure they are all expected and acceptable for use by the application.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>59</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="3AE6B9F774325C9F378260545CFD5402">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in VisionOrdBuilderToolAction.java at line 146 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>VisionOrdBuilderToolAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/VisionOrdBuilderToolAction.java</FilePath>
<LineStart>146</LineStart>
<Snippet>	}

	public void setXml(File xml) {
		this.xml = xml;
	}</Snippet>
<TargetFunction>Function: setXml()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="DDE3B2CE1FD5CCC79D1219A55D4213FE">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>instepAnalysis.jsp</FileName>
<FilePath>webapp/instepAnalysis.jsp</FilePath>
<LineStart>166</LineStart>
<Snippet>                &lt;td height=&quot;30&quot; width=&quot;26%&quot;&gt;&lt;div align=&quot;left&quot; class=&quot;style1&quot;&gt;&lt;strong&gt;Please select a File&lt;/strong&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;td width=&quot;37%&quot;  height=&quot;40&quot; &gt;
                	&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;40&quot;&gt;                 	
                &lt;/td&gt;                 
                &lt;td width=&quot;28%&quot; &gt; &lt;div align=&quot;justify&quot;&gt;                </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="58E6EEB652F854DE60B8681A089FCEF1">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassVisionProfileLookupAction.java at line 55 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassVisionProfileLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileLookupAction.java</FilePath>
<LineStart>55</LineStart>
<Snippet>	private String filename;

	public void setUpload(File file) {
		this.file = file;
	}</Snippet>
<TargetFunction>Function: setUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="6E7182E6C81B738515ADF8ECDDD48362">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in FeRequalifyAction.java at line 86 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>FeRequalifyAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/FeRequalifyAction.java</FilePath>
<LineStart>86</LineStart>
<Snippet>		}

		public void setFeRequalFile(File feRequalFile) {
			this.feRequalFile = feRequalFile;
		}</Snippet>
<TargetFunction>Function: setFeRequalFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="401B9C2251B34A7571E6AB3EB22B1CD6">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in NSOPUploadForm.java at line 13 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>NSOPUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/nsop/NSOPUploadForm.java</FilePath>
<LineStart>13</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="B03C69C2D5C2AF30FB714EAB0B2B08C4">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massupload.jsp</FileName>
<FilePath>webapp/businessTools/tools/massupload.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>   &lt;/td&gt;
	&lt;td  &gt;
		&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;50&quot; /&gt;
	&lt;/td&gt;
&lt;!-- VDSI - Janani - 07/10 - R3219680 --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="455EF4DED26CF2CA8A910B435328952F">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in PromoPriceForm.java at line 13 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>PromoPriceForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/ds/PromoPriceForm.java</FilePath>
<LineStart>13</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="789B111C7D351557EC83DE46CD1452CA">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassPYVUploadForm.java at line 30 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassPYVUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/pyvupload/MassPYVUploadForm.java</FilePath>
<LineStart>30</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="DA27C763199D2CAFBC0F5E7D9E62084E">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/affinityUploadXls.jsp###22###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in affinityUploadXls.jsp on line 22 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>affinityUploadXls.jsp</FileName>
<FilePath>webapp/affinityUploadXls.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>	String	userId = userProfile_userId.getLoginName();
	boolean isMultipart = FileUpload.isMultipartContent(request);
	DiskFileUpload upload = new DiskFileUpload();
	List items = upload.parseRequest(request);
	Iterator itr = items.iterator();</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="8F54ACA0136498943B0BD1D186F5FD4F">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in EmailEventUploadForm.java at line 32 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>EmailEventUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/email/EmailEventUploadForm.java</FilePath>
<LineStart>32</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="9F5A26D9ECCCA430E50DDDA36A498F2D">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in ImportUsingExcelAndRouteForm.java at line 49 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>ImportUsingExcelAndRouteForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/routeunitofwork/ImportUsingExcelAndRouteForm.java</FilePath>
<LineStart>49</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="EA47AAA17BF98AA09BF886A108AE48F0">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in UpdatePNDriverForm.java at line 95 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>UpdatePNDriverForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/pndriver/UpdatePNDriverForm.java</FilePath>
<LineStart>95</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="A9753D3CB73834C3B186C3DDB5D13152">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>cancelFileUpload.jsp</FileName>
<FilePath>webapp/cancelFileUpload.jsp</FilePath>
<LineStart>82</LineStart>
<Snippet> &lt;form name=&quot;frmPbl&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifrmXML&quot;&gt;
    &lt;strong&gt;Specify your File:&lt;/strong&gt;
      &amp;nbsp;&amp;nbsp;&lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt;&lt;br /&gt;&lt;br /&gt;
    &amp;nbsp;&amp;nbsp;&lt;!-- &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;Submit your files&quot;/&gt; --&gt;
	&lt;button onClick=&quot;setUploadAttr();&quot; &gt;Submit your files&lt;/button&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="29F85930B7BC9BF9DE018EF968750C5B">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassLecCreateAction.java at line 31 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassLecCreateAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassLecCreateAction.java</FilePath>
<LineStart>31</LineStart>
<Snippet>	private String filename;

	public void setUpload(File file) {
		this.file = file;
	}</Snippet>
<TargetFunction>Function: setUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="C98713473C664558F4401E78FFBA4617">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>analyzerCorrectionBatch.jsp</FileName>
<FilePath>webapp/analyzerCorrectionBatch.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>										        &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&lt;/td&gt;
										        &lt;td&gt;&lt;label for=&quot;fileField&quot;&gt;&lt;/label&gt;
									            &lt;input type=&quot;file&quot; name=&quot;fileField&quot; id=&quot;fileField&quot;&gt;&lt;/td&gt;
									          &lt;/tr&gt;
										      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="422F33F6E5A28EC27B71A5797716D0E8">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/cancelXML.jsp###27###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in cancelXML.jsp on line 27 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>cancelXML.jsp</FileName>
<FilePath>webapp/cancelXML.jsp</FilePath>
<LineStart>27</LineStart>
<Snippet>	boolean isMultipart = FileUpload.isMultipartContent(request);
	//File savedFile = new File();
	DiskFileUpload upload = new DiskFileUpload();

	// parse this request by the handler</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="739B5347BAE82E8341329D2F5D04C703">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassUOWUploadRibsVoiceeForm.java at line 20 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassUOWUploadRibsVoiceeForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/uow/MassUOWUploadRibsVoiceeForm.java</FilePath>
<LineStart>20</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		EasyLogger.info(&quot;Coming Inside Setter&quot;);
		this.uploadFile = uploadFile;</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="DAC804A7834FDC3D0AC102D344AD402C">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassRecapCktForm.java at line 57 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassRecapCktForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/datamanagement/MassRecapCktForm.java</FilePath>
<LineStart>57</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="8910BA527B7F0DBA429433B8DEC6D6D7">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassCancelXlsUploadForm.java at line 207 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassCancelXlsUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/masscancel/MassCancelXlsUploadForm.java</FilePath>
<LineStart>207</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="605CDE0200DC8A5FE3B5EB5476146F3B">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massbillingupdate.jsp</FileName>
<FilePath>webapp/businessTools/tools/massbillingupdate.jsp</FilePath>
<LineStart>74</LineStart>
<Snippet>
&lt;td width=&quot;22%&quot; rowspan=&quot;2&quot;  height=&quot;40&quot;&gt;
&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;40&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/td&gt;
&lt;!-- VDSI - Janani - 07/10 - R3219680 --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="79DF77FF4961C396E9B7FE2BF1A743E4">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in GridBulkUploadAction.java at line 42 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>GridBulkUploadAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/GridBulkUploadAction.java</FilePath>
<LineStart>42</LineStart>
<Snippet>		return fileUpload;
	}
	public void setFileUpload(File fileUpload) {
		this.fileUpload = fileUpload;
	}</Snippet>
<TargetFunction>Function: setFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="AE0FF5770457B14B14A44D583C85FE77">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>analyzerAnalysisBatch.jsp</FileName>
<FilePath>webapp/analyzerAnalysisBatch.jsp</FilePath>
<LineStart>87</LineStart>
<Snippet>										        &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&lt;/td&gt;
										        &lt;td&gt;&lt;label for=&quot;fileField&quot;&gt;&lt;/label&gt;
									            &lt;input type=&quot;file&quot; name=&quot;fileField&quot; id=&quot;fileField&quot;&gt;&lt;/td&gt;
									          &lt;/tr&gt;
										      &lt;tr&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="0677AF8D84B32595FE6BE4BC8C434D0A">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassLECADXUploadForm.java at line 25 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassLECADXUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/LECADX/MassLECADXUploadForm.java</FilePath>
<LineStart>25</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {

		this.uploadFile = uploadFile;</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="19C4EE50B7B88E421F32F6C025DE632E">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>deenroll_tool.jsp</FileName>
<FilePath>webapp/deenroll_tool.jsp</FilePath>
<LineStart>138</LineStart>
<Snippet>                &lt;td height=&quot;30&quot; width=&quot;26%&quot;&gt;&lt;div align=&quot;left&quot; class=&quot;style1&quot;&gt;&lt;strong&gt;Please select a File&lt;/strong&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;td width=&quot;37%&quot;  height=&quot;40&quot; colspan=&quot;2&quot; &gt;
                	&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;40&quot;&gt;                 	
                &lt;/td&gt;                 
                &lt;td width=&quot;28%&quot; &gt;&amp;nbsp; &lt;/td&gt;  </Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="E258D6A15DB711222F3E73114C5B81E8">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassEmailForm.java at line 77 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassEmailForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/massEmail/MassEmailForm.java</FilePath>
<LineStart>77</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="C04B80EE7A6D54432CE72A89D2856C24">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassDDUpdateForm.java at line 14 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassDDUpdateForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/massddupdate/MassDDUpdateForm.java</FilePath>
<LineStart>14</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="B12F13175893351E8F70B1D8B75C0416">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MOGFileUploadForm.java at line 127 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MOGFileUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileUploadForm.java</FilePath>
<LineStart>127</LineStart>
<Snippet>	}

	public void setFile2(FormFile file2) {
		this.file2 = file2;
	}</Snippet>
<TargetFunction>Function: setFile2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="667132E7C0F47E4050A706AFC6A7646D">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>fileupload.jsp</FileName>
<FilePath>webapp/businessTools/tools/fileupload.jsp</FilePath>
<LineStart>55</LineStart>
<Snippet>					&lt;/span&gt;		

						&lt;input type=&quot;file&quot; name=&quot;fileUpload&quot; id=&quot;fileUpload&quot; /&gt;
						&lt;!--&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;					--&gt;
					&lt;input type=&quot;image&quot; src=&quot;images/buttons_submit.gif&quot; alt=&quot;Submit&quot; class=&quot;searchimage&quot;/&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="935EB353C8609D55DF45F7CAF677AAC8">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassVisionProfileProductLookupAction.java at line 60 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassVisionProfileProductLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileProductLookupAction.java</FilePath>
<LineStart>60</LineStart>
<Snippet>	private String filename;

	public void setUpload(File file) {
		this.file = file;
	}</Snippet>
<TargetFunction>Function: setUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="0363E77EA39F577B5416D7593E3F67B0">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in LECDetailsAction.java at line 83 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>LECDetailsAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/LECDetailsAction.java</FilePath>
<LineStart>83</LineStart>
<Snippet>	}

	public void setProfileStatusFile(File profileStatusFile) {
		this.profileStatusFile = profileStatusFile;
	}</Snippet>
<TargetFunction>Function: setProfileStatusFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="96892B13470F75430A5C4FC9B96181EA">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in ReflowIvappForm.java at line 25 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>ReflowIvappForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/ReflowIvappForm.java</FilePath>
<LineStart>25</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="94E5A4E87E4B9AF5640426FEC94669E0">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MOGFileUploadForm.java at line 151 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MOGFileUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileUploadForm.java</FilePath>
<LineStart>151</LineStart>
<Snippet>	}

	public void setFile5(FormFile file5) {
		this.file5 = file5;
	}</Snippet>
<TargetFunction>Function: setFile5()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="008C58D17038E34A0D0E1949AAA0835C">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/massNAMailDtlsUpload.jsp###21###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in massNAMailDtlsUpload.jsp on line 21 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massNAMailDtlsUpload.jsp</FileName>
<FilePath>webapp/massNAMailDtlsUpload.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>			FileUpload fup=new FileUpload();
			boolean isMultipart = FileUpload.isMultipartContent(request);
			DiskFileUpload upload = new DiskFileUpload();
			List items = upload.parseRequest(request);
			Iterator iter = items.iterator();</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="D44BAD8BEA31C4FD4ED27779ED35603F">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in VisionOrdBuilderToolAction.java at line 138 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>VisionOrdBuilderToolAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/VisionOrdBuilderToolAction.java</FilePath>
<LineStart>138</LineStart>
<Snippet>	}

	public void setFile(File file) {
		this.file = file;
	}</Snippet>
<TargetFunction>Function: setFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="0741AC1FEAFC89CD59F35BBE2CD4DFCF">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassUOWUploadAcctOnlyForm.java at line 30 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassUOWUploadAcctOnlyForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/uow/MassUOWUploadAcctOnlyForm.java</FilePath>
<LineStart>30</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="2033AFFA5D01580621B5D36DCD26F259">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/cancelXMLNewISD.jsp###34###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in cancelXMLNewISD.jsp on line 34 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>cancelXMLNewISD.jsp</FileName>
<FilePath>webapp/cancelXMLNewISD.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>	boolean isMultipart = FileUpload.isMultipartContent(request);
	//File savedFile = new File();
	DiskFileUpload upload = new DiskFileUpload();

	// parse this request by the handler</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="F9F517E00575186C76C3277DAB9FDC6E">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassCancelUploadForm.java at line 13 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassCancelUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/masscancel/MassCancelUploadForm.java</FilePath>
<LineStart>13</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="2CB8265E750809D47E59CCFB3C4EE661">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>affinityUpload.jsp</FileName>
<FilePath>webapp/affinityUpload.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>
&lt;td width=&quot;22%&quot; rowspan=&quot;2&quot;  height=&quot;40&quot;&gt;
&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;40&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/td&gt;
&lt;!-- VDSI - Janani - 07/10 - R3219680 --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="76A0CFC417D624E6AF8C735DD2AE7A39">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/inStepUpload.jsp###22###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in inStepUpload.jsp on line 22 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>inStepUpload.jsp</FileName>
<FilePath>webapp/inStepUpload.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>	String	userId = userProfile_userId.getLoginName();
	boolean isMultipart = FileUpload.isMultipartContent(request);
	DiskFileUpload upload = new DiskFileUpload();
	List items = upload.parseRequest(request);
	Iterator itr = items.iterator();</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="4D1C3577C45CF3EE318E60F27F546A4A">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/massBillingXlsUpload.jsp###22###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in massBillingXlsUpload.jsp on line 22 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massBillingXlsUpload.jsp</FileName>
<FilePath>webapp/massBillingXlsUpload.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>	String	userId = userProfile_userId.getLoginName();
	boolean isMultipart = FileUpload.isMultipartContent(request);
	DiskFileUpload upload = new DiskFileUpload();
	List items = upload.parseRequest(request);
	Iterator itr = items.iterator();</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="24A2AA0907E8E7096B9EF2E2C81026AB">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MOGFileUploadForm.java at line 135 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MOGFileUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileUploadForm.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	}

	public void setFile3(FormFile file3) {
		this.file3 = file3;
	}</Snippet>
<TargetFunction>Function: setFile3()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="AE3174535108992739E3D47433917304">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassUOWUploadAction.java at line 334 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassUOWUploadAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/MassUOWUploadAction.java</FilePath>
<LineStart>334</LineStart>
<Snippet>	}

	public void setUploadFile(File uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="98A9D8730596BE0B76F02DEB38A1061A">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in PPUploadForm.java at line 17 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>PPUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/pots/PPUploadForm.java</FilePath>
<LineStart>17</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="3E1A2A2CE0CA711DF45EB0A9F44E3118">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassUOWUploadForm.java at line 13 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassUOWUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/uow/MassUOWUploadForm.java</FilePath>
<LineStart>13</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="727233B31B83303116DCFDFD026269F0">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MOGFileUploadForm.java at line 143 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MOGFileUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileUploadForm.java</FilePath>
<LineStart>143</LineStart>
<Snippet>	}

	public void setFile4(FormFile file4) {
		this.file4 = file4;
	}</Snippet>
<TargetFunction>Function: setFile4()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="3149105436DB5D736F0E945425FE4655">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassEmailForm.java at line 53 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassEmailForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/massEmail/MassEmailForm.java</FilePath>
<LineStart>53</LineStart>
<Snippet>	}

	public void setTemplateFile(FormFile templateFile) {
		this.templateFile = templateFile;
	}</Snippet>
<TargetFunction>Function: setTemplateFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="B66E28CE94239EB70D4B7993E55E1EBE">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in PostFirmSaleForm.java at line 36 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>PostFirmSaleForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/postfirmsaletool/PostFirmSaleForm.java</FilePath>
<LineStart>36</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		if(uploadFile!= null &amp;&amp; uploadFile.getFileName().endsWith(&quot;.xls&quot;))
		this.uploadFile = uploadFile;</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="75B08D3BB1BE93458BAF8ECCE2C9F915">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in ByPassLQCSRForm.java at line 28 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>ByPassLQCSRForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/upload/pots/ByPassLQCSRForm.java</FilePath>
<LineStart>28</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {

		this.uploadFile = uploadFile;</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="B03C69C2D5C2AF30FB714EAB0B2B08C5">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massupload.jsp</FileName>
<FilePath>webapp/massupload.jsp</FilePath>
<LineStart>75</LineStart>
<Snippet>   &lt;/td&gt;
	&lt;td  &gt;
		&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;50&quot; /&gt;
	&lt;/td&gt;
&lt;!-- VDSI - Janani - 07/10 - R3219680 --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="BAA672BE9116520E419FA0276F379C0E">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/massNAMailDtlsUpload.jsp###19###0###0&quot;&gt;FileUpload()&lt;/a&gt; in massNAMailDtlsUpload.jsp on line 19 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massNAMailDtlsUpload.jsp</FileName>
<FilePath>webapp/massNAMailDtlsUpload.jsp</FilePath>
<LineStart>19</LineStart>
<Snippet>		String uploadPath=&quot;&quot;;
		try{
			FileUpload fup=new FileUpload();
			boolean isMultipart = FileUpload.isMultipartContent(request);
			DiskFileUpload upload = new DiskFileUpload();</Snippet>
<TargetFunction>FileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="B1E33400FCE2AF9CAC16D69933E4C744">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in WMGCreateUOWForm.java at line 21 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>WMGCreateUOWForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/wmg/admin/WMGCreateUOWForm.java</FilePath>
<LineStart>21</LineStart>
<Snippet>	}

	public void setUploadFile(FormFile uploadFile) {
		this.uploadFile = uploadFile;
	}</Snippet>
<TargetFunction>Function: setUploadFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F59EAA0E-BAD3-4B56-9F9C-5B4A453E5A16" iid="344E79859099FC7D58A85E2FD5CFCD82">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MOGFileUploadForm.java at line 119 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MOGFileUploadForm.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileUploadForm.java</FilePath>
<LineStart>119</LineStart>
<Snippet>	}

	public void setFile1(FormFile file1) {
		this.file1 = file1;
	}</Snippet>
<TargetFunction>Function: setFile1()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="93C9AB567D92730779F786912A158516">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in RqtSqtConsolRequestAction.java at line 60 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>RqtSqtConsolRequestAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/RqtSqtConsolRequestAction.java</FilePath>
<LineStart>60</LineStart>
<Snippet>		}

		public void setFile(File file) {
			this.file = file;
		}</Snippet>
<TargetFunction>Function: setFile()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="605CDE0200DC8A5FE3B5EB5476146F3C">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massbillingupdate.jsp</FileName>
<FilePath>webapp/massbillingupdate.jsp</FilePath>
<LineStart>77</LineStart>
<Snippet>
&lt;td width=&quot;22%&quot; rowspan=&quot;2&quot;  height=&quot;40&quot;&gt;
&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;40&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/td&gt;
&lt;!-- VDSI - Janani - 07/10 - R3219680 --&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="A8F7C4F5B367D29C911B0B4AA21CC0EA">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/cancelXMLNewNoISD.jsp###29###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in cancelXMLNewNoISD.jsp on line 29 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>cancelXMLNewNoISD.jsp</FileName>
<FilePath>webapp/cancelXMLNewNoISD.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>	boolean isMultipart = FileUpload.isMultipartContent(request);
	//File savedFile = new File();
	DiskFileUpload upload = new DiskFileUpload();

	// parse this request by the handler</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F817CA63-FAE2-40D4-9A51-89912B5ADFC1" iid="F1B293347AB0AB7BA8DD7AAEA0AA57E2">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>masscancel.jsp</FileName>
<FilePath>webapp/masscancel.jsp</FilePath>
<LineStart>69</LineStart>
<Snippet>
&lt;td width=&quot;22%&quot; rowspan=&quot;2&quot;  height=&quot;40&quot;&gt;
&lt;input type=&quot;file&quot; height=&quot;20&quot; name=&quot;datafile&quot; size=&quot;40&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/td&gt;
</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="F316970C-9FEF-4C7A-B94C-6560E690C3B4" iid="689867AC022409028D6414D832FC1C08">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function &lt;a href=&quot;location://webapp/businessTools/tools/massBillingXlsUpload.jsp###21###0###0&quot;&gt;DiskFileUpload()&lt;/a&gt; in massBillingXlsUpload.jsp on line 21 retrieves attachments from a SOAP message. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>massBillingXlsUpload.jsp</FileName>
<FilePath>webapp/businessTools/tools/massBillingXlsUpload.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>	String	userId = userProfile_userId.getLoginName();
	boolean isMultipart = FileUpload.isMultipartContent(request);
	DiskFileUpload upload = new DiskFileUpload();
	List items = upload.parseRequest(request);
	Iterator itr = items.iterator();</Snippet>
<TargetFunction>DiskFileUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="74244DFC86D1E535A00AE4CB36D73D64">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in MassIvappOrderStatusLookupAction.java at line 41 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassIvappOrderStatusLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassIvappOrderStatusLookupAction.java</FilePath>
<LineStart>41</LineStart>
<Snippet>	private String filename;

	public void setUpload(File file) {
		this.file = file;
	}</Snippet>
<TargetFunction>Function: setUpload()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="BFDB6B26-66F8-44E4-8772-719C53908B4C" iid="B30D8598B7126F2A8A8B072EC8C9353B">
                            <Category>Often Misused: File Upload</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The setter in LECDetailsAction.java at line 51 is used by the Struts framework to set uploaded files. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>LECDetailsAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/action/LECDetailsAction.java</FilePath>
<LineStart>51</LineStart>
<Snippet>	}

	public void setBtnFile(File btnFile) {
		this.btnFile = btnFile;
	}</Snippet>
<TargetFunction>Function: setBtnFile()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="35">
                        <groupTitle>Command Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method createCall() in ISPGWWebServiceSoapBindingStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Command injection vulnerabilities take two forms:

- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.

- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.

In this case we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:

1. Data enters the application from an untrusted source.


2. The data is used as or as part of a string representing a command that is executed by the application.

3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Example 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.


	...
	String home = System.getProperty(&quot;APPHOME&quot;);
	String cmd = home + INITCMD;
	java.lang.Runtime.getRuntime().exec(cmd);
	...


The code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.

Example 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.


...
String btype = request.getParameter(&quot;backuptype&quot;);
String cmd = new String(&quot;cmd.exe /K
\&quot;c:\\util\\rmanDB.bat &quot;+btype+&quot;&amp;&amp;c:\\util\\cleanup.bat\&quot;&quot;)
System.Runtime.getRuntime().exec(cmd);
...


The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form &quot;&amp;&amp; del c:\\dbms\\*.*&quot;, then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.

Example 3: The following code is from a web application that allows users access to an interface through which they can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory, the code for which is shown below.


...
System.Runtime.getRuntime().exec(&quot;make&quot;);
...


The problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.

Some think that in the mobile world, classic vulnerabilities, such as command injection, do not make sense -- why would a user attack him or herself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 4: The following code reads commands to be executed from an Android intent.


...
        String[] cmds = this.getIntent().getStringArrayExtra(&quot;commands&quot;);
        Process p = Runtime.getRuntime().exec(&quot;su&quot;);
        DataOutputStream os = new DataOutputStream(p.getOutputStream());
        for (String cmd : cmds) {
                os.writeBytes(cmd+&quot;\n&quot;);
        }
        os.writeBytes(&quot;exit\n&quot;);
        os.flush();
...


On a rooted device, a malicious application can force a victim application to execute arbitrary commands with super user privileges.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Do not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.

In cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on blacklisting in these situations. Blacklisting selectively rejects or escapes potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a whitelist of characters that are allowed to appear in the input and accept input composed exclusively of characters in the approved set.

An attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.

Other checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.

Although it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.

2. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>35</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="37E87AB9F99EC2DAB37073D11958F8A1">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in NsopUnitywebSvcSoapStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>NsopUnitywebSvcSoapStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/seamlessrelease/NsopUnitywebSvcSoapStub.java</FilePath>
<LineStart>166</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="A9805E4646F36655717506749A66BEDE">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceNCOG() in PreOrderWebServiceInvoke.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PreOrderWebServiceInvoke.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/PreOrderWebServiceInvoke.java</FilePath>
<LineStart>313</LineStart>
<Snippet>	        if(_call!=null){
			 try {
        		 _call.setTargetEndpointAddress(ESAPI.encoder().encodeForURL(info.getWsdlURL()));
        		 _call.setTargetEndpointAddress(java.net.URLDecoder.decode(_call.getTargetEndpointAddress(),&quot;UTF-8&quot;));
             } catch (UnsupportedEncodingException e) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="C2709D9146803EF54C0E29BD25C9BB20">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method MassDisconnectWebServiceCall() in SSPPPVMassDisconnectService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SSPPPVMassDisconnectService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ppvSupport/SSPPPVMassDisconnectService.java</FilePath>
<LineStart>334</LineStart>
<Snippet>		int iIndexWsdl = strWSDLUrl.indexOf(&quot;?&quot;);
		String strEndPointAddress = strWSDLUrl.substring(0, iIndexWsdl);		 
         	call.setTargetEndpointAddress(Utility.dataEncoder(strEndPointAddress));         
		
		responseXML = (String) call.invoke(new Object[] { requestXML });</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPPPVMassDisconnectService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ppvSupport/SSPPPVMassDisconnectService.java</FilePath>
<LineStart>253</LineStart>
<Snippet>
			stmt.setString(1, &quot;SSPPPVMassDisconnectService&quot;);
			resultSet = stmt.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="81E6C7E52148EAE506A6DD4BFDA5D2E8">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in IKeyNACRSoapStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IKeyNACRSoapStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/nacrInfo/webservice/IKeyNACRSoapStub.java</FilePath>
<LineStart>910</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="489FB85A5D30421AB92049EE815B139F">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebService() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>726</LineStart>
<Snippet>					+ strEndPointAddress);
			
			 call.setTargetEndpointAddress(strEndPointAddress);
			
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>656</LineStart>
<Snippet>
	// Added by Janani for NSOP status tool-- ends
	public String invokeWebService(String requestXML, WebServiceInfo svcInfo) {

		try {</Snippet>
<TargetFunction>invokeWebService(1)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="51D485E41839A7C782BADDEF91ADAFB3">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceInt() in PreOrderWebServiceInvoke.java calls setOperationName() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PreOrderWebServiceInvoke.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/PreOrderWebServiceInvoke.java</FilePath>
<LineStart>88</LineStart>
<Snippet>        _call.setProperty(org.apache.axis.AxisEngine.PROP_DOMULTIREFS, Boolean.FALSE);
        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
        _call.setOperationName(new javax.xml.namespace.QName(Utility.getValidContent(info.getPortName()), Utility.getValidContent(info.getOperationName())));
        }
        org.apache.axis.message.PrefixedQName svcName = new org.apache.axis.message.PrefixedQName(&quot;http://schemas.xmlsoap.org/ws/2002/07/secext&quot;, &quot;Security&quot;, &quot;wsse&quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setOperationName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="A2CE6A7D587C46C4AC23E223828D736C">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceMassIvapp() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>2134</LineStart>
<Snippet>             String strEndPointAddress = strWSDLUrl.substring(0, iIndexWsdl);
             EasyLogger.info(&quot;After  strEndPointAddress : &quot; + strEndPointAddress);
             call.setTargetEndpointAddress(strEndPointAddress);
             EasyLogger.info(&quot;After  call.setTargetEndpointAddress(): &quot;);
             EasyLogger.info(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="EFBE3CADD0348DF8DC7DD912BFD1F56E">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceDSL() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>2218</LineStart>
<Snippet>            String strEndPointAddress = strWSDLUrl.substring(0, iIndexWsdl);
            EasyLogger.info(&quot;After  strEndPointAddress : &quot; + strEndPointAddress);
            call.setTargetEndpointAddress(strEndPointAddress);
            EasyLogger.info(&quot;After  call.setTargetEndpointAddress(): &quot;);
            EasyLogger.info(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="A735B89B18FA25623AB3A77C339F2716">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeRemedyWebService() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>934</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);
			call.setTargetEndpointAddress(strEndPointAddress);
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="9D21CCC83609B0B8A9509CF7449FE99A">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceNCOG() in PreOrderWebServiceInvoke.java calls setOperationName() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PreOrderWebServiceInvoke.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/PreOrderWebServiceInvoke.java</FilePath>
<LineStart>327</LineStart>
<Snippet>	        _call.setProperty(org.apache.axis.AxisEngine.PROP_DOMULTIREFS, Boolean.FALSE);
	        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
	        _call.setOperationName(new javax.xml.namespace.QName(Utility.getValidContent(info.getPortName()), Utility.getValidContent(info.getOperationName())));
	        }
	        org.apache.axis.message.PrefixedQName svcName = new org.apache.axis.message.PrefixedQName(&quot;http://schemas.xmlsoap.org/ws/2002/07/secext&quot;, &quot;Security&quot;, &quot;wsse&quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setOperationName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="CADF51DF95D1FEEC751885995076568C">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeSendMigrationMessageWebService() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1158</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);
	        call.setTargetEndpointAddress(strEndPointAddress);
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="C77142CED3DAE8324518768DB34C0D5F">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in VZWQualificationServiceSoapBindingStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>VZWQualificationServiceSoapBindingStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/adapters/vzw/service/VZWQualificationServiceSoapBindingStub.java</FilePath>
<LineStart>106</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="C0D826EBECFE6D46D19CD47401E2B014">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebService() in RepostFirmsaleService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RepostFirmsaleService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/RepostFirmsaleService.java</FilePath>
<LineStart>115</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);			
			call.setTargetEndpointAddress(Utility.dataEncoder(strEndPointAddress));
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>RepostFirmsaleService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/RepostFirmsaleService.java</FilePath>
<LineStart>46</LineStart>
<Snippet>	}
	
	public String invokeWebService(String requestXML, WebServiceInfo svcInfo) {

		try {</Snippet>
<TargetFunction>invokeWebService(1)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="FCA6604A5BB476DD89E03EC7C74B1397">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method CSGWWebServiceCall() in CSGWLookupService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSGWLookupService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/csgwlookup/CSGWLookupService.java</FilePath>
<LineStart>168</LineStart>
<Snippet>			
			try {
             call.setTargetEndpointAddress(Utility.dataEncoder(strEndPointAddress));
                
			} catch (Exception e) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSGWLookupService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/visiontools/csgwlookup/CSGWLookupService.java</FilePath>
<LineStart>101</LineStart>
<Snippet>
			stmt.setString(1, csgwStr);
			resultSet = stmt.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="A126D1D4F0F40CA1C7A27970C8D3651A">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeDataService() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1031</LineStart>
<Snippet>			EasyLogger
					.info(&quot;After  strEndPointAddress : &quot; + strEndPointAddress);
			 call.setTargetEndpointAddress(strEndPointAddress);
			EasyLogger.info(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.info(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="1DF242B2450624EC6565C5B5369EC3A5">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in NACROperationSoapStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>NACROperationSoapStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/org/tempuri/NACROperationSoapStub.java</FilePath>
<LineStart>221</LineStart>
<Snippet>            }
            if (super.cachedEndpoint != null) {
                _call.setTargetEndpointAddress(super.cachedEndpoint);
            }
            if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="EFAE3322E238EA84FBBCEABBD82DDB34">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method MassRefreshWebServiceCall() in SSPPPVMassRefreshService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SSPPPVMassRefreshService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ppvSupport/SSPPPVMassRefreshService.java</FilePath>
<LineStart>347</LineStart>
<Snippet>		String strEndPointAddress = strWSDLUrl.substring(0, iIndexWsdl);
		 try {
			 call.setTargetEndpointAddress(Utility.dataEncoder(strEndPointAddress));
				
		} catch (Exception e) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SSPPPVMassRefreshService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ppvSupport/SSPPPVMassRefreshService.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
			stmt.setString(1, &quot;SSPPPVMassRefreshService&quot;);
			resultSet = stmt.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="84824D50543D7EE1A4E25951EEE497A5">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeSSPOSWebServiceForPCANTool() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>833</LineStart>
<Snippet>					+ strEndPointAddress);
			 
			 call.setTargetEndpointAddress(strEndPointAddress);

			</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="B20248C5D4E4A18A0A422FB97D9DD246">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeServiceWithMultipleParams() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1798</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);
			 call.setTargetEndpointAddress(strEndPointAddress);
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="A647D11E7EA8BBA17F0F56FB188F5719">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in ISPGWWebServiceSoapBindingStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ISPGWWebServiceSoapBindingStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ispgw/service/soapserver/ISPGWWebServiceSoapBindingStub.java</FilePath>
<LineStart>1020</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="ABDC1EEE5B5F4AABD34977B885A1C554">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceInt() in PreOrderWebServiceInvoke.java calls setSOAPActionURI() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PreOrderWebServiceInvoke.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/PreOrderWebServiceInvoke.java</FilePath>
<LineStart>83</LineStart>
<Snippet>        _call.setOperation(oper);
        _call.setUseSOAPAction(true);
        _call.setSOAPActionURI(Utility.getValidContent(info.getServiceName()));
        _call.setEncodingStyle(null);
        _call.setProperty(org.apache.axis.client.Call.SEND_TYPE_ATTR, Boolean.FALSE);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setSOAPActionURI()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="FE529E0F0F8BE942EA1CF8B3A6318AF0">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebService() in DynamicClientStub.java calls setOperationName() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>174</LineStart>
<Snippet>            _call.setProperty(org.apache.axis.AxisEngine.PROP_DOMULTIREFS, Boolean.FALSE);
            _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
            _call.setOperationName(new javax.xml.namespace.QName(svcInfo.getNameSpace(), svcInfo.getOperationName()));

            setRequestHeaders(_call);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setOperationName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="EA1FD1630A8ACEE09D78C40004B2AFA3">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in CSRGetSoapStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRGetSoapStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ucsrproduct/CSRGetSoapStub.java</FilePath>
<LineStart>1591</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="DBEAEA11027168D242B89E2D3C1624ED">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebService() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>726</LineStart>
<Snippet>					+ strEndPointAddress);
			
			 call.setTargetEndpointAddress(strEndPointAddress);
			
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="7C4D422309B198C6B2A1F6CC70AE7873">
                            <Category>Command Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in ISPGWWebServiceSoapBindingStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ISPGWWebServiceSoapBindingStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ispgw/service/rlqserver/ISPGWWebServiceSoapBindingStub.java</FilePath>
<LineStart>85</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="2CF6D39EB3F013FFEBF75F41272B19F4">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebService() in DynamicClientStub.java calls setSOAPActionURI() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>169</LineStart>
<Snippet>            _call.setOperation(oper);
            _call.setUseSOAPAction(true);
            _call.setSOAPActionURI(svcInfo.getNameSpace()+svcInfo.getOperationName());
            _call.setEncodingStyle(null);
            _call.setProperty(org.apache.axis.client.Call.SEND_TYPE_ATTR, Boolean.FALSE);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setSOAPActionURI()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="20C7E2B3D0DEE34F5218CB5F22560C55">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebService() in RepostFirmsaleService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RepostFirmsaleService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/RepostFirmsaleService.java</FilePath>
<LineStart>115</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);			
			call.setTargetEndpointAddress(Utility.dataEncoder(strEndPointAddress));
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="07BFE1467480F7581069A3F679B7A214">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in NCOGWebServicesSoapStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>NCOGWebServicesSoapStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ncoguri/NCOGWebServicesSoapStub.java</FilePath>
<LineStart>4006</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="B9C7D35EBB9B1B258AC6163DEE9CFA9D">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceNCOG() in PreOrderWebServiceInvoke.java calls setSOAPActionURI() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PreOrderWebServiceInvoke.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/PreOrderWebServiceInvoke.java</FilePath>
<LineStart>322</LineStart>
<Snippet>	        _call.setOperation(oper);
	        _call.setUseSOAPAction(true);
	        _call.setSOAPActionURI(Utility.getValidContent(info.getServiceName()));
	        _call.setEncodingStyle(null);
	        _call.setProperty(org.apache.axis.client.Call.SEND_TYPE_ATTR, Boolean.FALSE);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setSOAPActionURI()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="F9DCA07BB40C5738EBE24775850130AD">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeJaxWebservice() in DynamicClientStub.java calls setOperationName() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>124</LineStart>
<Snippet>				Boolean.FALSE);
		_call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
		_call.setOperationName(new javax.xml.namespace.QName(Utility.getValidString(info.getNameSpace()), Utility.getValidString(info.getOperationName())));

		setRequestHeaders(_call);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setOperationName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="DA2016677A986E83EA19A295FCCA1E58">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in BundleRobotServicePortStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BundleRobotServicePortStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/bundlediscount/BundleRobotServicePortStub.java</FilePath>
<LineStart>287</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="3B011243866482177E888EA6630985FF">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createCall() in DynamicClientStub.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>53</LineStart>
<Snippet>			}
			if (super.cachedEndpoint != null) {
				_call.setTargetEndpointAddress(super.cachedEndpoint);
			}
			if (super.cachedTimeout != null) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="C5CE407B76CF10C41A6A430D1A3F10F7">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeGetPCANWebService() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1299</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);
			call.setTargetEndpointAddress(strEndPointAddress);
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="E76DE1929684F3D48246F816BAA6F447">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invokeWebServiceInt() in PreOrderWebServiceInvoke.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PreOrderWebServiceInvoke.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/PreOrderWebServiceInvoke.java</FilePath>
<LineStart>74</LineStart>
<Snippet>        if(_call!=null){
        	 try {
        		 _call.setTargetEndpointAddress(ESAPI.encoder().encodeForURL(info.getWsdlURL()));
        		 _call.setTargetEndpointAddress(java.net.URLDecoder.decode(_call.getTargetEndpointAddress(),&quot;UTF-8&quot;));
             } catch (UnsupportedEncodingException e) {</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="67115D01FA716B14DD16BD1994286298">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method suppressProductVisionFalloutCorrection() in ValidationService.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1901</LineStart>
<Snippet>			EasyLogger.debug(&quot;After  strEndPointAddress : &quot;
					+ strEndPointAddress);
			call.setTargetEndpointAddress(strEndPointAddress);
			EasyLogger.debug(&quot;After  call.setTargetEndpointAddress(): &quot;);
			EasyLogger.debug(&quot;Before Generating A Call &quot;);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setTargetEndpointAddress()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Cross-Site Scripting: Reflected</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Cross-site scripting (XSS) vulnerabilities occur when:

1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore.


2. The data is included in dynamic content that is sent to a web user without being validated.

The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.


Example 1: The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.


&lt;% String eid = request.getParameter(&quot;eid&quot;); %&gt;
...
Employee ID: &lt;%= eid %&gt;



The code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.

Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.


Example 2: The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.


&lt;%...
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(&quot;select * from emp where id=&quot;+eid);
if (rs != null) {
   rs.next();
   String name = rs.getString(&quot;name&quot;);
}
%&gt;

Employee Name: &lt;%= name %&gt;



As in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a &quot;guestbook&quot; to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.

Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 3: The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.


...
        WebView webview = (WebView) findViewById(R.id.webview);
        webview.getSettings().setJavaScriptEnabled(true);
        String url = this.getIntent().getExtras().getString(&quot;url&quot;);
        webview.loadUrl(url);
...


If the value of url starts with javascript:, JavaScript code that follows will execute within the context of the web page inside WebView.

As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:

- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.

- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.

- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.


A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties.

Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.

Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.

The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.

A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:

In the content of a block-level element (in the middle of a paragraph of text):

- &quot;&lt;&quot; is special because it introduces a tag.

- &quot;&amp;&quot; is special because it introduces a character entity.

- &quot;&gt;&quot; is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening &quot;&lt;&quot;, but omitted it in error.

The following principles apply to attribute values:

- In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value.

- In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value.

- In attribute values without any quotes, white-space characters, such as space and tab, are special.

- &quot;&amp;&quot; is special when used with certain attributes, because it introduces a character entity.

In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:

- Space, tab, and new line are special because they mark the end of the URL.

- &quot;&amp;&quot; is special because it either introduces a character entity or separates CGI parameters.

- Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.

- The &quot;%&quot; symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, &quot;%&quot; must be filtered if input such as &quot;%68%65%6C%6C%6F&quot; becomes &quot;hello&quot; when it appears on the web page in question.


Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:

- Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag.

Server-side scripts:

- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (&quot;) on output might require additional filtering.

Other possibilities:

- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).

Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display.

If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].

Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database.

2. Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities.

3. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>13</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="AD01687E9EA5EA248B500B453F35DF0A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>127</LineStart>
<Snippet>						MOGProcessorStatusForm dtoFi = (MOGProcessorStatusForm) list
								.get(i);
						sbReturn.append(&quot;\n&quot; + Utility.getValidString(dtoFi.getFileDetailSeqId())
								+ &quot;\t&quot; + Utility.isValidNumber(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailSeqId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="7F3870AB5BFE6324FF9F2E19473866B7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>129</LineStart>
<Snippet>						sbReturn.append(&quot;\n&quot; + Utility.getValidString(dtoFi.getFileDetailSeqId())
								+ &quot;\t&quot; + Utility.isValidNumber(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailOrderId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="033831B654A97BFE2C94F2EE3409B9BF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>169</LineStart>
<Snippet>								+ &quot;\t&quot; + Utility.getValidString(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailStatus()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="405D85AFD2A22A36544BA826C19FB3E8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>170</LineStart>
<Snippet>								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorCode()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailTimeStamp()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="FAF2D84F11A5B3D42FD2ACD188124564">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>172</LineStart>
<Snippet>								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorCode()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorDesc()));
					}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileErrorCode()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="F75D12BF4FA160F046D43C245E28D8C2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>167</LineStart>
<Snippet>								.get(i);
						sbReturn.append(&quot;\n&quot; + Utility.getValidString(dtoFi.getFileDetailSeqId())
								+ &quot;\t&quot; + Utility.getValidString(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileInfoId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="39BDC1DD658D42B4C33D0AF98701D5A9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>173</LineStart>
<Snippet>								+ Utility.getValidString(dtoFi.getFileDetail()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorCode()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorDesc()));
					}
					EasyLogger.info(sbReturn.toString());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileErrorDesc()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="1EE479CCFB5DB613B30B8E9A65B7D4D8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorCode()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileErrorDesc()));</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetail()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="405D85AFD2A22A36544BA826C19FB3E7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>131</LineStart>
<Snippet>								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()));
					}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailTimeStamp()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="1EE479CCFB5DB613B30B8E9A65B7D4D7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>132</LineStart>
<Snippet>								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()));
					}
					EasyLogger.info(sbReturn.toString());</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetail()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="7F3870AB5BFE6324FF9F2E19473866B8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>168</LineStart>
<Snippet>						sbReturn.append(&quot;\n&quot; + Utility.getValidString(dtoFi.getFileDetailSeqId())
								+ &quot;\t&quot; + Utility.getValidString(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailOrderId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="AD01687E9EA5EA248B500B453F35DF0B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>166</LineStart>
<Snippet>						MOGProcessorStatusForm dtoFi = (MOGProcessorStatusForm) list
								.get(i);
						sbReturn.append(&quot;\n&quot; + Utility.getValidString(dtoFi.getFileDetailSeqId())
								+ &quot;\t&quot; + Utility.getValidString(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailSeqId()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="033831B654A97BFE2C94F2EE3409B9BE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>130</LineStart>
<Snippet>								+ &quot;\t&quot; + Utility.isValidNumber(dtoFi.getFileInfoId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailOrderId()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailStatus()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetailTimeStamp()) + &quot;\t&quot;
								+ Utility.getValidString(dtoFi.getFileDetail()));</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.moggui.MOGProcessorStatusForm.getFileDetailStatus()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="9">
                        <groupTitle>Mass Assignment: Sensitive Field Exposure</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A sensitive field defined in struts-config.xml on line 409 is exposed to the model binder.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Modern frameworks allow developers to automatically bind HTTP request parameters from both request query and body into model objects for ease of development and increased productivity. If the binder is not correctly configured to control which HTTP request parameters are bound to which model attributes, an attacker may be able to abuse the model binding process and set any other attributes that should not be exposed to user control. This binding is possible even if the model attributes do not appear in the web forms or API contracts.

Example 1:  The following Struts 1 DynaActionForm dynamically defines an ActionForm that is bound to user requests. In this case it is used to register an account by providing the account's type and a user's details:


&lt;struts-config&gt;
  &lt;form-beans&gt;
       &lt;form-bean name=&quot;dynaUserForm&quot;   
          type=&quot;org.apache.struts.action.DynaActionForm&quot; &gt;
              &lt;form-property name=&quot;type&quot; type=&quot;java.lang.String&quot; /&gt;
              &lt;form-property name=&quot;user&quot; type=&quot;com.acme.common.User&quot; /&gt;
       &lt;/form-bean&gt;
       ...



If registration is successful, the user data will be persisted in the database. The User class is defined as:


public class User {
  private String name;
  private String lastname;
  private int age;
  private Details details;

  // Public Getters and Setters
  ...
}


And the Details class is defined as:


public class Details {
  private boolean is_admin;
  private int id;
  private Date login_date;

  // Public Getters and Setters
  ...
}


Given the above scenario, an attacker may be able to explore the application and discover that there is a details attribute in the User model. If this is the case, the attacker may then attempt to overwrite the current values assigned to their attributes.
If an attacker can find out these internal attributes, and the framework binder is not correctly configured in order to disallow binding of these attributes, then the attacker would be able to register an administrator account by sending the following request:


type=free&amp;user.name=John&amp;user.lastname=Smith&amp;age=22&amp;details.is_admin=true
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>In order to avoid mass assignment vulnerabilities it is important to control the HTTP request to model class binding process. There are different alternatives depending on the framework used:

Architectural: Define dedicated DTO classes to be bound to user data and containing only those attributes that should be exposed to end users. Map their attributes with the Domain objects used along the application. These Domain Objects will contain attributes to receive the validated user data and extra attributes that should never be exposed to user control.

Binder configuration: Certain frameworks such as Spring, allow the developers to configure the model binder to accept or reject HTTP request parameters based on their names. Eg:

Example 2: 


@Override
protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {
    binder.setDisallowedFields(new String[]{&quot;details.role&quot;, &quot;details.age&quot;, &quot;is_admin&quot;});
}


Model class configuration: Depending on the frameworks used and the serialization/deserialization libraries in use, the model classes to be bound to the HTTP request parameters can be annotated to allow or disallow certain attribute binding. For example, if user data is sent in JSON format and the Jackson library is used to deserialize this data, the @JsonIgnore annotation can be used to tell Jackson to ignore a given attribute for serialization and deserialization purposes.

Example 3: 


public class User {

    @JsonIgnore
    private String role;
    private String name;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getRole() {
        return role;
    }
    public void setRole(String role) {
        this.role = role;
    }


In other frameworks such as Apache Struts 1 and 2, the framework will only allow binding HTTP request parameters to class members with public setters. In case a given attribute should not be exposed, the setter should be declared private.

Example 4: 


private String role;
private void setRole(String role)  {
   this.role = role;
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. This vulnerability category can be classified as a design flaw since accurately finding these issues requires understanding of the application architecture which is beyond the capabilities of static analysis. Therefore, it is possible that if the application is designed to use specific DTO objects for HTTP request binding, there will not be any need to configure the binder to exclude any attributes.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>9</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD47B">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 411 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>411</LineStart>
<Snippet>		&lt;form-property name=&quot;requestAction&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;requestType&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;can&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;		
		&lt;form-property name=&quot;eventId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;edgeId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD47E">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 414 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>414</LineStart>
<Snippet>		&lt;form-property name=&quot;eventId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;edgeId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;shiftBowEra&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;stateCode&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;entryRelValue&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD47F">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 415 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>415</LineStart>
<Snippet>		&lt;form-property name=&quot;edgeId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;shiftBowEra&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;stateCode&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;entryRelValue&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;batchDetails&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD47C">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 412 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>412</LineStart>
<Snippet>		&lt;form-property name=&quot;requestType&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;can&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;		
		&lt;form-property name=&quot;eventId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;edgeId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;shiftBowEra&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD481">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 417 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>417</LineStart>
<Snippet>		&lt;form-property name=&quot;stateCode&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;entryRelValue&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;batchDetails&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
	&lt;/form-bean&gt;	
	&lt;!-- Added by TCS-offshore for VideoPPV ends--&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD47A">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 410 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>410</LineStart>
<Snippet>	&lt;form-bean name=&quot;LangCorrectionForm&quot; type=&quot;org.apache.struts.action.DynaActionForm&quot;&gt;
		&lt;form-property name=&quot;requestAction&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;requestType&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;can&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;		
		&lt;form-property name=&quot;eventId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD479">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 409 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>409</LineStart>
<Snippet>	&lt;!-- Added by TCS-offshore for VideoPPV Starts --&gt;
	&lt;form-bean name=&quot;LangCorrectionForm&quot; type=&quot;org.apache.struts.action.DynaActionForm&quot;&gt;
		&lt;form-property name=&quot;requestAction&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;requestType&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;can&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;		</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD47D">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 413 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>413</LineStart>
<Snippet>		&lt;form-property name=&quot;can&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;		
		&lt;form-property name=&quot;eventId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;edgeId&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;			
		&lt;form-property name=&quot;shiftBowEra&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;stateCode&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="8C44759E-8F16-494B-AC39-46D57E9F9863" iid="7AC9C5FCF1E19097D76119C7408CD480">
                            <Category>Mass Assignment: Sensitive Field Exposure</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A sensitive field defined in struts-config.xml on line 416 is exposed to the model binder.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>416</LineStart>
<Snippet>		&lt;form-property name=&quot;shiftBowEra&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;stateCode&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;entryRelValue&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
		&lt;form-property name=&quot;batchDetails&quot; type=&quot;java.lang.String&quot;&gt;&lt;/form-property&gt;
	&lt;/form-bean&gt;	</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>XML External Entity Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>XML parser configured in MassVisionProfileLookupAction.java:171 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XML External Entities attacks benefit from an XML feature to build documents dynamically at the time of processing. An XML entity allows inclusion of data dynamically from a given resource. External entities allow an XML document to include data from an external URI. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote system. This behavior exposes the application to XML External Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.

The following XML document shows an example of an XXE attack.

&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
 &lt;!DOCTYPE foo [
  &lt;!ELEMENT foo ANY &gt;
  &lt;!ENTITY xxe SYSTEM &quot;file:///dev/random&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;


This example could crash the server (on a UNIX system), if the XML parser attempts to substitute the entity with the contents of the /dev/random file.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The XML unmarshaller should be configured securely so that it does not allow external entities as part of an incoming XML document.

To avoid XXE injection do not use unmarshal methods that process an XML source directly as java.io.File, java.io.Reader or java.io.InputStream. Parse the document with a securely configured parser and use an unmarshal method that takes the secure parser as the XML source as shown in the following example:


DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
DocumentBuilder db = dbf.newDocumentBuilder();
Document document = db.parse(&lt;XML Source&gt;);
Model model = (Model) u.unmarshal(document);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="0DE6DCC8-25D6-4224-AE1B-B7F8C024AB95" iid="9C7E1089FF3BDCF3642194BA09E8BFAD">
                            <Category>XML External Entity Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in UCSRHelper.java:74 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>UCSRHelper.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/ucsr/util/UCSRHelper.java</FilePath>
<LineStart>74</LineStart>
<Snippet>			tFactory.setFeature(&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;, true);
			tFactory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
			transformer = tFactory.newTransformer(new StreamSource(new FileInputStream(pManager.getProperty(&quot;UCSR_ISOCS&quot;))));
			transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,
					&quot;yes&quot;);</Snippet>
<TargetFunction>tFactory.newTransformer(...) : XML document parsed allowing external entity resolution()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="93A88C53-D00C-4A86-9747-D9A0B3176085" iid="C34E65768D69EDC3684272241724F388">
                            <Category>XML External Entity Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in VisionProfileMergeAction.java:256 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>VisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/VisionProfileMergeAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>								dbf.setExpandEntityReferences(false);
								DocumentBuilder db = dbf.newDocumentBuilder();
								Document document = db.parse(source);
								db.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); 
								db.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false); </Snippet>
<TargetFunction>db.parse(...) : XML document parsed allowing external entity resolution()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="4B1396F4-255F-4952-BC09-B82ACB650FE8" iid="D0EEA0AEB1A6CD040E418604CEE8C3C4">
                            <Category>XML External Entity Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in MassVisionProfileLookupAction.java:171 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MassVisionProfileLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileLookupAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>						db.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
						db.setExpandEntityReferences(false);
						doc = db.parse(new InputSource(
								new StringReader(s.toString())));
					} catch (SAXException e) {</Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1719</LineStart>
<Snippet>		getWebserviceInfo(&quot;SuppDD&quot;, info); // TODO: Replace the key with proper
											// DS String
		String response = invokeWebService(request, info);
		return response;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B1396F4-255F-4952-BC09-B82ACB650FE8" iid="C4BAEB10B20DAAE1D65C5EB452144D5C">
                            <Category>XML External Entity Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in AutopayDetailsService.java:63 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AutopayDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/AutopayDetailsService.java</FilePath>
<LineStart>63</LineStart>
<Snippet>		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		doc = dBuilder.parse(new InputSource(new StringReader(str)));
		doc.getDocumentElement().normalize();
		doc.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); </Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>733</LineStart>
<Snippet>			((org.apache.axis.client.Call) call).setTimeout(new Integer(svcInfo
					.getTimeOut()));
			String result = (String) call.invoke(new Object[] { requestXML });
			if (!&quot;getFlowOrderInfo&quot;.equals(svcInfo.getOperationName()))
				EasyLogger.debug(&quot;RESULT ********* : &quot; + result);</Snippet>
<TargetFunction>javax.xml.rpc.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B1396F4-255F-4952-BC09-B82ACB650FE8" iid="30C13EF099B028DD87B4E87D3ED5E27C">
                            <Category>XML External Entity Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in AutopayDetailsService.java:63 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AutopayDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/AutopayDetailsService.java</FilePath>
<LineStart>63</LineStart>
<Snippet>		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		doc = dBuilder.parse(new InputSource(new StringReader(str)));
		doc.getDocumentElement().normalize();
		doc.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); </Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/AutopayDetailsService.java</FilePath>
<LineStart>47</LineStart>
<Snippet>				req+=&quot;&lt;accountId&gt;&quot;+inputValue+&quot;&lt;/accountId&gt;&quot;;
			req+=&quot;&lt;/Request&gt;&quot;;
			String result=svc.invokeWebService(req, info);
			EasyLogger.info(&quot;The result is:: &quot;+result);
			if(result==null)</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B1396F4-255F-4952-BC09-B82ACB650FE8" iid="62A7C41B6372E81E98CECC8F4D747092">
                            <Category>XML External Entity Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in MassVisionProfileLookupAction.java:171 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MassVisionProfileLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileLookupAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>						db.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
						db.setExpandEntityReferences(false);
						doc = db.parse(new InputSource(
								new StringReader(s.toString())));
					} catch (SAXException e) {</Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>131</LineStart>
<Snippet>		try {
			java.lang.Object _resp = _call
					.invoke(new java.lang.Object[] { request });
			EasyLogger.info(&quot;response &quot; + _resp);
</Snippet>
<TargetFunction>org.apache.axis.client.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="93A88C53-D00C-4A86-9747-D9A0B3176085" iid="A9486163090909580CC7C3468B65F995">
                            <Category>XML External Entity Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in SspNacrVisionProfileMergeAction.java:377 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SspNacrVisionProfileMergeAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/tools/profilemerge/SspNacrVisionProfileMergeAction.java</FilePath>
<LineStart>377</LineStart>
<Snippet>													db.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
													db.setExpandEntityReferences(false);
													Document document = db.parse(new InputSource(
															new StringReader(leftResponseXML)));
</Snippet>
<TargetFunction>db.parse(...) : XML document parsed allowing external entity resolution()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="93A88C53-D00C-4A86-9747-D9A0B3176085" iid="9F5C408DEAAD00E66B456EAE7451BB6B">
                            <Category>XML External Entity Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in MassVisionProfileProductLookupAction.java:186 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>MassVisionProfileProductLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileProductLookupAction.java</FilePath>
<LineStart>186</LineStart>
<Snippet>						db.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
						db.setExpandEntityReferences(false);
						doc = db.parse(new InputSource(
								new StringReader(s.toString())));
					} catch (SAXException e) {</Snippet>
<TargetFunction>db.parse(...) : XML document parsed allowing external entity resolution()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Header Manipulation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method insertUpdatechannelsDetails() in TVAnywhereManagePackagesService.java includes unvalidated data in an HTTP response header on line 370. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Header Manipulation vulnerabilities occur when:

1. Data enters a web application through an untrusted source, most frequently an HTTP request.


2. The data is included in an HTTP response header sent to a web user without being validated.

As with many software security vulnerabilities, Header Manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP response header.

One of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.

Many of today's modern application servers will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Apache Tomcat will throw an IllegalArgumentException if you attempt to set a header with prohibited characters. If your application server prevents setting headers with new line characters, then your application is not vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.

Example: The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response.


String author = request.getParameter(AUTHOR_PARAM);
...
Cookie cookie = new Cookie(&quot;author&quot;, author);
     cookie.setMaxAge(cookieExpiration);
     response.addCookie(cookie);


Assuming a string consisting of standard alpha-numeric characters, such as &quot;Jane Smith&quot;, is submitted in the request the HTTP response including this cookie might take the following form:


HTTP/1.1 200 OK
...
Set-Cookie: author=Jane Smith
...


However, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as &quot;Wiley Hacker\r\nHTTP/1.1 200 OK\r\n...&quot;, then the HTTP response would be split into two responses of the following form:


HTTP/1.1 200 OK
...
Set-Cookie: author=Wiley Hacker

HTTP/1.1 200 OK
...


Clearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting and page hijacking.

Cross-User Defacement: An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.

Cache Poisoning: The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.

Cross-Site Scripting: Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.

Page Hijacking: In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.

Cookie Manipulation: When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.

Open Redirect: Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to Header Manipulation is to ensure that input validation occurs in the correct places and checks for the correct properties.

Since Header Manipulation vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating responses dynamically, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for Header Manipulation.

Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for Header Manipulation is generally relatively easy. Despite its value, input validation for Header Manipulation does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent Header Manipulation vulnerabilities is to validate everything that enters the application or leaves the application destined for the user.

The most secure approach to validation for Header Manipulation is to create a whitelist of safe characters that are allowed to appear in HTTP response headers and accept input composed exclusively of characters in the approved set. For example, a valid name might only include alpha-numeric characters or an account number might only include digits 0-9.

A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning in HTTP response headers. Although the CR and LF characters are at the heart of an HTTP response splitting attack, other characters, such as ':' (colon) and '=' (equal), have special meaning in response headers as well.

Once you identify the correct points in an application to perform validation for Header Manipulation attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. The application should reject any input destined to be included in HTTP response headers that contains special characters, particularly CR and LF, as invalid.

Many application servers attempt to limit an application's exposure to HTTP response splitting vulnerabilities by providing implementations for the functions responsible for setting HTTP headers and cookies that perform validation for the characters essential to an HTTP response splitting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Many HttpServletRequest implementations return a URL-encoded string from getHeader(), will not cause a HTTP response splitting issue unless it is decoded first because the CR and LF characters will not carry a meta-meaning in their encoded form. However, this behavior is not specified in the J2EE standard and varies by implementation. Furthermore, even encoded user input returned from getHeader() can lead to other vulnerabilities, including open redirects and other HTTP header tampering.

2. A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.

3. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="51746D2E-CF96-4B76-9FD8-D68FCBDBAF32" iid="17E4E0C559FA39B26230B5D9D31B9AD2">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method postHTTPSData() in HttpsUrlCommunication.java includes unvalidated data in an HTTP response header on line 72. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>72</LineStart>
<Snippet>			
			HTTPConn.setRequestProperty(Utility.getValidContent(appIdTagName), Utility.getValidContent(appIdTagValue));
			HTTPConn.setRequestProperty(Utility.getValidContent(appIdEntryTagName), Utility.getValidContent(appIdEntryTagValue));

			 dout = new DataOutputStream(</Snippet>
<TargetFunction>java.net.URLConnection.setRequestProperty()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="790A125E-5BFE-4931-A51A-29B7D5BECC93" iid="75340C44706FC700E84148EDF3272AFA">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execute() in MOGFileViewAction.java includes unvalidated data in an HTTP response header on line 71. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>MOGFileViewAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileViewAction.java</FilePath>
<LineStart>71</LineStart>
<Snippet>							&quot;attachment; fileName=\&quot;&quot;
									+ fileName.trim().substring(1,
											fileName.length()) + &quot;\&quot;;&quot;);
					OutputStream os = response.getOutputStream();
					InputStream is = new BufferedInputStream(bis);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.setHeader()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGFileViewAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGFileViewAction.java</FilePath>
<LineStart>57</LineStart>
<Snippet>				String fileName = null;
				try {
				fileName = ESAPI.encoder().encodeForURL(request.getParameter(&quot;fileName&quot;));	
				java.net.URLDecoder.decode(fileName,&quot;UTF-8&quot;);						 
					} catch (Exception e1) {</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F881251A-48F1-4683-98B1-F55A60461095" iid="75246D3863813F0C59D4D0DB042490D2">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method insertUpdatechannelsDetails() in TVAnywhereManagePackagesService.java includes unvalidated data in an HTTP response header on line 370. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVAnywhereManagePackagesService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/TVAnywhereManagePackagesService.java</FilePath>
<LineStart>370</LineStart>
<Snippet>		WebResource addService = client.resource(insertURL);
		un=Utility.getValidContent(un);
		addService.header(&quot;ITWB_APP_ID&quot;, Utility.getValidContent(un)) ;
		pwv=Utility.getValidContent(pwv);	
		addService.header(&quot;ITWB_APP_PASSWORD&quot;, Utility.getValidContent(pwv));</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.header()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="F881251A-48F1-4683-98B1-F55A60461095" iid="96905B7CA249666E759DE049B3318640">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method insertUpdatechannelsDetails() in TVAnywhereManagePackagesService.java includes unvalidated data in an HTTP response header on line 372. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>TVAnywhereManagePackagesService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/TVAnywhereManagePackagesService.java</FilePath>
<LineStart>372</LineStart>
<Snippet>		addService.header(&quot;ITWB_APP_ID&quot;, Utility.getValidContent(un)) ;
		pwv=Utility.getValidContent(pwv);	
		addService.header(&quot;ITWB_APP_PASSWORD&quot;, Utility.getValidContent(pwv));
		ClientResponse isocsResponse = addService.type(&quot;application/xml&quot;).post(
				ClientResponse.class, ESAPI.encoder().encodeForXPath(insertRequest));</Snippet>
<TargetFunction>com.sun.jersey.api.client.WebResource.header()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="51746D2E-CF96-4B76-9FD8-D68FCBDBAF32" iid="BFB11FC0D56CEC065301EFAD98597FA8">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method postHTTPSData() in HttpsUrlCommunication.java includes unvalidated data in an HTTP response header on line 71. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpsUrlCommunication.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/HttpsUrlCommunication.java</FilePath>
<LineStart>71</LineStart>
<Snippet>					new Integer(strXML.length()).toString());
			
			HTTPConn.setRequestProperty(Utility.getValidContent(appIdTagName), Utility.getValidContent(appIdTagValue));
			HTTPConn.setRequestProperty(Utility.getValidContent(appIdEntryTagName), Utility.getValidContent(appIdEntryTagValue));
</Snippet>
<TargetFunction>java.net.URLConnection.setRequestProperty()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>316</LineStart>
<Snippet>			statement = connection.prepareStatement(WEB_SERVICE_DETAILS);
			statement.setString(1, serviceKey);
			resultSet = statement.executeQuery();

			while (resultSet.next()) {</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: Overly Broad Domain</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A cookie with an overly broad domain opens an application to attacks through other applications.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Developers often set cookies to be active across a base domain like &quot;.example.com&quot;. This exposes the cookie to all web applications on the base domain and any sub-domains. Since cookies often carry sensitive information such as session identifiers, sharing cookies across applications may lead a vulnerability in one application to cause a compromise in another.

Example 1:
Imagine you have a secure application deployed at http://secure.example.com/ and the application sets a session ID cookie with domain &quot;.example.com&quot; when a user logs in.

For example:

  Cookie cookie = new Cookie(&quot;sessionID&quot;, sessionID);
  cookie.setDomain(&quot;.example.com&quot;);


Suppose you have another, less secure, application at http://insecure.example.com/, and it contains a cross-site scripting vulnerability. Any user authenticated to http://secure.example.com that browses to http://insecure.example.com risks exposing their session cookie from http://secure.example.com.

In addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using insecure.example.com to create its own overly broad cookie that overwrites the cookie from secure.example.com.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Set cookie domains to be as restrictive as possible.

Example 2: The following code shows how to set the cookie domain to &quot;secure.example.com&quot; for the example in the Explanation section.

  Cookie cookie = new Cookie(&quot;sessionID&quot;, sessionID);
  cookie.setDomain(&quot;secure.example.com&quot;);
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="942BDC21-6E68-43A9-8667-0E017C15921D" iid="4513CF1D7290D25B2536FBCBE65E32B7">
                            <Category>Cookie Security: Overly Broad Domain</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad domain opens an application to attacks through other applications.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>36</LineStart>
<Snippet>		Cookie smTryNo = new Cookie(&quot;SMTRYNO&quot;, null);

        smCookie.setDomain(&quot;.verizon.com&quot;);
        smCookie.setPath(&quot;/&quot;);
        response.addCookie(smCookie);</Snippet>
<TargetFunction>setDomain()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="942BDC21-6E68-43A9-8667-0E017C15921D" iid="602BD38CE08FFF4AD42D8DFEE6373AF5">
                            <Category>Cookie Security: Overly Broad Domain</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad domain opens an application to attacks through other applications.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>48</LineStart>
<Snippet>        response.addCookie(authCookie);
		
		smTryNo.setDomain(&quot;.verizon.com&quot;);
        smTryNo.setPath(&quot;/&quot;);
        response.addCookie(smTryNo);	</Snippet>
<TargetFunction>setDomain()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="942BDC21-6E68-43A9-8667-0E017C15921D" iid="089720129938B88ACCE5EB0A8771C249">
                            <Category>Cookie Security: Overly Broad Domain</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad domain opens an application to attacks through other applications.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>44</LineStart>
<Snippet>        response.addCookie(ctcCookie);

        authCookie.setDomain(&quot;.verizon.com&quot;);
        authCookie.setPath(&quot;/&quot;);
        response.addCookie(authCookie);</Snippet>
<TargetFunction>setDomain()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="942BDC21-6E68-43A9-8667-0E017C15921D" iid="406D44F6C69580BB7B1211AD68752533">
                            <Category>Cookie Security: Overly Broad Domain</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad domain opens an application to attacks through other applications.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>        response.addCookie(smCookie);

        ctcCookie.setDomain(&quot;.verizon.com&quot;);
        ctcCookie.setPath(&quot;/&quot;);
        response.addCookie(ctcCookie);</Snippet>
<TargetFunction>setDomain()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: Overly Broad Path</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A cookie with an overly broad path can be accessed through other applications on the same domain.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Developers often set cookies to be accessible from the root context path (&quot;/&quot;). Doing so exposes the cookie to all web applications on the domain. Since cookies often carry sensitive information such as session identifiers, sharing cookies across applications may lead a vulnerability in one application to cause a compromise in another.

Example 1:
Imagine you have a forum application deployed at http://communitypages.example.com/MyForum and the application sets a session ID cookie with path &quot;/&quot; when users log in to the forum.

For example:

  Cookie cookie = new Cookie(&quot;sessionID&quot;, sessionID);
  cookie.setPath(&quot;/&quot;);


Suppose an attacker creates another application at http://communitypages.example.com/EvilSite and posts a link to this site on the forum. When a user of the forum clicks on the link, his browser will send the cookie set by /MyForum to the application running at /EvilSite. By stealing the session ID, the attacker is able to compromise the account of any forum user that browsed to /EvilSite.

In addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using /EvilSite to create its own overly broad cookie that overwrites the cookie from /MyForum.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Make sure to set cookie paths to be as restrictive as possible.

Example 2: The following code shows how to set the cookie path to &quot;/MyForum&quot; for the example in the Explanation section.

  Cookie cookie = new Cookie(&quot;sessionID&quot;, sessionID);
  cookie.setPath(&quot;/MyForum&quot;);
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="0FF9D3CC-9713-4478-AA74-8F78D7A55272" iid="420D8473A26BA9517C69CF1C06D3D88F">
                            <Category>Cookie Security: Overly Broad Path</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad path can be accessed through other applications on the same domain.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>
        ctcCookie.setDomain(&quot;.verizon.com&quot;);
        ctcCookie.setPath(&quot;/&quot;);
        response.addCookie(ctcCookie);
</Snippet>
<TargetFunction>setPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="0FF9D3CC-9713-4478-AA74-8F78D7A55272" iid="B8557476CC9DAEAB109508BAFB9F4AC6">
                            <Category>Cookie Security: Overly Broad Path</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad path can be accessed through other applications on the same domain.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>49</LineStart>
<Snippet>		
		smTryNo.setDomain(&quot;.verizon.com&quot;);
        smTryNo.setPath(&quot;/&quot;);
        response.addCookie(smTryNo);	
//For Clear cache ends</Snippet>
<TargetFunction>setPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="0FF9D3CC-9713-4478-AA74-8F78D7A55272" iid="870AD1429AA7FEAF4B03A833ADCFC8AF">
                            <Category>Cookie Security: Overly Broad Path</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad path can be accessed through other applications on the same domain.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>37</LineStart>
<Snippet>
        smCookie.setDomain(&quot;.verizon.com&quot;);
        smCookie.setPath(&quot;/&quot;);
        response.addCookie(smCookie);
</Snippet>
<TargetFunction>setPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue ruleID="0FF9D3CC-9713-4478-AA74-8F78D7A55272" iid="3A532E3D364D087F02198C5EE80F00F0">
                            <Category>Cookie Security: Overly Broad Path</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie with an overly broad path can be accessed through other applications on the same domain.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>login.jsp</FileName>
<FilePath>webapp/login.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>
        authCookie.setDomain(&quot;.verizon.com&quot;);
        authCookie.setPath(&quot;/&quot;);
        response.addCookie(authCookie);
		</Snippet>
<TargetFunction>setPath()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>XML Entity Expansion Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The XML parser configured in MassVisionProfileLookupAction.java:171 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XML Entity Expansion injection also known as XML Bombs are DoS attacks that benefit from valid and well-formed XML blocks that expand exponentially until they exhaust the server allocated resources. XML allows to define custom entities which act as string substitution macros. By nesting recurrent entity resolutions, an attacker may easily crash the server resources.

The following XML document shows an example of an XML Bomb.

&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
  &lt;!ENTITY lol &quot;lol&quot;&gt;
  &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
  &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
  &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;
  &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;
  &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;
  &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;
  &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;
  &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;


This test could crash the server by expanding the small XML document into more than 3GB in memory.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>An XML parser should be configured securely so that it does not allow document type definition (DTD) custom entities as part of an incoming XML document.

To avoid XML Entity Expansion injection the &quot;secure-processing&quot; property should be set for an XML factory, parser or reader:

factory.setFeature(&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;, true);


In JAXP 1.3 and earlier versions, when the secure processing feature is on, default limitations are set for DOM and SAX parsers. These limits are:

entityExpansionLimit = 64,000
elementAttributeLimit = 10,000

Since JAXP 1.4, the secure processing feature is turned on by default. In addition to the above limits, a new maxOccur limit is added to the validating parser. The limit is:

maxOccur = 5,000


If inline DOCTYPE declaration is not needed, it can be completely disabled with the following property:

factory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="1C2401A4-37A8-4B2E-9D0A-F03CB933D522" iid="75AB4B777508D38124DCFA7C2365AF64">
                            <Category>XML Entity Expansion Injection</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The XML parser configured in AutopayDetailsService.java:63 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>AutopayDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/AutopayDetailsService.java</FilePath>
<LineStart>63</LineStart>
<Snippet>		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		doc = dBuilder.parse(new InputSource(new StringReader(str)));
		doc.getDocumentElement().normalize();
		doc.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); </Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>733</LineStart>
<Snippet>			((org.apache.axis.client.Call) call).setTimeout(new Integer(svcInfo
					.getTimeOut()));
			String result = (String) call.invoke(new Object[] { requestXML });
			if (!&quot;getFlowOrderInfo&quot;.equals(svcInfo.getOperationName()))
				EasyLogger.debug(&quot;RESULT ********* : &quot; + result);</Snippet>
<TargetFunction>javax.xml.rpc.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C2401A4-37A8-4B2E-9D0A-F03CB933D522" iid="7ABF24D884C37B03DEF4A3343BCA8C44">
                            <Category>XML Entity Expansion Injection</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The XML parser configured in MassVisionProfileLookupAction.java:171 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassVisionProfileLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileLookupAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>						db.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
						db.setExpandEntityReferences(false);
						doc = db.parse(new InputSource(
								new StringReader(s.toString())));
					} catch (SAXException e) {</Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>131</LineStart>
<Snippet>		try {
			java.lang.Object _resp = _call
					.invoke(new java.lang.Object[] { request });
			EasyLogger.info(&quot;response &quot; + _resp);
</Snippet>
<TargetFunction>org.apache.axis.client.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C2401A4-37A8-4B2E-9D0A-F03CB933D522" iid="1A57843F9BD147A21D6A8E36509E5B0B">
                            <Category>XML Entity Expansion Injection</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The XML parser configured in AutopayDetailsService.java:63 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>AutopayDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/AutopayDetailsService.java</FilePath>
<LineStart>63</LineStart>
<Snippet>		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		doc = dBuilder.parse(new InputSource(new StringReader(str)));
		doc.getDocumentElement().normalize();
		doc.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); </Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AutopayDetailsService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/systemtools/ittools/service/AutopayDetailsService.java</FilePath>
<LineStart>47</LineStart>
<Snippet>				req+=&quot;&lt;accountId&gt;&quot;+inputValue+&quot;&lt;/accountId&gt;&quot;;
			req+=&quot;&lt;/Request&gt;&quot;;
			String result=svc.invokeWebService(req, info);
			EasyLogger.info(&quot;The result is:: &quot;+result);
			if(result==null)</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C2401A4-37A8-4B2E-9D0A-F03CB933D522" iid="8F849364C766B97982BE65DA7A01D697">
                            <Category>XML Entity Expansion Injection</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The XML parser configured in MassVisionProfileLookupAction.java:171 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>MassVisionProfileLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/MassVisionProfileLookupAction.java</FilePath>
<LineStart>171</LineStart>
<Snippet>						db.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
						db.setExpandEntityReferences(false);
						doc = db.parse(new InputSource(
								new StringReader(s.toString())));
					} catch (SAXException e) {</Snippet>
<TargetFunction>javax.xml.parsers.DocumentBuilder.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ValidationService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/ValidationService.java</FilePath>
<LineStart>1719</LineStart>
<Snippet>		getWebserviceInfo(&quot;SuppDD&quot;, info); // TODO: Replace the key with proper
											// DS String
		String response = invokeWebService(request, info);
		return response;
	}</Snippet>
<TargetFunction>com.verizon.ssp.flowclient.webservice.ValidationService.invokeWebService()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Path Manipulation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Attackers are able to control the file system path argument to FileInputStream() at ProvisioningLookupAction.java line 182, which allows them to access or modify otherwise protected files.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Path manipulation errors occur when the following two conditions are met:

1. An attacker is able to specify a path used in an operation on the file system.

2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.

For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.


Example 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as &quot;../../tomcat/conf/server.xml&quot;, which causes the application to delete one of its own configuration files.


String rName = request.getParameter(&quot;reportName&quot;);
File rFile = new File(&quot;/usr/local/apfr/reports/&quot; + rName);
...
rFile.delete();


Example 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.


fis = new FileInputStream(cfg.getProperty(&quot;sub&quot;)+&quot;.txt&quot;);
amt = fis.read(arr);
out.println(arr);


Some think that in the mobile world, classic vulnerabilities, such as path manipulation, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 3: The following code adapts Example 1 to the Android platform.


...
        String rName = this.getIntent().getExtras().getString(&quot;reportName&quot;);
        File rFile = getBaseContext().getFileStreamPath(rName);
...
        rFile.delete();
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The best way to prevent path manipulation is with a level of indirection: create a list of legitimate resource names that a user is allowed to specify, and only allow the user to select from the list. With this approach the input provided by the user is never used directly to specify the resource name.

In some situations this approach is impractical because the set of legitimate resource names is too large or too hard to keep track of. Programmers often resort to blacklisting in these situations. Blacklisting selectively rejects or escapes potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a whitelist of characters that are allowed to appear in the resource name and accept input composed exclusively of characters in the approved set.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. If the program is performing input validation, satisfy yourself that the validation is correct, and use the Fortify Custom Rules Editor to create a cleanse rule for the validation routine.

2. Implementation of an effective blacklist is notoriously difficult. One should be skeptical if validation logic requires blacklisting. Consider different types of input encoding and different sets of meta-characters that might have special meaning when interpreted by different operating systems, databases, or other resources. Determine whether or not the blacklist can be updated easily, correctly, and completely if these requirements ever change.

3. A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="823FE039-A7FE-4AAD-B976-9EC53FFE4A59" iid="ED5AF55A5A621189A6444CA93282BE06">
                            <Category>Path Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Attackers are able to control the file system path argument to FileInputStream() at ProvisioningLookupAction.java line 182, which allows them to access or modify otherwise protected files.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ProvisioningLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ProvisioningLookupAction.java</FilePath>
<LineStart>182</LineStart>
<Snippet>				if (submitFile != null) {
					InputStream filecontent = null;
					filecontent = new FileInputStream(Utility.isValidFile(submitFile));
					BufferedReader br = new BufferedReader(new InputStreamReader(filecontent));
					while (((inputValues = br.readLine()) != null) &amp;&amp; !&quot;&quot;.equalsIgnoreCase(inputValues)) {</Snippet>
<TargetFunction>java.io.FileInputStream.FileInputStream()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ProvisioningLookupAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/ProvisioningLookupAction.java</FilePath>
<LineStart>71</LineStart>
<Snippet>		}

		public void setSubmitFile(File submitFile) {
			this.submitFile = submitFile;
		}</Snippet>
<TargetFunction>setSubmitFile(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="823FE039-A7FE-4AAD-B976-9EC53FFE4A59" iid="4C09C022ECCE4E22FC41B1BBF169D698">
                            <Category>Path Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Attackers are able to control the file system path argument to FileInputStream() at FeRequalifyService.java line 231, which allows them to access or modify otherwise protected files.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>FeRequalifyService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/service/FeRequalifyService.java</FilePath>
<LineStart>231</LineStart>
<Snippet>		ArrayList listOfRecords = new ArrayList();
		InputStream filecontent = null;
		filecontent = new FileInputStream(Utility.isValidFile(file));
		BufferedReader br = new BufferedReader(new InputStreamReader(filecontent));
		String str=null;</Snippet>
<TargetFunction>java.io.FileInputStream.FileInputStream()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FeRequalifyAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/FeRequalifyAction.java</FilePath>
<LineStart>86</LineStart>
<Snippet>		}

		public void setFeRequalFile(File feRequalFile) {
			this.feRequalFile = feRequalFile;
		}</Snippet>
<TargetFunction>setFeRequalFile(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="823FE039-A7FE-4AAD-B976-9EC53FFE4A59" iid="FFB358CF39D399C8F176095EB6F66904">
                            <Category>Path Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Attackers are able to control the file system path argument to FileInputStream() at RqtSqtConsolRequestAction.java line 201, which allows them to access or modify otherwise protected files.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RqtSqtConsolRequestAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/RqtSqtConsolRequestAction.java</FilePath>
<LineStart>201</LineStart>
<Snippet>		
		ArrayList listOfRecords = new ArrayList();
		filecontent = new FileInputStream(Utility.isValidFile(file));
		BufferedReader br = new BufferedReader(new InputStreamReader(filecontent));
		String str=null;</Snippet>
<TargetFunction>java.io.FileInputStream.FileInputStream()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>RqtSqtConsolRequestAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/businessTools/tools/action/RqtSqtConsolRequestAction.java</FilePath>
<LineStart>60</LineStart>
<Snippet>		}

		public void setFile(File file) {
			this.file = file;
		}</Snippet>
<TargetFunction>setFile(0)</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Cross-Site Scripting: Persistent</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Cross-site scripting (XSS) vulnerabilities occur when:

1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request.


2. The data is included in dynamic content that is sent to a web user without being validated.

The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.


Example 1: The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.


&lt;%...
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(&quot;select * from emp where id=&quot;+eid);
if (rs != null) {
   rs.next();
   String name = rs.getString(&quot;name&quot;);
}
%&gt;

Employee Name: &lt;%= name %&gt;



This code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a &quot;guestbook&quot; to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.


Example 2: The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.


&lt;% String eid = request.getParameter(&quot;eid&quot;); %&gt;
...
Employee ID: &lt;%= eid %&gt;



As in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.

Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.

Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 3: The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.


...
        WebView webview = (WebView) findViewById(R.id.webview);
        webview.getSettings().setJavaScriptEnabled(true);
        String url = this.getIntent().getExtras().getString(&quot;url&quot;);
        webview.loadUrl(url);
...


If the value of url starts with javascript:, JavaScript code that follows will execute within the context of the web page inside WebView.

As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:

- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.

- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.

- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.


A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties.

Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.

Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.

The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.

A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:

In the content of a block-level element (in the middle of a paragraph of text):

- &quot;&lt;&quot; is special because it introduces a tag.

- &quot;&amp;&quot; is special because it introduces a character entity.

- &quot;&gt;&quot; is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening &quot;&lt;&quot;, but omitted it in error.

The following principles apply to attribute values:

- In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value.

- In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value.

- In attribute values without any quotes, white-space characters, such as space and tab, are special.

- &quot;&amp;&quot; is special when used with certain attributes, because it introduces a character entity.

In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:

- Space, tab, and new line are special because they mark the end of the URL.

- &quot;&amp;&quot; is special because it either introduces a character entity or separates CGI parameters.

- Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.

- The &quot;%&quot; symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, &quot;%&quot; must be filtered if input such as &quot;%68%65%6C%6C%6F&quot; becomes &quot;hello&quot; when it appears on the web page in question.


Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:

- Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag.

Server-side scripts:

- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (&quot;) on output might require additional filtering.

Other possibilities:

- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).

Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display.

If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].

Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database.

2. Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities.

3. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="D070678B6C68465683D0334C25C85C60">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusService.java</FilePath>
<LineStart>600</LineStart>
<Snippet>			} else
				stmt.setString(2, fileLoadInfoSeqId);
			rs = stmt.executeQuery();
			while (rs.next()) {
				MOGProcessorStatusForm form = new MOGProcessorStatusForm();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="CCF05A8F2C44DD1C13C3DFFAB2D2E9C8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendFile() in MOGProcessorStatusAction.java sends unvalidated data to a web browser on line 296, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MOGProcessorStatusAction.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusAction.java</FilePath>
<LineStart>296</LineStart>
<Snippet>		try {			
			outStream = response.getOutputStream();
			outStream.write(Utility.isValidFileContent(outArray));
			outStream.flush();
		} catch (IOException e) {</Snippet>
<TargetFunction>java.io.OutputStream.write()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>MOGProcessorStatusService.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/moggui/MOGProcessorStatusService.java</FilePath>
<LineStart>407</LineStart>
<Snippet>				stmt.setString(2, searchValue);
			}
			rs = stmt.executeQuery();
			while (rs.next()) {
				MOGProcessorStatusForm form = new MOGProcessorStatusForm();</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>ClassLoader Manipulation: Struts 1</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Struts 1 applications that use ActionForms are vulnerable to ClassLoader manipulation.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>ClassLoader manipulation allows an attacker to access and modify the underlying application server settings. On certain applications servers like Tomcat 8, an attacker may tweak these settings to upload a web shell and execute arbitrary commands.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>There is currently no patch available to prevent ClassLoader manipulation attacks and since Struts 1 reached its End Of Life, no patch has been announced to protect Struts 1 users from this attack.

As a mitigation, it is highly recommended to install a Servlet Filter to protect the Struts 1 Servlet from ClassLoader Manipulation attacks. The latest version of the filter can be found at: https://github.com/rgielen/struts1filter:

To use the filter, add the following filter declaration along with appropriate mapping to the web.xml descriptor of the Struts 1 application to protect:


&lt;filter&gt;
    &lt;filter-name&gt;ParamFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;net.rgielen.struts1.filter.ParamWrapperFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;ParamFilter&lt;/filter-name&gt;
    &lt;servlet-name&gt;YOUR ACTION SERVLET&lt;/servlet-name&gt;
&lt;/filter-mapping&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="FF320219-9D3E-45A6-8299-743C00E56A7A" iid="1BA5E381416EC6CACCE4A375710EEF26">
                            <Category>ClassLoader Manipulation: Struts 1</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Struts 1 applications that use ActionForms are vulnerable to ClassLoader manipulation.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>struts-config.xml</FileName>
<FilePath>webapp/WEB-INF/struts-config.xml</FilePath>
<LineStart>5</LineStart>
<Snippet>
&lt;struts-config&gt;&lt;!--     ========== Form Bean Definitions ===================================     --&gt;
  &lt;form-beans&gt;
    &lt;!-- Sarvani added for PN ENV tool --&gt;
	&lt;form-bean name=&quot;PNEnvDetailsForm&quot;</Snippet>
<TargetFunction>null()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dynamic Code Evaluation: Unsafe Deserialization</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Deserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Java serialization turns object graphs into byte streams that contain the objects themselves and the necessary metadata to reconstruct them from the byte stream. Developers can create custom code to aid in the process of deserializing Java objects, where they can replace the deserialized objects with different objects, or proxies. The customized deserialization process takes place during objects reconstruction, before the objects are returned to the application and cast into expected types. By the time developers try to enforce an expected type, code may have already been executed. 

Custom deserialization routines are defined in the serializable classes which need to be present in the runtime classpath and cannot be injected by the attacker so the exploitability of these attacks depends on the classes available in the application environment. Unfortunately, common third party classes or even JDK classes can be abused to exhaust JVM resources, deploy malicious files, or run arbitrary code.

Certain protocols use Java serialization behind the scenes in the transport layer. RMI and JMX are examples of these protocols.

Example 1: Here is an example of an RMI interface that can be exposed publicly, containing methods with one or more parameters. When invoking these methods remotely, the arguments will be deserialized on the server allowing attackers to inject malicious object graphs.

public interface MyService extends java.rmi.Remote {
    public Object doSomething (Object arg0) throws RemoteException;
    public Object doSomethingElse (Object arg0, Object arg1) throws RemoteException;
    ...
}


Example 2: JMX MBeans also use Java serialization to transmit call arguments. In the example below, the MyManagedBean class methods will be exposed to clients.

MBeanServer mbs = ManagementFactory.getPlatformMBeanServer(); 
ObjectName name = new ObjectName(&quot;com.example:type=MyManagedBean&quot;); 
MyManagedBean mbean = new MyManagedBean(); 
mbs.registerMBean(mbean, name);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>If possible, do not deserialize untrusted data without validating the contents of the object stream. In order to validate classes being deserialized, the look-ahead deserialization pattern should be used. 

The object stream will first contain the class description metadata and then the serialized bytes of their member fields. The Java serialization process allows developers to read the class description and decide whether to proceed with the deserialization of the object or abort it. In order to do so, it is necessary to subclass java.io.ObjectInputStream and provide a custom implementation of the resolveClass(ObjectStreamClass desc) method where class validation and verification should take place. 

There are existing implementations of the look-ahead pattern that can be easily used, such as the Apache Commons IO (org.apache.commons.io.serialization.ValidatingObjectInputStream). Always use a strict whitelist approach to only deserialize expected types. A blacklist approach is not recommended since attackers may use many available gadgets to bypass the blacklist. Also, keep in mind that although some classes to achieve code execution are publicly known, there may be others that are unknown or undisclosed, so a whitelist approach will always be preferred. Any class allowed in the whitelist should be audited to make sure it is safe to deserialize.

When deserialization takes place in library, or framework (e.g. when using JMX, RMI, JMS, HTTP Invokers) the above recommendation is not useful since it is beyond the developer's control. In those cases, you may want to make sure that these protocols meet the following requirements:

- Not exposed publicly.
- Use authentication.
- Use integrity checks.
- Use encryption.

In addition, Fortify Runtime provides security controls to be enforced every time the application performs a deserialization from an ObjectInputStream, protecting both application code but also library and framework code from this type of attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Due to existing flaw in ObjectInputStream implementation and the difficulties of blacklisting basic classes that may be used to perform denial of service (DoS) attacks, this issue will be reported even if a look-ahead ObjectInputStream is implemented but its severity will be lowered to Medium.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="F07D590E-00AE-4D4F-BD7A-4A658CC24921" iid="33A54D7D90405ECE9A9C16A7D61FCEC1">
                            <Category>Dynamic Code Evaluation: Unsafe Deserialization</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Deserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DynamicClientStub.java</FileName>
<FilePath>webapp/WEB-INF/classes/com/verizon/ssp/flowclient/webservice/DynamicClientStub.java</FilePath>
<LineStart>16</LineStart>
<Snippet>import com.verizon.ssp.flowclient.webservice.WebServiceInfo;

public class DynamicClientStub extends org.apache.axis.client.Stub implements
		java.rmi.Remote {
	public DynamicClientStub() throws org.apache.axis.AxisFault {</Snippet>
<TargetFunction>Class: DynamicClientStub()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
</ReportDefinition>
